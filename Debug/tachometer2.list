
tachometer2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004758  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08004928  08004928  00005928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049cc  080049cc  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  080049cc  080049cc  000059cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049d4  080049d4  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049d4  080049d4  000059d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080049d8  080049d8  000059d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080049dc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000029a4  2000005c  08004a38  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002a00  08004a38  00006a00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0b4  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000246a  00000000  00000000  00014140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  000165b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a4c  00000000  00000000  000172f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021cb4  00000000  00000000  00017d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d33  00000000  00000000  000399f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf4ca  00000000  00000000  0004a72b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00119bf5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b7c  00000000  00000000  00119c38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0011d7b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004910 	.word	0x08004910

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08004910 	.word	0x08004910

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <tachometer_init>:
static uint32_t time2;
static uint32_t last_sample_time;
char message[100];
char byte_received;
void tachometer_init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	disable_tim_interrupts();
 80005b4:	f000 fd4a 	bl	800104c <disable_tim_interrupts>
	disable_gpio_interrupts();
 80005b8:	f000 fa13 	bl	80009e2 <disable_gpio_interrupts>
	current_state = TAC_POLLING_TRIGGER;
 80005bc:	4b0b      	ldr	r3, [pc, #44]	@ (80005ec <tachometer_init+0x3c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
	tachometer_entry_action(TAC_POLLING_TRIGGER);
 80005c2:	2000      	movs	r0, #0
 80005c4:	f000 f8e0 	bl	8000788 <tachometer_entry_action>
	evento = TRIGGER_OFF;
 80005c8:	4b09      	ldr	r3, [pc, #36]	@ (80005f0 <tachometer_init+0x40>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	701a      	strb	r2, [r3, #0]
	time_elapsed = 0;
 80005ce:	4b09      	ldr	r3, [pc, #36]	@ (80005f4 <tachometer_init+0x44>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
	time1 = 0;
 80005d4:	4b08      	ldr	r3, [pc, #32]	@ (80005f8 <tachometer_init+0x48>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
	time2= 0;
 80005da:	4b08      	ldr	r3, [pc, #32]	@ (80005fc <tachometer_init+0x4c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
	byte_received = '0';
 80005e0:	4b07      	ldr	r3, [pc, #28]	@ (8000600 <tachometer_init+0x50>)
 80005e2:	2230      	movs	r2, #48	@ 0x30
 80005e4:	701a      	strb	r2, [r3, #0]

}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	2000278c 	.word	0x2000278c
 80005f0:	2000278d 	.word	0x2000278d
 80005f4:	20002790 	.word	0x20002790
 80005f8:	20002794 	.word	0x20002794
 80005fc:	20002798 	.word	0x20002798
 8000600:	20002804 	.word	0x20002804

08000604 <tachometer_state_machine>:

void tachometer_state_machine(tachometer_event_t event)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
	tachometer_state_t prev_state;
	prev_state = current_state;
 800060e:	4b54      	ldr	r3, [pc, #336]	@ (8000760 <tachometer_state_machine+0x15c>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	73fb      	strb	r3, [r7, #15]
	switch (current_state) {
 8000614:	4b52      	ldr	r3, [pc, #328]	@ (8000760 <tachometer_state_machine+0x15c>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b03      	cmp	r3, #3
 800061a:	f200 8091 	bhi.w	8000740 <tachometer_state_machine+0x13c>
 800061e:	a201      	add	r2, pc, #4	@ (adr r2, 8000624 <tachometer_state_machine+0x20>)
 8000620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000624:	08000635 	.word	0x08000635
 8000628:	08000647 	.word	0x08000647
 800062c:	080006b5 	.word	0x080006b5
 8000630:	080006ed 	.word	0x080006ed
		case TAC_POLLING_TRIGGER:
			switch (event) {
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	2b01      	cmp	r3, #1
 8000638:	d103      	bne.n	8000642 <tachometer_state_machine+0x3e>
				case TRIGGER_ON:
					current_state = TAC_MEASURE;
 800063a:	4b49      	ldr	r3, [pc, #292]	@ (8000760 <tachometer_state_machine+0x15c>)
 800063c:	2201      	movs	r2, #1
 800063e:	701a      	strb	r2, [r3, #0]
					break;
 8000640:	e000      	b.n	8000644 <tachometer_state_machine+0x40>
				default:
					break;
 8000642:	bf00      	nop
			}
			break;
 8000644:	e07d      	b.n	8000742 <tachometer_state_machine+0x13e>
		case TAC_MEASURE:
			switch (event) {
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d005      	beq.n	8000658 <tachometer_state_machine+0x54>
 800064c:	2b02      	cmp	r3, #2
 800064e:	d12d      	bne.n	80006ac <tachometer_state_machine+0xa8>
				case FULL_BUFFER:
					current_state = TAC_WAIT_TRANSMIT;
 8000650:	4b43      	ldr	r3, [pc, #268]	@ (8000760 <tachometer_state_machine+0x15c>)
 8000652:	2202      	movs	r2, #2
 8000654:	701a      	strb	r2, [r3, #0]
					break;
 8000656:	e02c      	b.n	80006b2 <tachometer_state_machine+0xae>
				case TRIGGER_ON:
					if (HAL_GetTick() - last_sample_time >= MUESTREO_MS)
 8000658:	f000 fe64 	bl	8001324 <HAL_GetTick>
 800065c:	4602      	mov	r2, r0
 800065e:	4b41      	ldr	r3, [pc, #260]	@ (8000764 <tachometer_state_machine+0x160>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	429a      	cmp	r2, r3
 8000664:	d024      	beq.n	80006b0 <tachometer_state_machine+0xac>
					{
						if (! enqueue(&buffer, get_frequency()))
 8000666:	f000 fce5 	bl	8001034 <get_frequency>
 800066a:	4603      	mov	r3, r0
 800066c:	b2db      	uxtb	r3, r3
 800066e:	4619      	mov	r1, r3
 8000670:	483d      	ldr	r0, [pc, #244]	@ (8000768 <tachometer_state_machine+0x164>)
 8000672:	f000 fa8f 	bl	8000b94 <enqueue>
 8000676:	4603      	mov	r3, r0
 8000678:	f083 0301 	eor.w	r3, r3, #1
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b00      	cmp	r3, #0
 8000680:	d007      	beq.n	8000692 <tachometer_state_machine+0x8e>
						{
							evento = FULL_BUFFER;
 8000682:	4b3a      	ldr	r3, [pc, #232]	@ (800076c <tachometer_state_machine+0x168>)
 8000684:	2202      	movs	r2, #2
 8000686:	701a      	strb	r2, [r3, #0]
							time2 = HAL_GetTick();
 8000688:	f000 fe4c 	bl	8001324 <HAL_GetTick>
 800068c:	4603      	mov	r3, r0
 800068e:	4a38      	ldr	r2, [pc, #224]	@ (8000770 <tachometer_state_machine+0x16c>)
 8000690:	6013      	str	r3, [r2, #0]
						}
						time_elapsed = time2 - time1;
 8000692:	4b37      	ldr	r3, [pc, #220]	@ (8000770 <tachometer_state_machine+0x16c>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	4b37      	ldr	r3, [pc, #220]	@ (8000774 <tachometer_state_machine+0x170>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	1ad3      	subs	r3, r2, r3
 800069c:	4a36      	ldr	r2, [pc, #216]	@ (8000778 <tachometer_state_machine+0x174>)
 800069e:	6013      	str	r3, [r2, #0]
						last_sample_time = HAL_GetTick();
 80006a0:	f000 fe40 	bl	8001324 <HAL_GetTick>
 80006a4:	4603      	mov	r3, r0
 80006a6:	4a2f      	ldr	r2, [pc, #188]	@ (8000764 <tachometer_state_machine+0x160>)
 80006a8:	6013      	str	r3, [r2, #0]
//					}
//					time_elapsed = time2 - time1;
//					HAL_Delay(MUESTREO_MS);


					break;
 80006aa:	e001      	b.n	80006b0 <tachometer_state_machine+0xac>
				default:
					break;
 80006ac:	bf00      	nop
 80006ae:	e048      	b.n	8000742 <tachometer_state_machine+0x13e>
					break;
 80006b0:	bf00      	nop
			}
			break;
 80006b2:	e046      	b.n	8000742 <tachometer_state_machine+0x13e>
		case TAC_WAIT_TRANSMIT:
			switch (event) {
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	2b02      	cmp	r3, #2
 80006b8:	d005      	beq.n	80006c6 <tachometer_state_machine+0xc2>
 80006ba:	2b03      	cmp	r3, #3
 80006bc:	d114      	bne.n	80006e8 <tachometer_state_machine+0xe4>
				case SERIAL_RECEIVED:
					current_state = TAC_TRANSMIT;
 80006be:	4b28      	ldr	r3, [pc, #160]	@ (8000760 <tachometer_state_machine+0x15c>)
 80006c0:	2203      	movs	r2, #3
 80006c2:	701a      	strb	r2, [r3, #0]
					break;
 80006c4:	e011      	b.n	80006ea <tachometer_state_machine+0xe6>
				case FULL_BUFFER:
					byte_received = receive_byte();
 80006c6:	f000 fd4f 	bl	8001168 <receive_byte>
 80006ca:	4603      	mov	r3, r0
 80006cc:	461a      	mov	r2, r3
 80006ce:	4b2b      	ldr	r3, [pc, #172]	@ (800077c <tachometer_state_machine+0x178>)
 80006d0:	701a      	strb	r2, [r3, #0]
					if (byte_received == 'x' || byte_received == 'X' )
 80006d2:	4b2a      	ldr	r3, [pc, #168]	@ (800077c <tachometer_state_machine+0x178>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b78      	cmp	r3, #120	@ 0x78
 80006d8:	d003      	beq.n	80006e2 <tachometer_state_machine+0xde>
 80006da:	4b28      	ldr	r3, [pc, #160]	@ (800077c <tachometer_state_machine+0x178>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b58      	cmp	r3, #88	@ 0x58
 80006e0:	d102      	bne.n	80006e8 <tachometer_state_machine+0xe4>
					{
						evento = SERIAL_RECEIVED;
 80006e2:	4b22      	ldr	r3, [pc, #136]	@ (800076c <tachometer_state_machine+0x168>)
 80006e4:	2203      	movs	r2, #3
 80006e6:	701a      	strb	r2, [r3, #0]

					}
				default:
					break;
 80006e8:	bf00      	nop
			}
			break;
 80006ea:	e02a      	b.n	8000742 <tachometer_state_machine+0x13e>
		case TAC_TRANSMIT:
			switch (event) {
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	2b03      	cmp	r3, #3
 80006f0:	d004      	beq.n	80006fc <tachometer_state_machine+0xf8>
 80006f2:	2b04      	cmp	r3, #4
 80006f4:	d120      	bne.n	8000738 <tachometer_state_machine+0x134>
				case EMPTY_BUFFER:
					current_state = TAC_POLLING_TRIGGER;
 80006f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000760 <tachometer_state_machine+0x15c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
				case SERIAL_RECEIVED:
					send_value(buffer.data[buffer.head]);
 80006fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000768 <tachometer_state_machine+0x164>)
 80006fe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000702:	f8b3 3710 	ldrh.w	r3, [r3, #1808]	@ 0x710
 8000706:	461a      	mov	r2, r3
 8000708:	4b17      	ldr	r3, [pc, #92]	@ (8000768 <tachometer_state_machine+0x164>)
 800070a:	5c9b      	ldrb	r3, [r3, r2]
 800070c:	4618      	mov	r0, r3
 800070e:	f000 fd67 	bl	80011e0 <send_value>
					if(!dequeue(&buffer))
 8000712:	4815      	ldr	r0, [pc, #84]	@ (8000768 <tachometer_state_machine+0x164>)
 8000714:	f000 fa80 	bl	8000c18 <dequeue>
 8000718:	4603      	mov	r3, r0
 800071a:	f083 0301 	eor.w	r3, r3, #1
 800071e:	b2db      	uxtb	r3, r3
 8000720:	2b00      	cmp	r3, #0
 8000722:	d00b      	beq.n	800073c <tachometer_state_machine+0x138>
					{
						evento = EMPTY_BUFFER;
 8000724:	4b11      	ldr	r3, [pc, #68]	@ (800076c <tachometer_state_machine+0x168>)
 8000726:	2204      	movs	r2, #4
 8000728:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*)"\n",1, 100);
 800072a:	2364      	movs	r3, #100	@ 0x64
 800072c:	2201      	movs	r2, #1
 800072e:	4914      	ldr	r1, [pc, #80]	@ (8000780 <tachometer_state_machine+0x17c>)
 8000730:	4814      	ldr	r0, [pc, #80]	@ (8000784 <tachometer_state_machine+0x180>)
 8000732:	f002 fffb 	bl	800372c <HAL_UART_Transmit>
					}

					break;
 8000736:	e001      	b.n	800073c <tachometer_state_machine+0x138>
				default:
					break;
 8000738:	bf00      	nop
 800073a:	e002      	b.n	8000742 <tachometer_state_machine+0x13e>
					break;
 800073c:	bf00      	nop
			}
			break;
 800073e:	e000      	b.n	8000742 <tachometer_state_machine+0x13e>
		default:
			break;
 8000740:	bf00      	nop
	}

	if(prev_state != current_state)
 8000742:	4b07      	ldr	r3, [pc, #28]	@ (8000760 <tachometer_state_machine+0x15c>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	7bfa      	ldrb	r2, [r7, #15]
 8000748:	429a      	cmp	r2, r3
 800074a:	d004      	beq.n	8000756 <tachometer_state_machine+0x152>
	{
		tachometer_entry_action(current_state);
 800074c:	4b04      	ldr	r3, [pc, #16]	@ (8000760 <tachometer_state_machine+0x15c>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	4618      	mov	r0, r3
 8000752:	f000 f819 	bl	8000788 <tachometer_entry_action>
	}

}
 8000756:	bf00      	nop
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	2000278c 	.word	0x2000278c
 8000764:	2000279c 	.word	0x2000279c
 8000768:	20000078 	.word	0x20000078
 800076c:	2000278d 	.word	0x2000278d
 8000770:	20002798 	.word	0x20002798
 8000774:	20002794 	.word	0x20002794
 8000778:	20002790 	.word	0x20002790
 800077c:	20002804 	.word	0x20002804
 8000780:	08004928 	.word	0x08004928
 8000784:	2000286c 	.word	0x2000286c

08000788 <tachometer_entry_action>:

void tachometer_entry_action(tachometer_state_t state)
{
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
	switch (state) {
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	2b03      	cmp	r3, #3
 8000796:	d829      	bhi.n	80007ec <tachometer_entry_action+0x64>
 8000798:	a201      	add	r2, pc, #4	@ (adr r2, 80007a0 <tachometer_entry_action+0x18>)
 800079a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800079e:	bf00      	nop
 80007a0:	080007b1 	.word	0x080007b1
 80007a4:	080007c3 	.word	0x080007c3
 80007a8:	080007d7 	.word	0x080007d7
 80007ac:	080007ed 	.word	0x080007ed
		case TAC_POLLING_TRIGGER:
			init_ring_buffer(&buffer);
 80007b0:	4811      	ldr	r0, [pc, #68]	@ (80007f8 <tachometer_entry_action+0x70>)
 80007b2:	f000 f9af 	bl	8000b14 <init_ring_buffer>
			enable_gpio_interrupts();
 80007b6:	f000 f90d 	bl	80009d4 <enable_gpio_interrupts>
			evento = TRIGGER_OFF;
 80007ba:	4b10      	ldr	r3, [pc, #64]	@ (80007fc <tachometer_entry_action+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	701a      	strb	r2, [r3, #0]

			break;
 80007c0:	e015      	b.n	80007ee <tachometer_entry_action+0x66>
		case TAC_MEASURE:
			enable_tim_interrupts();
 80007c2:	f000 fc51 	bl	8001068 <enable_tim_interrupts>
			disable_gpio_interrupts();
 80007c6:	f000 f90c 	bl	80009e2 <disable_gpio_interrupts>
			time1 = HAL_GetTick();
 80007ca:	f000 fdab 	bl	8001324 <HAL_GetTick>
 80007ce:	4603      	mov	r3, r0
 80007d0:	4a0b      	ldr	r2, [pc, #44]	@ (8000800 <tachometer_entry_action+0x78>)
 80007d2:	6013      	str	r3, [r2, #0]
			break;
 80007d4:	e00b      	b.n	80007ee <tachometer_entry_action+0x66>
		case TAC_WAIT_TRANSMIT:
			data_ready(time_elapsed, (uint8_t) MUESTREO_MS, get_buffer_size(), message);
 80007d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <tachometer_entry_action+0x7c>)
 80007d8:	681c      	ldr	r4, [r3, #0]
 80007da:	f000 fa53 	bl	8000c84 <get_buffer_size>
 80007de:	4602      	mov	r2, r0
 80007e0:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <tachometer_entry_action+0x80>)
 80007e2:	2101      	movs	r1, #1
 80007e4:	4620      	mov	r0, r4
 80007e6:	f000 fcd7 	bl	8001198 <data_ready>

			break;
 80007ea:	e000      	b.n	80007ee <tachometer_entry_action+0x66>
		case TAC_TRANSMIT:

			break;
		default:
			break;
 80007ec:	bf00      	nop
	}

}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd90      	pop	{r4, r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000078 	.word	0x20000078
 80007fc:	2000278d 	.word	0x2000278d
 8000800:	20002794 	.word	0x20002794
 8000804:	20002790 	.word	0x20002790
 8000808:	200027a0 	.word	0x200027a0

0800080c <read_event>:

tachometer_event_t read_event(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
	return evento;
 8000810:	4b03      	ldr	r3, [pc, #12]	@ (8000820 <read_event+0x14>)
 8000812:	781b      	ldrb	r3, [r3, #0]

}
 8000814:	4618      	mov	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	2000278d 	.word	0x2000278d

08000824 <modify_event>:

void modify_event(tachometer_event_t event)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
	evento = event;
 800082e:	4a04      	ldr	r2, [pc, #16]	@ (8000840 <modify_event+0x1c>)
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	7013      	strb	r3, [r2, #0]
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	2000278d 	.word	0x2000278d

08000844 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	@ 0x28
 8000848:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	4b52      	ldr	r3, [pc, #328]	@ (80009a8 <MX_GPIO_Init+0x164>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a51      	ldr	r2, [pc, #324]	@ (80009a8 <MX_GPIO_Init+0x164>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b4f      	ldr	r3, [pc, #316]	@ (80009a8 <MX_GPIO_Init+0x164>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	4b4b      	ldr	r3, [pc, #300]	@ (80009a8 <MX_GPIO_Init+0x164>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a4a      	ldr	r2, [pc, #296]	@ (80009a8 <MX_GPIO_Init+0x164>)
 8000880:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b48      	ldr	r3, [pc, #288]	@ (80009a8 <MX_GPIO_Init+0x164>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	4b44      	ldr	r3, [pc, #272]	@ (80009a8 <MX_GPIO_Init+0x164>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a43      	ldr	r2, [pc, #268]	@ (80009a8 <MX_GPIO_Init+0x164>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b41      	ldr	r3, [pc, #260]	@ (80009a8 <MX_GPIO_Init+0x164>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b3d      	ldr	r3, [pc, #244]	@ (80009a8 <MX_GPIO_Init+0x164>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a3c      	ldr	r2, [pc, #240]	@ (80009a8 <MX_GPIO_Init+0x164>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b3a      	ldr	r3, [pc, #232]	@ (80009a8 <MX_GPIO_Init+0x164>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	4b36      	ldr	r3, [pc, #216]	@ (80009a8 <MX_GPIO_Init+0x164>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a35      	ldr	r2, [pc, #212]	@ (80009a8 <MX_GPIO_Init+0x164>)
 80008d4:	f043 0308 	orr.w	r3, r3, #8
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b33      	ldr	r3, [pc, #204]	@ (80009a8 <MX_GPIO_Init+0x164>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0308 	and.w	r3, r3, #8
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2120      	movs	r1, #32
 80008ea:	4830      	ldr	r0, [pc, #192]	@ (80009ac <MX_GPIO_Init+0x168>)
 80008ec:	f000 fffe 	bl	80018ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC6
                           PC7 PC8 PC9 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 80008f0:	f643 33ff 	movw	r3, #15359	@ 0x3bff
 80008f4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008f6:	2303      	movs	r3, #3
 80008f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	482a      	ldr	r0, [pc, #168]	@ (80009b0 <MX_GPIO_Init+0x16c>)
 8000906:	f000 fe5d 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7
 800090a:	f649 73d2 	movw	r3, #40914	@ 0x9fd2
 800090e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000910:	2303      	movs	r3, #3
 8000912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4619      	mov	r1, r3
 800091e:	4823      	ldr	r0, [pc, #140]	@ (80009ac <MX_GPIO_Init+0x168>)
 8000920:	f000 fe50 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000924:	2320      	movs	r3, #32
 8000926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	2301      	movs	r3, #1
 800092a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4619      	mov	r1, r3
 800093a:	481c      	ldr	r0, [pc, #112]	@ (80009ac <MX_GPIO_Init+0x168>)
 800093c:	f000 fe42 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 PB15
                           PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000940:	f24f 73f7 	movw	r3, #63479	@ 0xf7f7
 8000944:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000946:	2303      	movs	r3, #3
 8000948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	4817      	ldr	r0, [pc, #92]	@ (80009b4 <MX_GPIO_Init+0x170>)
 8000956:	f000 fe35 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Trigger_Pin;
 800095a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800095e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000960:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Trigger_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4619      	mov	r1, r3
 8000970:	480f      	ldr	r0, [pc, #60]	@ (80009b0 <MX_GPIO_Init+0x16c>)
 8000972:	f000 fe27 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000976:	2304      	movs	r3, #4
 8000978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800097a:	2303      	movs	r3, #3
 800097c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	4619      	mov	r1, r3
 8000988:	480b      	ldr	r0, [pc, #44]	@ (80009b8 <MX_GPIO_Init+0x174>)
 800098a:	f000 fe1b 	bl	80015c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2100      	movs	r1, #0
 8000992:	2028      	movs	r0, #40	@ 0x28
 8000994:	f000 fdd1 	bl	800153a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000998:	2028      	movs	r0, #40	@ 0x28
 800099a:	f000 fdea 	bl	8001572 <HAL_NVIC_EnableIRQ>

}
 800099e:	bf00      	nop
 80009a0:	3728      	adds	r7, #40	@ 0x28
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020000 	.word	0x40020000
 80009b0:	40020800 	.word	0x40020800
 80009b4:	40020400 	.word	0x40020400
 80009b8:	40020c00 	.word	0x40020c00

080009bc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	80fb      	strh	r3, [r7, #6]
	modify_event(TRIGGER_ON);
 80009c6:	2001      	movs	r0, #1
 80009c8:	f7ff ff2c 	bl	8000824 <modify_event>
}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <enable_gpio_interrupts>:

void enable_gpio_interrupts(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009d8:	2028      	movs	r0, #40	@ 0x28
 80009da:	f000 fdca 	bl	8001572 <HAL_NVIC_EnableIRQ>
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <disable_gpio_interrupts>:

void disable_gpio_interrupts(void)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80009e6:	2028      	movs	r0, #40	@ 0x28
 80009e8:	f000 fdd1 	bl	800158e <HAL_NVIC_DisableIRQ>
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f4:	f000 fc30 	bl	8001258 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f8:	f000 f818 	bl	8000a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009fc:	f7ff ff22 	bl	8000844 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a00:	f000 fb40 	bl	8001084 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000a04:	f000 f9fa 	bl	8000dfc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  tachometer_init();
 8000a08:	f7ff fdd2 	bl	80005b0 <tachometer_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  evento_actual = read_event();
 8000a0c:	f7ff fefe 	bl	800080c <read_event>
 8000a10:	4603      	mov	r3, r0
 8000a12:	461a      	mov	r2, r3
 8000a14:	4b04      	ldr	r3, [pc, #16]	@ (8000a28 <main+0x38>)
 8000a16:	701a      	strb	r2, [r3, #0]
	  tachometer_state_machine(evento_actual);
 8000a18:	4b03      	ldr	r3, [pc, #12]	@ (8000a28 <main+0x38>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff fdf1 	bl	8000604 <tachometer_state_machine>
	  evento_actual = read_event();
 8000a22:	bf00      	nop
 8000a24:	e7f2      	b.n	8000a0c <main+0x1c>
 8000a26:	bf00      	nop
 8000a28:	20002805 	.word	0x20002805

08000a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b094      	sub	sp, #80	@ 0x50
 8000a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	2234      	movs	r2, #52	@ 0x34
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f003 fae8 	bl	8004010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a40:	f107 0308 	add.w	r3, r7, #8
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	4b2a      	ldr	r3, [pc, #168]	@ (8000b00 <SystemClock_Config+0xd4>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a58:	4a29      	ldr	r2, [pc, #164]	@ (8000b00 <SystemClock_Config+0xd4>)
 8000a5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a60:	4b27      	ldr	r3, [pc, #156]	@ (8000b00 <SystemClock_Config+0xd4>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	4b24      	ldr	r3, [pc, #144]	@ (8000b04 <SystemClock_Config+0xd8>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a78:	4a22      	ldr	r2, [pc, #136]	@ (8000b04 <SystemClock_Config+0xd8>)
 8000a7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a7e:	6013      	str	r3, [r2, #0]
 8000a80:	4b20      	ldr	r3, [pc, #128]	@ (8000b04 <SystemClock_Config+0xd8>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a90:	2301      	movs	r3, #1
 8000a92:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a94:	2310      	movs	r3, #16
 8000a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000aa0:	2310      	movs	r3, #16
 8000aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000aa4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000aa8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000aaa:	2304      	movs	r3, #4
 8000aac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4618      	mov	r0, r3
 8000abc:	f001 fa92 	bl	8001fe4 <HAL_RCC_OscConfig>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ac6:	f000 f81f 	bl	8000b08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aca:	230f      	movs	r3, #15
 8000acc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ad6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ada:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ae0:	f107 0308 	add.w	r3, r7, #8
 8000ae4:	2102      	movs	r1, #2
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 ff32 	bl	8001950 <HAL_RCC_ClockConfig>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000af2:	f000 f809 	bl	8000b08 <Error_Handler>
  }
}
 8000af6:	bf00      	nop
 8000af8:	3750      	adds	r7, #80	@ 0x50
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40007000 	.word	0x40007000

08000b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b0c:	b672      	cpsid	i
}
 8000b0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <Error_Handler+0x8>

08000b14 <init_ring_buffer>:
 */

#include "ringbuffer.h"

void init_ring_buffer(Ring_buffer_t *buffer)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	buffer->count = 0;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000b22:	2200      	movs	r2, #0
 8000b24:	f8a3 2712 	strh.w	r2, [r3, #1810]	@ 0x712
	buffer->head = 0;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f8a3 2710 	strh.w	r2, [r3, #1808]	@ 0x710
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <buffer_is_full>:

bool buffer_is_full(Ring_buffer_t *buffer)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	return buffer->count == BUFFER_SIZE;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000b4e:	f8b3 3712 	ldrh.w	r3, [r3, #1810]	@ 0x712
 8000b52:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000b56:	4293      	cmp	r3, r2
 8000b58:	bf0c      	ite	eq
 8000b5a:	2301      	moveq	r3, #1
 8000b5c:	2300      	movne	r3, #0
 8000b5e:	b2db      	uxtb	r3, r3

}
 8000b60:	4618      	mov	r0, r3
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <buffer_is_empty>:

bool buffer_is_empty(Ring_buffer_t *buffer)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	return buffer->count == 0;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000b7a:	f8b3 3712 	ldrh.w	r3, [r3, #1810]	@ 0x712
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	bf0c      	ite	eq
 8000b82:	2301      	moveq	r3, #1
 8000b84:	2300      	movne	r3, #0
 8000b86:	b2db      	uxtb	r3, r3

}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <enqueue>:

bool enqueue(Ring_buffer_t *buffer, uint8_t value)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	70fb      	strb	r3, [r7, #3]
	if(buffer_is_full(buffer))
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f7ff ffcd 	bl	8000b40 <buffer_is_full>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <enqueue+0x1c>
	{
		return false;
 8000bac:	2300      	movs	r3, #0
 8000bae:	e02c      	b.n	8000c0a <enqueue+0x76>
	}
	else
	{
		buffer->data[buffer->head] = value;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000bb6:	f8b3 3710 	ldrh.w	r3, [r3, #1808]	@ 0x710
 8000bba:	4619      	mov	r1, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	78fa      	ldrb	r2, [r7, #3]
 8000bc0:	545a      	strb	r2, [r3, r1]
		buffer->head = (buffer->head + 1) % BUFFER_SIZE; // aumenta y se asegura volver a cero
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000bc8:	f8b3 3710 	ldrh.w	r3, [r3, #1808]	@ 0x710
 8000bcc:	3301      	adds	r3, #1
 8000bce:	4a11      	ldr	r2, [pc, #68]	@ (8000c14 <enqueue+0x80>)
 8000bd0:	fb82 1203 	smull	r1, r2, r2, r3
 8000bd4:	1311      	asrs	r1, r2, #12
 8000bd6:	17da      	asrs	r2, r3, #31
 8000bd8:	1a8a      	subs	r2, r1, r2
 8000bda:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000bde:	fb01 f202 	mul.w	r2, r1, r2
 8000be2:	1a9a      	subs	r2, r3, r2
 8000be4:	b292      	uxth	r2, r2
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000bec:	f8a3 2710 	strh.w	r2, [r3, #1808]	@ 0x710
		buffer->count++;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000bf6:	f8b3 3712 	ldrh.w	r3, [r3, #1810]	@ 0x712
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	b29a      	uxth	r2, r3
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000c04:	f8a3 2712 	strh.w	r2, [r3, #1810]	@ 0x712
		return true;
 8000c08:	2301      	movs	r3, #1

	}

}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	68db8bad 	.word	0x68db8bad

08000c18 <dequeue>:

bool dequeue(Ring_buffer_t *buffer)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	if (buffer_is_empty(buffer))
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff ffa3 	bl	8000b6c <buffer_is_empty>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <dequeue+0x18>
	{
		return false;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	e023      	b.n	8000c78 <dequeue+0x60>
	}
	else
	{
		buffer->head = (buffer->head + 1) % BUFFER_SIZE;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000c36:	f8b3 3710 	ldrh.w	r3, [r3, #1808]	@ 0x710
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	4a10      	ldr	r2, [pc, #64]	@ (8000c80 <dequeue+0x68>)
 8000c3e:	fb82 1203 	smull	r1, r2, r2, r3
 8000c42:	1311      	asrs	r1, r2, #12
 8000c44:	17da      	asrs	r2, r3, #31
 8000c46:	1a8a      	subs	r2, r1, r2
 8000c48:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000c4c:	fb01 f202 	mul.w	r2, r1, r2
 8000c50:	1a9a      	subs	r2, r3, r2
 8000c52:	b292      	uxth	r2, r2
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000c5a:	f8a3 2710 	strh.w	r2, [r3, #1808]	@ 0x710
		buffer->count--;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000c64:	f8b3 3712 	ldrh.w	r3, [r3, #1810]	@ 0x712
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	b29a      	uxth	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000c72:	f8a3 2712 	strh.w	r2, [r3, #1810]	@ 0x712
		return true;
 8000c76:	2301      	movs	r3, #1
	}
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	68db8bad 	.word	0x68db8bad

08000c84 <get_buffer_size>:

uint32_t get_buffer_size(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
	return (uint32_t) BUFFER_SIZE;
 8000c88:	f242 7310 	movw	r3, #10000	@ 0x2710
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
	...

08000c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	4b10      	ldr	r3, [pc, #64]	@ (8000ce4 <HAL_MspInit+0x4c>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca6:	4a0f      	ldr	r2, [pc, #60]	@ (8000ce4 <HAL_MspInit+0x4c>)
 8000ca8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce4 <HAL_MspInit+0x4c>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	603b      	str	r3, [r7, #0]
 8000cbe:	4b09      	ldr	r3, [pc, #36]	@ (8000ce4 <HAL_MspInit+0x4c>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc2:	4a08      	ldr	r2, [pc, #32]	@ (8000ce4 <HAL_MspInit+0x4c>)
 8000cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cca:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <HAL_MspInit+0x4c>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cd6:	2007      	movs	r0, #7
 8000cd8:	f000 fc24 	bl	8001524 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40023800 	.word	0x40023800

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <NMI_Handler+0x4>

08000cf0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <HardFault_Handler+0x4>

08000cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <MemManage_Handler+0x4>

08000d00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <BusFault_Handler+0x4>

08000d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <UsageFault_Handler+0x4>

08000d10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d3e:	f000 fadd 	bl	80012fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d4c:	4802      	ldr	r0, [pc, #8]	@ (8000d58 <TIM2_IRQHandler+0x10>)
 8000d4e:	f001 ff05 	bl	8002b5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20002824 	.word	0x20002824

08000d5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Trigger_Pin);
 8000d60:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000d64:	f000 fddc 	bl	8001920 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d74:	4a14      	ldr	r2, [pc, #80]	@ (8000dc8 <_sbrk+0x5c>)
 8000d76:	4b15      	ldr	r3, [pc, #84]	@ (8000dcc <_sbrk+0x60>)
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d80:	4b13      	ldr	r3, [pc, #76]	@ (8000dd0 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d102      	bne.n	8000d8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d88:	4b11      	ldr	r3, [pc, #68]	@ (8000dd0 <_sbrk+0x64>)
 8000d8a:	4a12      	ldr	r2, [pc, #72]	@ (8000dd4 <_sbrk+0x68>)
 8000d8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d8e:	4b10      	ldr	r3, [pc, #64]	@ (8000dd0 <_sbrk+0x64>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d207      	bcs.n	8000dac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d9c:	f003 f940 	bl	8004020 <__errno>
 8000da0:	4603      	mov	r3, r0
 8000da2:	220c      	movs	r2, #12
 8000da4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295
 8000daa:	e009      	b.n	8000dc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dac:	4b08      	ldr	r3, [pc, #32]	@ (8000dd0 <_sbrk+0x64>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000db2:	4b07      	ldr	r3, [pc, #28]	@ (8000dd0 <_sbrk+0x64>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	4a05      	ldr	r2, [pc, #20]	@ (8000dd0 <_sbrk+0x64>)
 8000dbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3718      	adds	r7, #24
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20020000 	.word	0x20020000
 8000dcc:	00000400 	.word	0x00000400
 8000dd0:	20002808 	.word	0x20002808
 8000dd4:	20002a00 	.word	0x20002a00

08000dd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ddc:	4b06      	ldr	r3, [pc, #24]	@ (8000df8 <SystemInit+0x20>)
 8000dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000de2:	4a05      	ldr	r2, [pc, #20]	@ (8000df8 <SystemInit+0x20>)
 8000de4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000de8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	@ 0x28
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e02:	f107 0318 	add.w	r3, r7, #24
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e10:	f107 0310 	add.w	r3, r7, #16
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e26:	4b2c      	ldr	r3, [pc, #176]	@ (8000ed8 <MX_TIM2_Init+0xdc>)
 8000e28:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e2c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed8 <MX_TIM2_Init+0xdc>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e34:	4b28      	ldr	r3, [pc, #160]	@ (8000ed8 <MX_TIM2_Init+0xdc>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000e3a:	4b27      	ldr	r3, [pc, #156]	@ (8000ed8 <MX_TIM2_Init+0xdc>)
 8000e3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e42:	4b25      	ldr	r3, [pc, #148]	@ (8000ed8 <MX_TIM2_Init+0xdc>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e48:	4b23      	ldr	r3, [pc, #140]	@ (8000ed8 <MX_TIM2_Init+0xdc>)
 8000e4a:	2280      	movs	r2, #128	@ 0x80
 8000e4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e4e:	4822      	ldr	r0, [pc, #136]	@ (8000ed8 <MX_TIM2_Init+0xdc>)
 8000e50:	f001 fb66 	bl	8002520 <HAL_TIM_Base_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000e5a:	f7ff fe55 	bl	8000b08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e62:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e64:	f107 0318 	add.w	r3, r7, #24
 8000e68:	4619      	mov	r1, r3
 8000e6a:	481b      	ldr	r0, [pc, #108]	@ (8000ed8 <MX_TIM2_Init+0xdc>)
 8000e6c:	f002 f802 	bl	8002e74 <HAL_TIM_ConfigClockSource>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000e76:	f7ff fe47 	bl	8000b08 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000e7a:	4817      	ldr	r0, [pc, #92]	@ (8000ed8 <MX_TIM2_Init+0xdc>)
 8000e7c:	f001 fc3f 	bl	80026fe <HAL_TIM_IC_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e86:	f7ff fe3f 	bl	8000b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e92:	f107 0310 	add.w	r3, r7, #16
 8000e96:	4619      	mov	r1, r3
 8000e98:	480f      	ldr	r0, [pc, #60]	@ (8000ed8 <MX_TIM2_Init+0xdc>)
 8000e9a:	f002 fb67 	bl	800356c <HAL_TIMEx_MasterConfigSynchronization>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000ea4:	f7ff fe30 	bl	8000b08 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000eac:	2301      	movs	r3, #1
 8000eae:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000eb8:	463b      	mov	r3, r7
 8000eba:	2200      	movs	r2, #0
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4806      	ldr	r0, [pc, #24]	@ (8000ed8 <MX_TIM2_Init+0xdc>)
 8000ec0:	f001 ff3c 	bl	8002d3c <HAL_TIM_IC_ConfigChannel>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000eca:	f7ff fe1d 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	3728      	adds	r7, #40	@ 0x28
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20002824 	.word	0x20002824

08000edc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	@ 0x28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000efc:	d133      	bne.n	8000f66 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	4b1b      	ldr	r3, [pc, #108]	@ (8000f70 <HAL_TIM_Base_MspInit+0x94>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f06:	4a1a      	ldr	r2, [pc, #104]	@ (8000f70 <HAL_TIM_Base_MspInit+0x94>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f0e:	4b18      	ldr	r3, [pc, #96]	@ (8000f70 <HAL_TIM_Base_MspInit+0x94>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	4b14      	ldr	r3, [pc, #80]	@ (8000f70 <HAL_TIM_Base_MspInit+0x94>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	4a13      	ldr	r2, [pc, #76]	@ (8000f70 <HAL_TIM_Base_MspInit+0x94>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2a:	4b11      	ldr	r3, [pc, #68]	@ (8000f70 <HAL_TIM_Base_MspInit+0x94>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f36:	2301      	movs	r3, #1
 8000f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2300      	movs	r3, #0
 8000f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f46:	2301      	movs	r3, #1
 8000f48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4808      	ldr	r0, [pc, #32]	@ (8000f74 <HAL_TIM_Base_MspInit+0x98>)
 8000f52:	f000 fb37 	bl	80015c4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2100      	movs	r1, #0
 8000f5a:	201c      	movs	r0, #28
 8000f5c:	f000 faed 	bl	800153a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f60:	201c      	movs	r0, #28
 8000f62:	f000 fb06 	bl	8001572 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000f66:	bf00      	nop
 8000f68:	3728      	adds	r7, #40	@ 0x28
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40020000 	.word	0x40020000

08000f78 <HAL_TIM_IC_CaptureCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
    if(gu8_State == IDLE)
 8000f80:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff0 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d10b      	bne.n	8000fa2 <HAL_TIM_IC_CaptureCallback+0x2a>
    {
        gu32_T1 = TIM2->CCR1;
 8000f8a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f90:	4a18      	ldr	r2, [pc, #96]	@ (8000ff4 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000f92:	6013      	str	r3, [r2, #0]
        gu16_TIM2_OVC = 0;
 8000f94:	4b18      	ldr	r3, [pc, #96]	@ (8000ff8 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	801a      	strh	r2, [r3, #0]
        gu8_State = DONE;
 8000f9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ff0 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	701a      	strb	r2, [r3, #0]
        gu32_Ticks = (gu32_T2 + (gu16_TIM2_OVC * 65536)) - gu32_T1;
        gu32_Freq = (uint32_t)(F_CLK/gu32_Ticks);
        gu8_State = IDLE;

    }
}
 8000fa0:	e020      	b.n	8000fe4 <HAL_TIM_IC_CaptureCallback+0x6c>
    else if(gu8_State == DONE)
 8000fa2:	4b13      	ldr	r3, [pc, #76]	@ (8000ff0 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d11b      	bne.n	8000fe4 <HAL_TIM_IC_CaptureCallback+0x6c>
        gu32_T2 = TIM2->CCR1;
 8000fac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fb2:	4a12      	ldr	r2, [pc, #72]	@ (8000ffc <HAL_TIM_IC_CaptureCallback+0x84>)
 8000fb4:	6013      	str	r3, [r2, #0]
        gu32_Ticks = (gu32_T2 + (gu16_TIM2_OVC * 65536)) - gu32_T1;
 8000fb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ff8 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000fb8:	881b      	ldrh	r3, [r3, #0]
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	041b      	lsls	r3, r3, #16
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000ffc <HAL_TIM_IC_CaptureCallback+0x84>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	441a      	add	r2, r3
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	4a0c      	ldr	r2, [pc, #48]	@ (8001000 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000fce:	6013      	str	r3, [r2, #0]
        gu32_Freq = (uint32_t)(F_CLK/gu32_Ticks);
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001000 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a0b      	ldr	r2, [pc, #44]	@ (8001004 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fda:	4a0b      	ldr	r2, [pc, #44]	@ (8001008 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000fdc:	6013      	str	r3, [r2, #0]
        gu8_State = IDLE;
 8000fde:	4b04      	ldr	r3, [pc, #16]	@ (8000ff0 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	2000280c 	.word	0x2000280c
 8000ff4:	20002810 	.word	0x20002810
 8000ff8:	2000281c 	.word	0x2000281c
 8000ffc:	20002814 	.word	0x20002814
 8001000:	20002818 	.word	0x20002818
 8001004:	0501bd00 	.word	0x0501bd00
 8001008:	20002820 	.word	0x20002820

0800100c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
    gu16_TIM2_OVC++;
 8001014:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	b29b      	uxth	r3, r3
 800101a:	3301      	adds	r3, #1
 800101c:	b29a      	uxth	r2, r3
 800101e:	4b04      	ldr	r3, [pc, #16]	@ (8001030 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001020:	801a      	strh	r2, [r3, #0]
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	2000281c 	.word	0x2000281c

08001034 <get_frequency>:

uint32_t get_frequency(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
	return gu32_Freq;
 8001038:	4b03      	ldr	r3, [pc, #12]	@ (8001048 <get_frequency+0x14>)
 800103a:	681b      	ldr	r3, [r3, #0]
}
 800103c:	4618      	mov	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20002820 	.word	0x20002820

0800104c <disable_tim_interrupts>:

void disable_tim_interrupts(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim2);
 8001050:	4804      	ldr	r0, [pc, #16]	@ (8001064 <disable_tim_interrupts+0x18>)
 8001052:	f001 fb25 	bl	80026a0 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);
 8001056:	2100      	movs	r1, #0
 8001058:	4802      	ldr	r0, [pc, #8]	@ (8001064 <disable_tim_interrupts+0x18>)
 800105a:	f001 fcd1 	bl	8002a00 <HAL_TIM_IC_Stop_IT>

}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20002824 	.word	0x20002824

08001068 <enable_tim_interrupts>:

void enable_tim_interrupts(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 800106c:	4804      	ldr	r0, [pc, #16]	@ (8001080 <enable_tim_interrupts+0x18>)
 800106e:	f001 faa7 	bl	80025c0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001072:	2100      	movs	r1, #0
 8001074:	4802      	ldr	r0, [pc, #8]	@ (8001080 <enable_tim_interrupts+0x18>)
 8001076:	f001 fb9b 	bl	80027b0 <HAL_TIM_IC_Start_IT>
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20002824 	.word	0x20002824

08001084 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001088:	4b11      	ldr	r3, [pc, #68]	@ (80010d0 <MX_USART2_UART_Init+0x4c>)
 800108a:	4a12      	ldr	r2, [pc, #72]	@ (80010d4 <MX_USART2_UART_Init+0x50>)
 800108c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800108e:	4b10      	ldr	r3, [pc, #64]	@ (80010d0 <MX_USART2_UART_Init+0x4c>)
 8001090:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001094:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001096:	4b0e      	ldr	r3, [pc, #56]	@ (80010d0 <MX_USART2_UART_Init+0x4c>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800109c:	4b0c      	ldr	r3, [pc, #48]	@ (80010d0 <MX_USART2_UART_Init+0x4c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010a2:	4b0b      	ldr	r3, [pc, #44]	@ (80010d0 <MX_USART2_UART_Init+0x4c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010a8:	4b09      	ldr	r3, [pc, #36]	@ (80010d0 <MX_USART2_UART_Init+0x4c>)
 80010aa:	220c      	movs	r2, #12
 80010ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ae:	4b08      	ldr	r3, [pc, #32]	@ (80010d0 <MX_USART2_UART_Init+0x4c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b4:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <MX_USART2_UART_Init+0x4c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ba:	4805      	ldr	r0, [pc, #20]	@ (80010d0 <MX_USART2_UART_Init+0x4c>)
 80010bc:	f002 fae6 	bl	800368c <HAL_UART_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010c6:	f7ff fd1f 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2000286c 	.word	0x2000286c
 80010d4:	40004400 	.word	0x40004400

080010d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	@ 0x28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a19      	ldr	r2, [pc, #100]	@ (800115c <HAL_UART_MspInit+0x84>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d12b      	bne.n	8001152 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	4b18      	ldr	r3, [pc, #96]	@ (8001160 <HAL_UART_MspInit+0x88>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001102:	4a17      	ldr	r2, [pc, #92]	@ (8001160 <HAL_UART_MspInit+0x88>)
 8001104:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001108:	6413      	str	r3, [r2, #64]	@ 0x40
 800110a:	4b15      	ldr	r3, [pc, #84]	@ (8001160 <HAL_UART_MspInit+0x88>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b11      	ldr	r3, [pc, #68]	@ (8001160 <HAL_UART_MspInit+0x88>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	4a10      	ldr	r2, [pc, #64]	@ (8001160 <HAL_UART_MspInit+0x88>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6313      	str	r3, [r2, #48]	@ 0x30
 8001126:	4b0e      	ldr	r3, [pc, #56]	@ (8001160 <HAL_UART_MspInit+0x88>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001132:	230c      	movs	r3, #12
 8001134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001136:	2302      	movs	r3, #2
 8001138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113e:	2303      	movs	r3, #3
 8001140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001142:	2307      	movs	r3, #7
 8001144:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4619      	mov	r1, r3
 800114c:	4805      	ldr	r0, [pc, #20]	@ (8001164 <HAL_UART_MspInit+0x8c>)
 800114e:	f000 fa39 	bl	80015c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001152:	bf00      	nop
 8001154:	3728      	adds	r7, #40	@ 0x28
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40004400 	.word	0x40004400
 8001160:	40023800 	.word	0x40023800
 8001164:	40020000 	.word	0x40020000

08001168 <receive_byte>:
}

/* USER CODE BEGIN 1 */

char receive_byte(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
    char byte_received;
    HAL_StatusTypeDef status;

    status = HAL_UART_Receive(&huart2, (uint8_t*)&byte_received, sizeof(byte_received), 100);
 800116e:	1db9      	adds	r1, r7, #6
 8001170:	2364      	movs	r3, #100	@ 0x64
 8001172:	2201      	movs	r2, #1
 8001174:	4807      	ldr	r0, [pc, #28]	@ (8001194 <receive_byte+0x2c>)
 8001176:	f002 fb64 	bl	8003842 <HAL_UART_Receive>
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]

    if (status == HAL_OK) {
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d101      	bne.n	8001188 <receive_byte+0x20>
        return byte_received;
 8001184:	79bb      	ldrb	r3, [r7, #6]
 8001186:	e000      	b.n	800118a <receive_byte+0x22>
    } else {

        return -1;
 8001188:	23ff      	movs	r3, #255	@ 0xff

    }
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	2000286c 	.word	0x2000286c

08001198 <data_ready>:

void data_ready(uint32_t time_elapsed, uint8_t muestreo, uint32_t buffer_size, char *pMsg)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af02      	add	r7, sp, #8
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	607a      	str	r2, [r7, #4]
 80011a2:	603b      	str	r3, [r7, #0]
 80011a4:	460b      	mov	r3, r1
 80011a6:	72fb      	strb	r3, [r7, #11]
    sprintf(pMsg, "Datos listos. Tiempo transcurrido = %lu ms, Muestreo= %u ms, Data Length = %lu.\r\n",
 80011a8:	7afa      	ldrb	r2, [r7, #11]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	4613      	mov	r3, r2
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	4909      	ldr	r1, [pc, #36]	@ (80011d8 <data_ready+0x40>)
 80011b4:	6838      	ldr	r0, [r7, #0]
 80011b6:	f002 ff0b 	bl	8003fd0 <siprintf>
            time_elapsed, muestreo, buffer_size);

    uint16_t message_length = strlen(pMsg);
 80011ba:	6838      	ldr	r0, [r7, #0]
 80011bc:	f7ff f828 	bl	8000210 <strlen>
 80011c0:	4603      	mov	r3, r0
 80011c2:	82fb      	strh	r3, [r7, #22]

    HAL_UART_Transmit(&huart2, (uint8_t*)pMsg, message_length, 100);
 80011c4:	8afa      	ldrh	r2, [r7, #22]
 80011c6:	2364      	movs	r3, #100	@ 0x64
 80011c8:	6839      	ldr	r1, [r7, #0]
 80011ca:	4804      	ldr	r0, [pc, #16]	@ (80011dc <data_ready+0x44>)
 80011cc:	f002 faae 	bl	800372c <HAL_UART_Transmit>
}
 80011d0:	bf00      	nop
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	0800492c 	.word	0x0800492c
 80011dc:	2000286c 	.word	0x2000286c

080011e0 <send_value>:

void send_value(uint8_t value)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
//    uint8_t data[4];
//    data[0] = (value >> 24) & 0xFF;  // Byte más significativo
//    data[1] = (value >> 16) & 0xFF;
//    data[2] = (value >> 8) & 0xFF;
//    data[3] = value & 0xFF;          // Byte menos significativo
	HAL_UART_Transmit(&huart2, &value, sizeof(value), 100);
 80011ea:	1df9      	adds	r1, r7, #7
 80011ec:	2364      	movs	r3, #100	@ 0x64
 80011ee:	2201      	movs	r2, #1
 80011f0:	4803      	ldr	r0, [pc, #12]	@ (8001200 <send_value+0x20>)
 80011f2:	f002 fa9b 	bl	800372c <HAL_UART_Transmit>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	2000286c 	.word	0x2000286c

08001204 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001204:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800123c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001208:	f7ff fde6 	bl	8000dd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800120c:	480c      	ldr	r0, [pc, #48]	@ (8001240 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800120e:	490d      	ldr	r1, [pc, #52]	@ (8001244 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001210:	4a0d      	ldr	r2, [pc, #52]	@ (8001248 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001214:	e002      	b.n	800121c <LoopCopyDataInit>

08001216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121a:	3304      	adds	r3, #4

0800121c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800121c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001220:	d3f9      	bcc.n	8001216 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001222:	4a0a      	ldr	r2, [pc, #40]	@ (800124c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001224:	4c0a      	ldr	r4, [pc, #40]	@ (8001250 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001228:	e001      	b.n	800122e <LoopFillZerobss>

0800122a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800122c:	3204      	adds	r2, #4

0800122e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001230:	d3fb      	bcc.n	800122a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001232:	f002 fefb 	bl	800402c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001236:	f7ff fbdb 	bl	80009f0 <main>
  bx  lr    
 800123a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800123c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001244:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001248:	080049dc 	.word	0x080049dc
  ldr r2, =_sbss
 800124c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001250:	20002a00 	.word	0x20002a00

08001254 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001254:	e7fe      	b.n	8001254 <ADC_IRQHandler>
	...

08001258 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800125c:	4b0e      	ldr	r3, [pc, #56]	@ (8001298 <HAL_Init+0x40>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a0d      	ldr	r2, [pc, #52]	@ (8001298 <HAL_Init+0x40>)
 8001262:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001266:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001268:	4b0b      	ldr	r3, [pc, #44]	@ (8001298 <HAL_Init+0x40>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a0a      	ldr	r2, [pc, #40]	@ (8001298 <HAL_Init+0x40>)
 800126e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001272:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001274:	4b08      	ldr	r3, [pc, #32]	@ (8001298 <HAL_Init+0x40>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a07      	ldr	r2, [pc, #28]	@ (8001298 <HAL_Init+0x40>)
 800127a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800127e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001280:	2003      	movs	r0, #3
 8001282:	f000 f94f 	bl	8001524 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001286:	2000      	movs	r0, #0
 8001288:	f000 f808 	bl	800129c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800128c:	f7ff fd04 	bl	8000c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40023c00 	.word	0x40023c00

0800129c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a4:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <HAL_InitTick+0x54>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4b12      	ldr	r3, [pc, #72]	@ (80012f4 <HAL_InitTick+0x58>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	4619      	mov	r1, r3
 80012ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 f975 	bl	80015aa <HAL_SYSTICK_Config>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e00e      	b.n	80012e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b0f      	cmp	r3, #15
 80012ce:	d80a      	bhi.n	80012e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d0:	2200      	movs	r2, #0
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	f04f 30ff 	mov.w	r0, #4294967295
 80012d8:	f000 f92f 	bl	800153a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012dc:	4a06      	ldr	r2, [pc, #24]	@ (80012f8 <HAL_InitTick+0x5c>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
 80012e4:	e000      	b.n	80012e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000000 	.word	0x20000000
 80012f4:	20000008 	.word	0x20000008
 80012f8:	20000004 	.word	0x20000004

080012fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001300:	4b06      	ldr	r3, [pc, #24]	@ (800131c <HAL_IncTick+0x20>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <HAL_IncTick+0x24>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4413      	add	r3, r2
 800130c:	4a04      	ldr	r2, [pc, #16]	@ (8001320 <HAL_IncTick+0x24>)
 800130e:	6013      	str	r3, [r2, #0]
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20000008 	.word	0x20000008
 8001320:	200028b4 	.word	0x200028b4

08001324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return uwTick;
 8001328:	4b03      	ldr	r3, [pc, #12]	@ (8001338 <HAL_GetTick+0x14>)
 800132a:	681b      	ldr	r3, [r3, #0]
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	200028b4 	.word	0x200028b4

0800133c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800134c:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <__NVIC_SetPriorityGrouping+0x44>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001358:	4013      	ands	r3, r2
 800135a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001364:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001368:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800136c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800136e:	4a04      	ldr	r2, [pc, #16]	@ (8001380 <__NVIC_SetPriorityGrouping+0x44>)
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	60d3      	str	r3, [r2, #12]
}
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001388:	4b04      	ldr	r3, [pc, #16]	@ (800139c <__NVIC_GetPriorityGrouping+0x18>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	0a1b      	lsrs	r3, r3, #8
 800138e:	f003 0307 	and.w	r3, r3, #7
}
 8001392:	4618      	mov	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	db0b      	blt.n	80013ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	f003 021f 	and.w	r2, r3, #31
 80013b8:	4907      	ldr	r1, [pc, #28]	@ (80013d8 <__NVIC_EnableIRQ+0x38>)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	095b      	lsrs	r3, r3, #5
 80013c0:	2001      	movs	r0, #1
 80013c2:	fa00 f202 	lsl.w	r2, r0, r2
 80013c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000e100 	.word	0xe000e100

080013dc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	db12      	blt.n	8001414 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	f003 021f 	and.w	r2, r3, #31
 80013f4:	490a      	ldr	r1, [pc, #40]	@ (8001420 <__NVIC_DisableIRQ+0x44>)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	095b      	lsrs	r3, r3, #5
 80013fc:	2001      	movs	r0, #1
 80013fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001402:	3320      	adds	r3, #32
 8001404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001408:	f3bf 8f4f 	dsb	sy
}
 800140c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800140e:	f3bf 8f6f 	isb	sy
}
 8001412:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000e100 	.word	0xe000e100

08001424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	6039      	str	r1, [r7, #0]
 800142e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001434:	2b00      	cmp	r3, #0
 8001436:	db0a      	blt.n	800144e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	b2da      	uxtb	r2, r3
 800143c:	490c      	ldr	r1, [pc, #48]	@ (8001470 <__NVIC_SetPriority+0x4c>)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	0112      	lsls	r2, r2, #4
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	440b      	add	r3, r1
 8001448:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800144c:	e00a      	b.n	8001464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4908      	ldr	r1, [pc, #32]	@ (8001474 <__NVIC_SetPriority+0x50>)
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	3b04      	subs	r3, #4
 800145c:	0112      	lsls	r2, r2, #4
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	440b      	add	r3, r1
 8001462:	761a      	strb	r2, [r3, #24]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000e100 	.word	0xe000e100
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001478:	b480      	push	{r7}
 800147a:	b089      	sub	sp, #36	@ 0x24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f1c3 0307 	rsb	r3, r3, #7
 8001492:	2b04      	cmp	r3, #4
 8001494:	bf28      	it	cs
 8001496:	2304      	movcs	r3, #4
 8001498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3304      	adds	r3, #4
 800149e:	2b06      	cmp	r3, #6
 80014a0:	d902      	bls.n	80014a8 <NVIC_EncodePriority+0x30>
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3b03      	subs	r3, #3
 80014a6:	e000      	b.n	80014aa <NVIC_EncodePriority+0x32>
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	f04f 32ff 	mov.w	r2, #4294967295
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43da      	mvns	r2, r3
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	401a      	ands	r2, r3
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c0:	f04f 31ff 	mov.w	r1, #4294967295
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ca:	43d9      	mvns	r1, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	4313      	orrs	r3, r2
         );
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3724      	adds	r7, #36	@ 0x24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014f0:	d301      	bcc.n	80014f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014f2:	2301      	movs	r3, #1
 80014f4:	e00f      	b.n	8001516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001520 <SysTick_Config+0x40>)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014fe:	210f      	movs	r1, #15
 8001500:	f04f 30ff 	mov.w	r0, #4294967295
 8001504:	f7ff ff8e 	bl	8001424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001508:	4b05      	ldr	r3, [pc, #20]	@ (8001520 <SysTick_Config+0x40>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800150e:	4b04      	ldr	r3, [pc, #16]	@ (8001520 <SysTick_Config+0x40>)
 8001510:	2207      	movs	r2, #7
 8001512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	e000e010 	.word	0xe000e010

08001524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ff05 	bl	800133c <__NVIC_SetPriorityGrouping>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800153a:	b580      	push	{r7, lr}
 800153c:	b086      	sub	sp, #24
 800153e:	af00      	add	r7, sp, #0
 8001540:	4603      	mov	r3, r0
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	607a      	str	r2, [r7, #4]
 8001546:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800154c:	f7ff ff1a 	bl	8001384 <__NVIC_GetPriorityGrouping>
 8001550:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	68b9      	ldr	r1, [r7, #8]
 8001556:	6978      	ldr	r0, [r7, #20]
 8001558:	f7ff ff8e 	bl	8001478 <NVIC_EncodePriority>
 800155c:	4602      	mov	r2, r0
 800155e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001562:	4611      	mov	r1, r2
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff5d 	bl	8001424 <__NVIC_SetPriority>
}
 800156a:	bf00      	nop
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	4603      	mov	r3, r0
 800157a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800157c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ff0d 	bl	80013a0 <__NVIC_EnableIRQ>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	4603      	mov	r3, r0
 8001596:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ff1d 	bl	80013dc <__NVIC_DisableIRQ>
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff ff94 	bl	80014e0 <SysTick_Config>
 80015b8:	4603      	mov	r3, r0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b089      	sub	sp, #36	@ 0x24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
 80015de:	e165      	b.n	80018ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015e0:	2201      	movs	r2, #1
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	f040 8154 	bne.w	80018a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f003 0303 	and.w	r3, r3, #3
 8001606:	2b01      	cmp	r3, #1
 8001608:	d005      	beq.n	8001616 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001612:	2b02      	cmp	r3, #2
 8001614:	d130      	bne.n	8001678 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	2203      	movs	r2, #3
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43db      	mvns	r3, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4013      	ands	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	68da      	ldr	r2, [r3, #12]
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4313      	orrs	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800164c:	2201      	movs	r2, #1
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	091b      	lsrs	r3, r3, #4
 8001662:	f003 0201 	and.w	r2, r3, #1
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 0303 	and.w	r3, r3, #3
 8001680:	2b03      	cmp	r3, #3
 8001682:	d017      	beq.n	80016b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	2203      	movs	r2, #3
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	43db      	mvns	r3, r3
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4013      	ands	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 0303 	and.w	r3, r3, #3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d123      	bne.n	8001708 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	08da      	lsrs	r2, r3, #3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3208      	adds	r2, #8
 80016c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	220f      	movs	r2, #15
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	691a      	ldr	r2, [r3, #16]
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	08da      	lsrs	r2, r3, #3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	3208      	adds	r2, #8
 8001702:	69b9      	ldr	r1, [r7, #24]
 8001704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	2203      	movs	r2, #3
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 0203 	and.w	r2, r3, #3
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4313      	orrs	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 80ae 	beq.w	80018a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	4b5d      	ldr	r3, [pc, #372]	@ (80018c4 <HAL_GPIO_Init+0x300>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001752:	4a5c      	ldr	r2, [pc, #368]	@ (80018c4 <HAL_GPIO_Init+0x300>)
 8001754:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001758:	6453      	str	r3, [r2, #68]	@ 0x44
 800175a:	4b5a      	ldr	r3, [pc, #360]	@ (80018c4 <HAL_GPIO_Init+0x300>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800175e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001766:	4a58      	ldr	r2, [pc, #352]	@ (80018c8 <HAL_GPIO_Init+0x304>)
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	089b      	lsrs	r3, r3, #2
 800176c:	3302      	adds	r3, #2
 800176e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	220f      	movs	r2, #15
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4013      	ands	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a4f      	ldr	r2, [pc, #316]	@ (80018cc <HAL_GPIO_Init+0x308>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d025      	beq.n	80017de <HAL_GPIO_Init+0x21a>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a4e      	ldr	r2, [pc, #312]	@ (80018d0 <HAL_GPIO_Init+0x30c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d01f      	beq.n	80017da <HAL_GPIO_Init+0x216>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a4d      	ldr	r2, [pc, #308]	@ (80018d4 <HAL_GPIO_Init+0x310>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d019      	beq.n	80017d6 <HAL_GPIO_Init+0x212>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a4c      	ldr	r2, [pc, #304]	@ (80018d8 <HAL_GPIO_Init+0x314>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d013      	beq.n	80017d2 <HAL_GPIO_Init+0x20e>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a4b      	ldr	r2, [pc, #300]	@ (80018dc <HAL_GPIO_Init+0x318>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d00d      	beq.n	80017ce <HAL_GPIO_Init+0x20a>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a4a      	ldr	r2, [pc, #296]	@ (80018e0 <HAL_GPIO_Init+0x31c>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d007      	beq.n	80017ca <HAL_GPIO_Init+0x206>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a49      	ldr	r2, [pc, #292]	@ (80018e4 <HAL_GPIO_Init+0x320>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d101      	bne.n	80017c6 <HAL_GPIO_Init+0x202>
 80017c2:	2306      	movs	r3, #6
 80017c4:	e00c      	b.n	80017e0 <HAL_GPIO_Init+0x21c>
 80017c6:	2307      	movs	r3, #7
 80017c8:	e00a      	b.n	80017e0 <HAL_GPIO_Init+0x21c>
 80017ca:	2305      	movs	r3, #5
 80017cc:	e008      	b.n	80017e0 <HAL_GPIO_Init+0x21c>
 80017ce:	2304      	movs	r3, #4
 80017d0:	e006      	b.n	80017e0 <HAL_GPIO_Init+0x21c>
 80017d2:	2303      	movs	r3, #3
 80017d4:	e004      	b.n	80017e0 <HAL_GPIO_Init+0x21c>
 80017d6:	2302      	movs	r3, #2
 80017d8:	e002      	b.n	80017e0 <HAL_GPIO_Init+0x21c>
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <HAL_GPIO_Init+0x21c>
 80017de:	2300      	movs	r3, #0
 80017e0:	69fa      	ldr	r2, [r7, #28]
 80017e2:	f002 0203 	and.w	r2, r2, #3
 80017e6:	0092      	lsls	r2, r2, #2
 80017e8:	4093      	lsls	r3, r2
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017f0:	4935      	ldr	r1, [pc, #212]	@ (80018c8 <HAL_GPIO_Init+0x304>)
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	089b      	lsrs	r3, r3, #2
 80017f6:	3302      	adds	r3, #2
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017fe:	4b3a      	ldr	r3, [pc, #232]	@ (80018e8 <HAL_GPIO_Init+0x324>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	43db      	mvns	r3, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4013      	ands	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001822:	4a31      	ldr	r2, [pc, #196]	@ (80018e8 <HAL_GPIO_Init+0x324>)
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001828:	4b2f      	ldr	r3, [pc, #188]	@ (80018e8 <HAL_GPIO_Init+0x324>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	43db      	mvns	r3, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	4313      	orrs	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800184c:	4a26      	ldr	r2, [pc, #152]	@ (80018e8 <HAL_GPIO_Init+0x324>)
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001852:	4b25      	ldr	r3, [pc, #148]	@ (80018e8 <HAL_GPIO_Init+0x324>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	43db      	mvns	r3, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4013      	ands	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001876:	4a1c      	ldr	r2, [pc, #112]	@ (80018e8 <HAL_GPIO_Init+0x324>)
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800187c:	4b1a      	ldr	r3, [pc, #104]	@ (80018e8 <HAL_GPIO_Init+0x324>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	4313      	orrs	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018a0:	4a11      	ldr	r2, [pc, #68]	@ (80018e8 <HAL_GPIO_Init+0x324>)
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3301      	adds	r3, #1
 80018aa:	61fb      	str	r3, [r7, #28]
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	2b0f      	cmp	r3, #15
 80018b0:	f67f ae96 	bls.w	80015e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018b4:	bf00      	nop
 80018b6:	bf00      	nop
 80018b8:	3724      	adds	r7, #36	@ 0x24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40013800 	.word	0x40013800
 80018cc:	40020000 	.word	0x40020000
 80018d0:	40020400 	.word	0x40020400
 80018d4:	40020800 	.word	0x40020800
 80018d8:	40020c00 	.word	0x40020c00
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40021400 	.word	0x40021400
 80018e4:	40021800 	.word	0x40021800
 80018e8:	40013c00 	.word	0x40013c00

080018ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	460b      	mov	r3, r1
 80018f6:	807b      	strh	r3, [r7, #2]
 80018f8:	4613      	mov	r3, r2
 80018fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018fc:	787b      	ldrb	r3, [r7, #1]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001902:	887a      	ldrh	r2, [r7, #2]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001908:	e003      	b.n	8001912 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800190a:	887b      	ldrh	r3, [r7, #2]
 800190c:	041a      	lsls	r2, r3, #16
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	619a      	str	r2, [r3, #24]
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800192a:	4b08      	ldr	r3, [pc, #32]	@ (800194c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800192c:	695a      	ldr	r2, [r3, #20]
 800192e:	88fb      	ldrh	r3, [r7, #6]
 8001930:	4013      	ands	r3, r2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d006      	beq.n	8001944 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001936:	4a05      	ldr	r2, [pc, #20]	@ (800194c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800193c:	88fb      	ldrh	r3, [r7, #6]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff f83c 	bl	80009bc <HAL_GPIO_EXTI_Callback>
  }
}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40013c00 	.word	0x40013c00

08001950 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e0cc      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001964:	4b68      	ldr	r3, [pc, #416]	@ (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 030f 	and.w	r3, r3, #15
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d90c      	bls.n	800198c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001972:	4b65      	ldr	r3, [pc, #404]	@ (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800197a:	4b63      	ldr	r3, [pc, #396]	@ (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	d001      	beq.n	800198c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e0b8      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d020      	beq.n	80019da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d005      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019a4:	4b59      	ldr	r3, [pc, #356]	@ (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	4a58      	ldr	r2, [pc, #352]	@ (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80019ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0308 	and.w	r3, r3, #8
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d005      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019bc:	4b53      	ldr	r3, [pc, #332]	@ (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	4a52      	ldr	r2, [pc, #328]	@ (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80019c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c8:	4b50      	ldr	r3, [pc, #320]	@ (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	494d      	ldr	r1, [pc, #308]	@ (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d044      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d107      	bne.n	80019fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ee:	4b47      	ldr	r3, [pc, #284]	@ (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d119      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e07f      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d003      	beq.n	8001a0e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	d107      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a0e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d109      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e06f      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e067      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a2e:	4b37      	ldr	r3, [pc, #220]	@ (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f023 0203 	bic.w	r2, r3, #3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	4934      	ldr	r1, [pc, #208]	@ (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a40:	f7ff fc70 	bl	8001324 <HAL_GetTick>
 8001a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a46:	e00a      	b.n	8001a5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a48:	f7ff fc6c 	bl	8001324 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e04f      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5e:	4b2b      	ldr	r3, [pc, #172]	@ (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 020c 	and.w	r2, r3, #12
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d1eb      	bne.n	8001a48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a70:	4b25      	ldr	r3, [pc, #148]	@ (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 030f 	and.w	r3, r3, #15
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d20c      	bcs.n	8001a98 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7e:	4b22      	ldr	r3, [pc, #136]	@ (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a86:	4b20      	ldr	r3, [pc, #128]	@ (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 030f 	and.w	r3, r3, #15
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d001      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e032      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d008      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa4:	4b19      	ldr	r3, [pc, #100]	@ (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	4916      	ldr	r1, [pc, #88]	@ (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d009      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ac2:	4b12      	ldr	r3, [pc, #72]	@ (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	490e      	ldr	r1, [pc, #56]	@ (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ad6:	f000 f855 	bl	8001b84 <HAL_RCC_GetSysClockFreq>
 8001ada:	4602      	mov	r2, r0
 8001adc:	4b0b      	ldr	r3, [pc, #44]	@ (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	091b      	lsrs	r3, r3, #4
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	490a      	ldr	r1, [pc, #40]	@ (8001b10 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae8:	5ccb      	ldrb	r3, [r1, r3]
 8001aea:	fa22 f303 	lsr.w	r3, r2, r3
 8001aee:	4a09      	ldr	r2, [pc, #36]	@ (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 8001af0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001af2:	4b09      	ldr	r3, [pc, #36]	@ (8001b18 <HAL_RCC_ClockConfig+0x1c8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fbd0 	bl	800129c <HAL_InitTick>

  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40023c00 	.word	0x40023c00
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	08004980 	.word	0x08004980
 8001b14:	20000000 	.word	0x20000000
 8001b18:	20000004 	.word	0x20000004

08001b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b20:	4b03      	ldr	r3, [pc, #12]	@ (8001b30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b22:	681b      	ldr	r3, [r3, #0]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000000 	.word	0x20000000

08001b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b38:	f7ff fff0 	bl	8001b1c <HAL_RCC_GetHCLKFreq>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	4b05      	ldr	r3, [pc, #20]	@ (8001b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	0a9b      	lsrs	r3, r3, #10
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	4903      	ldr	r1, [pc, #12]	@ (8001b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b4a:	5ccb      	ldrb	r3, [r1, r3]
 8001b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40023800 	.word	0x40023800
 8001b58:	08004990 	.word	0x08004990

08001b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b60:	f7ff ffdc 	bl	8001b1c <HAL_RCC_GetHCLKFreq>
 8001b64:	4602      	mov	r2, r0
 8001b66:	4b05      	ldr	r3, [pc, #20]	@ (8001b7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	0b5b      	lsrs	r3, r3, #13
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	4903      	ldr	r1, [pc, #12]	@ (8001b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b72:	5ccb      	ldrb	r3, [r1, r3]
 8001b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	08004990 	.word	0x08004990

08001b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b88:	b0ae      	sub	sp, #184	@ 0xb8
 8001b8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001baa:	4bcb      	ldr	r3, [pc, #812]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 030c 	and.w	r3, r3, #12
 8001bb2:	2b0c      	cmp	r3, #12
 8001bb4:	f200 8206 	bhi.w	8001fc4 <HAL_RCC_GetSysClockFreq+0x440>
 8001bb8:	a201      	add	r2, pc, #4	@ (adr r2, 8001bc0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bbe:	bf00      	nop
 8001bc0:	08001bf5 	.word	0x08001bf5
 8001bc4:	08001fc5 	.word	0x08001fc5
 8001bc8:	08001fc5 	.word	0x08001fc5
 8001bcc:	08001fc5 	.word	0x08001fc5
 8001bd0:	08001bfd 	.word	0x08001bfd
 8001bd4:	08001fc5 	.word	0x08001fc5
 8001bd8:	08001fc5 	.word	0x08001fc5
 8001bdc:	08001fc5 	.word	0x08001fc5
 8001be0:	08001c05 	.word	0x08001c05
 8001be4:	08001fc5 	.word	0x08001fc5
 8001be8:	08001fc5 	.word	0x08001fc5
 8001bec:	08001fc5 	.word	0x08001fc5
 8001bf0:	08001df5 	.word	0x08001df5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bf4:	4bb9      	ldr	r3, [pc, #740]	@ (8001edc <HAL_RCC_GetSysClockFreq+0x358>)
 8001bf6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001bfa:	e1e7      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bfc:	4bb8      	ldr	r3, [pc, #736]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001bfe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001c02:	e1e3      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c04:	4bb4      	ldr	r3, [pc, #720]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c10:	4bb1      	ldr	r3, [pc, #708]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d071      	beq.n	8001d00 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c1c:	4bae      	ldr	r3, [pc, #696]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	099b      	lsrs	r3, r3, #6
 8001c22:	2200      	movs	r2, #0
 8001c24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001c28:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001c2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001c3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001c42:	4622      	mov	r2, r4
 8001c44:	462b      	mov	r3, r5
 8001c46:	f04f 0000 	mov.w	r0, #0
 8001c4a:	f04f 0100 	mov.w	r1, #0
 8001c4e:	0159      	lsls	r1, r3, #5
 8001c50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c54:	0150      	lsls	r0, r2, #5
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4621      	mov	r1, r4
 8001c5c:	1a51      	subs	r1, r2, r1
 8001c5e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001c60:	4629      	mov	r1, r5
 8001c62:	eb63 0301 	sbc.w	r3, r3, r1
 8001c66:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001c74:	4649      	mov	r1, r9
 8001c76:	018b      	lsls	r3, r1, #6
 8001c78:	4641      	mov	r1, r8
 8001c7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c7e:	4641      	mov	r1, r8
 8001c80:	018a      	lsls	r2, r1, #6
 8001c82:	4641      	mov	r1, r8
 8001c84:	1a51      	subs	r1, r2, r1
 8001c86:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001c88:	4649      	mov	r1, r9
 8001c8a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001c9c:	4649      	mov	r1, r9
 8001c9e:	00cb      	lsls	r3, r1, #3
 8001ca0:	4641      	mov	r1, r8
 8001ca2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ca6:	4641      	mov	r1, r8
 8001ca8:	00ca      	lsls	r2, r1, #3
 8001caa:	4610      	mov	r0, r2
 8001cac:	4619      	mov	r1, r3
 8001cae:	4603      	mov	r3, r0
 8001cb0:	4622      	mov	r2, r4
 8001cb2:	189b      	adds	r3, r3, r2
 8001cb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001cb6:	462b      	mov	r3, r5
 8001cb8:	460a      	mov	r2, r1
 8001cba:	eb42 0303 	adc.w	r3, r2, r3
 8001cbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001ccc:	4629      	mov	r1, r5
 8001cce:	024b      	lsls	r3, r1, #9
 8001cd0:	4621      	mov	r1, r4
 8001cd2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cd6:	4621      	mov	r1, r4
 8001cd8:	024a      	lsls	r2, r1, #9
 8001cda:	4610      	mov	r0, r2
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001ce8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001cec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001cf0:	f7fe fae6 	bl	80002c0 <__aeabi_uldivmod>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001cfe:	e067      	b.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d00:	4b75      	ldr	r3, [pc, #468]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	099b      	lsrs	r3, r3, #6
 8001d06:	2200      	movs	r2, #0
 8001d08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001d0c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001d10:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001d14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001d1e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001d22:	4622      	mov	r2, r4
 8001d24:	462b      	mov	r3, r5
 8001d26:	f04f 0000 	mov.w	r0, #0
 8001d2a:	f04f 0100 	mov.w	r1, #0
 8001d2e:	0159      	lsls	r1, r3, #5
 8001d30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d34:	0150      	lsls	r0, r2, #5
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	4621      	mov	r1, r4
 8001d3c:	1a51      	subs	r1, r2, r1
 8001d3e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001d40:	4629      	mov	r1, r5
 8001d42:	eb63 0301 	sbc.w	r3, r3, r1
 8001d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d48:	f04f 0200 	mov.w	r2, #0
 8001d4c:	f04f 0300 	mov.w	r3, #0
 8001d50:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001d54:	4649      	mov	r1, r9
 8001d56:	018b      	lsls	r3, r1, #6
 8001d58:	4641      	mov	r1, r8
 8001d5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d5e:	4641      	mov	r1, r8
 8001d60:	018a      	lsls	r2, r1, #6
 8001d62:	4641      	mov	r1, r8
 8001d64:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d68:	4649      	mov	r1, r9
 8001d6a:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	f04f 0300 	mov.w	r3, #0
 8001d76:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d7a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d82:	4692      	mov	sl, r2
 8001d84:	469b      	mov	fp, r3
 8001d86:	4623      	mov	r3, r4
 8001d88:	eb1a 0303 	adds.w	r3, sl, r3
 8001d8c:	623b      	str	r3, [r7, #32]
 8001d8e:	462b      	mov	r3, r5
 8001d90:	eb4b 0303 	adc.w	r3, fp, r3
 8001d94:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	f04f 0300 	mov.w	r3, #0
 8001d9e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001da2:	4629      	mov	r1, r5
 8001da4:	028b      	lsls	r3, r1, #10
 8001da6:	4621      	mov	r1, r4
 8001da8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001dac:	4621      	mov	r1, r4
 8001dae:	028a      	lsls	r2, r1, #10
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001db8:	2200      	movs	r2, #0
 8001dba:	673b      	str	r3, [r7, #112]	@ 0x70
 8001dbc:	677a      	str	r2, [r7, #116]	@ 0x74
 8001dbe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001dc2:	f7fe fa7d 	bl	80002c0 <__aeabi_uldivmod>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4613      	mov	r3, r2
 8001dcc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001dd0:	4b41      	ldr	r3, [pc, #260]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	0c1b      	lsrs	r3, r3, #16
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	3301      	adds	r3, #1
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001de2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001de6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001df2:	e0eb      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001df4:	4b38      	ldr	r3, [pc, #224]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001dfc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e00:	4b35      	ldr	r3, [pc, #212]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d06b      	beq.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e0c:	4b32      	ldr	r3, [pc, #200]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	099b      	lsrs	r3, r3, #6
 8001e12:	2200      	movs	r2, #0
 8001e14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001e16:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001e18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e1e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e20:	2300      	movs	r3, #0
 8001e22:	667b      	str	r3, [r7, #100]	@ 0x64
 8001e24:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001e28:	4622      	mov	r2, r4
 8001e2a:	462b      	mov	r3, r5
 8001e2c:	f04f 0000 	mov.w	r0, #0
 8001e30:	f04f 0100 	mov.w	r1, #0
 8001e34:	0159      	lsls	r1, r3, #5
 8001e36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e3a:	0150      	lsls	r0, r2, #5
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4621      	mov	r1, r4
 8001e42:	1a51      	subs	r1, r2, r1
 8001e44:	61b9      	str	r1, [r7, #24]
 8001e46:	4629      	mov	r1, r5
 8001e48:	eb63 0301 	sbc.w	r3, r3, r1
 8001e4c:	61fb      	str	r3, [r7, #28]
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	f04f 0300 	mov.w	r3, #0
 8001e56:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001e5a:	4659      	mov	r1, fp
 8001e5c:	018b      	lsls	r3, r1, #6
 8001e5e:	4651      	mov	r1, sl
 8001e60:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e64:	4651      	mov	r1, sl
 8001e66:	018a      	lsls	r2, r1, #6
 8001e68:	4651      	mov	r1, sl
 8001e6a:	ebb2 0801 	subs.w	r8, r2, r1
 8001e6e:	4659      	mov	r1, fp
 8001e70:	eb63 0901 	sbc.w	r9, r3, r1
 8001e74:	f04f 0200 	mov.w	r2, #0
 8001e78:	f04f 0300 	mov.w	r3, #0
 8001e7c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e80:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e84:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e88:	4690      	mov	r8, r2
 8001e8a:	4699      	mov	r9, r3
 8001e8c:	4623      	mov	r3, r4
 8001e8e:	eb18 0303 	adds.w	r3, r8, r3
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	462b      	mov	r3, r5
 8001e96:	eb49 0303 	adc.w	r3, r9, r3
 8001e9a:	617b      	str	r3, [r7, #20]
 8001e9c:	f04f 0200 	mov.w	r2, #0
 8001ea0:	f04f 0300 	mov.w	r3, #0
 8001ea4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001ea8:	4629      	mov	r1, r5
 8001eaa:	024b      	lsls	r3, r1, #9
 8001eac:	4621      	mov	r1, r4
 8001eae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001eb2:	4621      	mov	r1, r4
 8001eb4:	024a      	lsls	r2, r1, #9
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001ec2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001ec4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001ec8:	f7fe f9fa 	bl	80002c0 <__aeabi_uldivmod>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001ed6:	e065      	b.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x420>
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	00f42400 	.word	0x00f42400
 8001ee0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ee4:	4b3d      	ldr	r3, [pc, #244]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0x458>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	099b      	lsrs	r3, r3, #6
 8001eea:	2200      	movs	r2, #0
 8001eec:	4618      	mov	r0, r3
 8001eee:	4611      	mov	r1, r2
 8001ef0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ef4:	653b      	str	r3, [r7, #80]	@ 0x50
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	657b      	str	r3, [r7, #84]	@ 0x54
 8001efa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001efe:	4642      	mov	r2, r8
 8001f00:	464b      	mov	r3, r9
 8001f02:	f04f 0000 	mov.w	r0, #0
 8001f06:	f04f 0100 	mov.w	r1, #0
 8001f0a:	0159      	lsls	r1, r3, #5
 8001f0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f10:	0150      	lsls	r0, r2, #5
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4641      	mov	r1, r8
 8001f18:	1a51      	subs	r1, r2, r1
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	4649      	mov	r1, r9
 8001f1e:	eb63 0301 	sbc.w	r3, r3, r1
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	f04f 0300 	mov.w	r3, #0
 8001f2c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001f30:	4659      	mov	r1, fp
 8001f32:	018b      	lsls	r3, r1, #6
 8001f34:	4651      	mov	r1, sl
 8001f36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f3a:	4651      	mov	r1, sl
 8001f3c:	018a      	lsls	r2, r1, #6
 8001f3e:	4651      	mov	r1, sl
 8001f40:	1a54      	subs	r4, r2, r1
 8001f42:	4659      	mov	r1, fp
 8001f44:	eb63 0501 	sbc.w	r5, r3, r1
 8001f48:	f04f 0200 	mov.w	r2, #0
 8001f4c:	f04f 0300 	mov.w	r3, #0
 8001f50:	00eb      	lsls	r3, r5, #3
 8001f52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f56:	00e2      	lsls	r2, r4, #3
 8001f58:	4614      	mov	r4, r2
 8001f5a:	461d      	mov	r5, r3
 8001f5c:	4643      	mov	r3, r8
 8001f5e:	18e3      	adds	r3, r4, r3
 8001f60:	603b      	str	r3, [r7, #0]
 8001f62:	464b      	mov	r3, r9
 8001f64:	eb45 0303 	adc.w	r3, r5, r3
 8001f68:	607b      	str	r3, [r7, #4]
 8001f6a:	f04f 0200 	mov.w	r2, #0
 8001f6e:	f04f 0300 	mov.w	r3, #0
 8001f72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f76:	4629      	mov	r1, r5
 8001f78:	028b      	lsls	r3, r1, #10
 8001f7a:	4621      	mov	r1, r4
 8001f7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f80:	4621      	mov	r1, r4
 8001f82:	028a      	lsls	r2, r1, #10
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f90:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001f92:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001f96:	f7fe f993 	bl	80002c0 <__aeabi_uldivmod>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001fa4:	4b0d      	ldr	r3, [pc, #52]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0x458>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	0f1b      	lsrs	r3, r3, #28
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001fb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001fb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001fc2:	e003      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001fc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001fca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fcc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	37b8      	adds	r7, #184	@ 0xb8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fda:	bf00      	nop
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	00f42400 	.word	0x00f42400

08001fe4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e28d      	b.n	8002512 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 8083 	beq.w	800210a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002004:	4b94      	ldr	r3, [pc, #592]	@ (8002258 <HAL_RCC_OscConfig+0x274>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 030c 	and.w	r3, r3, #12
 800200c:	2b04      	cmp	r3, #4
 800200e:	d019      	beq.n	8002044 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002010:	4b91      	ldr	r3, [pc, #580]	@ (8002258 <HAL_RCC_OscConfig+0x274>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 030c 	and.w	r3, r3, #12
        || \
 8002018:	2b08      	cmp	r3, #8
 800201a:	d106      	bne.n	800202a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800201c:	4b8e      	ldr	r3, [pc, #568]	@ (8002258 <HAL_RCC_OscConfig+0x274>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002024:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002028:	d00c      	beq.n	8002044 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800202a:	4b8b      	ldr	r3, [pc, #556]	@ (8002258 <HAL_RCC_OscConfig+0x274>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002032:	2b0c      	cmp	r3, #12
 8002034:	d112      	bne.n	800205c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002036:	4b88      	ldr	r3, [pc, #544]	@ (8002258 <HAL_RCC_OscConfig+0x274>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800203e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002042:	d10b      	bne.n	800205c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002044:	4b84      	ldr	r3, [pc, #528]	@ (8002258 <HAL_RCC_OscConfig+0x274>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d05b      	beq.n	8002108 <HAL_RCC_OscConfig+0x124>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d157      	bne.n	8002108 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e25a      	b.n	8002512 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002064:	d106      	bne.n	8002074 <HAL_RCC_OscConfig+0x90>
 8002066:	4b7c      	ldr	r3, [pc, #496]	@ (8002258 <HAL_RCC_OscConfig+0x274>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a7b      	ldr	r2, [pc, #492]	@ (8002258 <HAL_RCC_OscConfig+0x274>)
 800206c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	e01d      	b.n	80020b0 <HAL_RCC_OscConfig+0xcc>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800207c:	d10c      	bne.n	8002098 <HAL_RCC_OscConfig+0xb4>
 800207e:	4b76      	ldr	r3, [pc, #472]	@ (8002258 <HAL_RCC_OscConfig+0x274>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a75      	ldr	r2, [pc, #468]	@ (8002258 <HAL_RCC_OscConfig+0x274>)
 8002084:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	4b73      	ldr	r3, [pc, #460]	@ (8002258 <HAL_RCC_OscConfig+0x274>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a72      	ldr	r2, [pc, #456]	@ (8002258 <HAL_RCC_OscConfig+0x274>)
 8002090:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	e00b      	b.n	80020b0 <HAL_RCC_OscConfig+0xcc>
 8002098:	4b6f      	ldr	r3, [pc, #444]	@ (8002258 <HAL_RCC_OscConfig+0x274>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a6e      	ldr	r2, [pc, #440]	@ (8002258 <HAL_RCC_OscConfig+0x274>)
 800209e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	4b6c      	ldr	r3, [pc, #432]	@ (8002258 <HAL_RCC_OscConfig+0x274>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a6b      	ldr	r2, [pc, #428]	@ (8002258 <HAL_RCC_OscConfig+0x274>)
 80020aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d013      	beq.n	80020e0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7ff f934 	bl	8001324 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020c0:	f7ff f930 	bl	8001324 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b64      	cmp	r3, #100	@ 0x64
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e21f      	b.n	8002512 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d2:	4b61      	ldr	r3, [pc, #388]	@ (8002258 <HAL_RCC_OscConfig+0x274>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0xdc>
 80020de:	e014      	b.n	800210a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e0:	f7ff f920 	bl	8001324 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e8:	f7ff f91c 	bl	8001324 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b64      	cmp	r3, #100	@ 0x64
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e20b      	b.n	8002512 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020fa:	4b57      	ldr	r3, [pc, #348]	@ (8002258 <HAL_RCC_OscConfig+0x274>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0x104>
 8002106:	e000      	b.n	800210a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d06f      	beq.n	80021f6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002116:	4b50      	ldr	r3, [pc, #320]	@ (8002258 <HAL_RCC_OscConfig+0x274>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 030c 	and.w	r3, r3, #12
 800211e:	2b00      	cmp	r3, #0
 8002120:	d017      	beq.n	8002152 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002122:	4b4d      	ldr	r3, [pc, #308]	@ (8002258 <HAL_RCC_OscConfig+0x274>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 030c 	and.w	r3, r3, #12
        || \
 800212a:	2b08      	cmp	r3, #8
 800212c:	d105      	bne.n	800213a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800212e:	4b4a      	ldr	r3, [pc, #296]	@ (8002258 <HAL_RCC_OscConfig+0x274>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00b      	beq.n	8002152 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800213a:	4b47      	ldr	r3, [pc, #284]	@ (8002258 <HAL_RCC_OscConfig+0x274>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002142:	2b0c      	cmp	r3, #12
 8002144:	d11c      	bne.n	8002180 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002146:	4b44      	ldr	r3, [pc, #272]	@ (8002258 <HAL_RCC_OscConfig+0x274>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d116      	bne.n	8002180 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002152:	4b41      	ldr	r3, [pc, #260]	@ (8002258 <HAL_RCC_OscConfig+0x274>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d005      	beq.n	800216a <HAL_RCC_OscConfig+0x186>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d001      	beq.n	800216a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e1d3      	b.n	8002512 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800216a:	4b3b      	ldr	r3, [pc, #236]	@ (8002258 <HAL_RCC_OscConfig+0x274>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	4937      	ldr	r1, [pc, #220]	@ (8002258 <HAL_RCC_OscConfig+0x274>)
 800217a:	4313      	orrs	r3, r2
 800217c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800217e:	e03a      	b.n	80021f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d020      	beq.n	80021ca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002188:	4b34      	ldr	r3, [pc, #208]	@ (800225c <HAL_RCC_OscConfig+0x278>)
 800218a:	2201      	movs	r2, #1
 800218c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218e:	f7ff f8c9 	bl	8001324 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002196:	f7ff f8c5 	bl	8001324 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e1b4      	b.n	8002512 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002258 <HAL_RCC_OscConfig+0x274>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0f0      	beq.n	8002196 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b4:	4b28      	ldr	r3, [pc, #160]	@ (8002258 <HAL_RCC_OscConfig+0x274>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	4925      	ldr	r1, [pc, #148]	@ (8002258 <HAL_RCC_OscConfig+0x274>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	600b      	str	r3, [r1, #0]
 80021c8:	e015      	b.n	80021f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ca:	4b24      	ldr	r3, [pc, #144]	@ (800225c <HAL_RCC_OscConfig+0x278>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d0:	f7ff f8a8 	bl	8001324 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021d8:	f7ff f8a4 	bl	8001324 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e193      	b.n	8002512 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002258 <HAL_RCC_OscConfig+0x274>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f0      	bne.n	80021d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0308 	and.w	r3, r3, #8
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d036      	beq.n	8002270 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d016      	beq.n	8002238 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800220a:	4b15      	ldr	r3, [pc, #84]	@ (8002260 <HAL_RCC_OscConfig+0x27c>)
 800220c:	2201      	movs	r2, #1
 800220e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002210:	f7ff f888 	bl	8001324 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002218:	f7ff f884 	bl	8001324 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e173      	b.n	8002512 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800222a:	4b0b      	ldr	r3, [pc, #44]	@ (8002258 <HAL_RCC_OscConfig+0x274>)
 800222c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0x234>
 8002236:	e01b      	b.n	8002270 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002238:	4b09      	ldr	r3, [pc, #36]	@ (8002260 <HAL_RCC_OscConfig+0x27c>)
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800223e:	f7ff f871 	bl	8001324 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002244:	e00e      	b.n	8002264 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002246:	f7ff f86d 	bl	8001324 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d907      	bls.n	8002264 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e15c      	b.n	8002512 <HAL_RCC_OscConfig+0x52e>
 8002258:	40023800 	.word	0x40023800
 800225c:	42470000 	.word	0x42470000
 8002260:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002264:	4b8a      	ldr	r3, [pc, #552]	@ (8002490 <HAL_RCC_OscConfig+0x4ac>)
 8002266:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1ea      	bne.n	8002246 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 8097 	beq.w	80023ac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800227e:	2300      	movs	r3, #0
 8002280:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002282:	4b83      	ldr	r3, [pc, #524]	@ (8002490 <HAL_RCC_OscConfig+0x4ac>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10f      	bne.n	80022ae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	4b7f      	ldr	r3, [pc, #508]	@ (8002490 <HAL_RCC_OscConfig+0x4ac>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002296:	4a7e      	ldr	r2, [pc, #504]	@ (8002490 <HAL_RCC_OscConfig+0x4ac>)
 8002298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800229c:	6413      	str	r3, [r2, #64]	@ 0x40
 800229e:	4b7c      	ldr	r3, [pc, #496]	@ (8002490 <HAL_RCC_OscConfig+0x4ac>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022a6:	60bb      	str	r3, [r7, #8]
 80022a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022aa:	2301      	movs	r3, #1
 80022ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ae:	4b79      	ldr	r3, [pc, #484]	@ (8002494 <HAL_RCC_OscConfig+0x4b0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d118      	bne.n	80022ec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ba:	4b76      	ldr	r3, [pc, #472]	@ (8002494 <HAL_RCC_OscConfig+0x4b0>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a75      	ldr	r2, [pc, #468]	@ (8002494 <HAL_RCC_OscConfig+0x4b0>)
 80022c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022c6:	f7ff f82d 	bl	8001324 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ce:	f7ff f829 	bl	8001324 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e118      	b.n	8002512 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e0:	4b6c      	ldr	r3, [pc, #432]	@ (8002494 <HAL_RCC_OscConfig+0x4b0>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d106      	bne.n	8002302 <HAL_RCC_OscConfig+0x31e>
 80022f4:	4b66      	ldr	r3, [pc, #408]	@ (8002490 <HAL_RCC_OscConfig+0x4ac>)
 80022f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022f8:	4a65      	ldr	r2, [pc, #404]	@ (8002490 <HAL_RCC_OscConfig+0x4ac>)
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002300:	e01c      	b.n	800233c <HAL_RCC_OscConfig+0x358>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	2b05      	cmp	r3, #5
 8002308:	d10c      	bne.n	8002324 <HAL_RCC_OscConfig+0x340>
 800230a:	4b61      	ldr	r3, [pc, #388]	@ (8002490 <HAL_RCC_OscConfig+0x4ac>)
 800230c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800230e:	4a60      	ldr	r2, [pc, #384]	@ (8002490 <HAL_RCC_OscConfig+0x4ac>)
 8002310:	f043 0304 	orr.w	r3, r3, #4
 8002314:	6713      	str	r3, [r2, #112]	@ 0x70
 8002316:	4b5e      	ldr	r3, [pc, #376]	@ (8002490 <HAL_RCC_OscConfig+0x4ac>)
 8002318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800231a:	4a5d      	ldr	r2, [pc, #372]	@ (8002490 <HAL_RCC_OscConfig+0x4ac>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	6713      	str	r3, [r2, #112]	@ 0x70
 8002322:	e00b      	b.n	800233c <HAL_RCC_OscConfig+0x358>
 8002324:	4b5a      	ldr	r3, [pc, #360]	@ (8002490 <HAL_RCC_OscConfig+0x4ac>)
 8002326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002328:	4a59      	ldr	r2, [pc, #356]	@ (8002490 <HAL_RCC_OscConfig+0x4ac>)
 800232a:	f023 0301 	bic.w	r3, r3, #1
 800232e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002330:	4b57      	ldr	r3, [pc, #348]	@ (8002490 <HAL_RCC_OscConfig+0x4ac>)
 8002332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002334:	4a56      	ldr	r2, [pc, #344]	@ (8002490 <HAL_RCC_OscConfig+0x4ac>)
 8002336:	f023 0304 	bic.w	r3, r3, #4
 800233a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d015      	beq.n	8002370 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002344:	f7fe ffee 	bl	8001324 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800234a:	e00a      	b.n	8002362 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800234c:	f7fe ffea 	bl	8001324 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800235a:	4293      	cmp	r3, r2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e0d7      	b.n	8002512 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002362:	4b4b      	ldr	r3, [pc, #300]	@ (8002490 <HAL_RCC_OscConfig+0x4ac>)
 8002364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0ee      	beq.n	800234c <HAL_RCC_OscConfig+0x368>
 800236e:	e014      	b.n	800239a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002370:	f7fe ffd8 	bl	8001324 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002376:	e00a      	b.n	800238e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002378:	f7fe ffd4 	bl	8001324 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002386:	4293      	cmp	r3, r2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e0c1      	b.n	8002512 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800238e:	4b40      	ldr	r3, [pc, #256]	@ (8002490 <HAL_RCC_OscConfig+0x4ac>)
 8002390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1ee      	bne.n	8002378 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800239a:	7dfb      	ldrb	r3, [r7, #23]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d105      	bne.n	80023ac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a0:	4b3b      	ldr	r3, [pc, #236]	@ (8002490 <HAL_RCC_OscConfig+0x4ac>)
 80023a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a4:	4a3a      	ldr	r2, [pc, #232]	@ (8002490 <HAL_RCC_OscConfig+0x4ac>)
 80023a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 80ad 	beq.w	8002510 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023b6:	4b36      	ldr	r3, [pc, #216]	@ (8002490 <HAL_RCC_OscConfig+0x4ac>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 030c 	and.w	r3, r3, #12
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d060      	beq.n	8002484 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d145      	bne.n	8002456 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ca:	4b33      	ldr	r3, [pc, #204]	@ (8002498 <HAL_RCC_OscConfig+0x4b4>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d0:	f7fe ffa8 	bl	8001324 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d8:	f7fe ffa4 	bl	8001324 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e093      	b.n	8002512 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ea:	4b29      	ldr	r3, [pc, #164]	@ (8002490 <HAL_RCC_OscConfig+0x4ac>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1f0      	bne.n	80023d8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69da      	ldr	r2, [r3, #28]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	431a      	orrs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002404:	019b      	lsls	r3, r3, #6
 8002406:	431a      	orrs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240c:	085b      	lsrs	r3, r3, #1
 800240e:	3b01      	subs	r3, #1
 8002410:	041b      	lsls	r3, r3, #16
 8002412:	431a      	orrs	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002418:	061b      	lsls	r3, r3, #24
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002420:	071b      	lsls	r3, r3, #28
 8002422:	491b      	ldr	r1, [pc, #108]	@ (8002490 <HAL_RCC_OscConfig+0x4ac>)
 8002424:	4313      	orrs	r3, r2
 8002426:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002428:	4b1b      	ldr	r3, [pc, #108]	@ (8002498 <HAL_RCC_OscConfig+0x4b4>)
 800242a:	2201      	movs	r2, #1
 800242c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242e:	f7fe ff79 	bl	8001324 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002436:	f7fe ff75 	bl	8001324 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e064      	b.n	8002512 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002448:	4b11      	ldr	r3, [pc, #68]	@ (8002490 <HAL_RCC_OscConfig+0x4ac>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0f0      	beq.n	8002436 <HAL_RCC_OscConfig+0x452>
 8002454:	e05c      	b.n	8002510 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002456:	4b10      	ldr	r3, [pc, #64]	@ (8002498 <HAL_RCC_OscConfig+0x4b4>)
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245c:	f7fe ff62 	bl	8001324 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002464:	f7fe ff5e 	bl	8001324 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e04d      	b.n	8002512 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002476:	4b06      	ldr	r3, [pc, #24]	@ (8002490 <HAL_RCC_OscConfig+0x4ac>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f0      	bne.n	8002464 <HAL_RCC_OscConfig+0x480>
 8002482:	e045      	b.n	8002510 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d107      	bne.n	800249c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e040      	b.n	8002512 <HAL_RCC_OscConfig+0x52e>
 8002490:	40023800 	.word	0x40023800
 8002494:	40007000 	.word	0x40007000
 8002498:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800249c:	4b1f      	ldr	r3, [pc, #124]	@ (800251c <HAL_RCC_OscConfig+0x538>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d030      	beq.n	800250c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d129      	bne.n	800250c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d122      	bne.n	800250c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80024cc:	4013      	ands	r3, r2
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d119      	bne.n	800250c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e2:	085b      	lsrs	r3, r3, #1
 80024e4:	3b01      	subs	r3, #1
 80024e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d10f      	bne.n	800250c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d107      	bne.n	800250c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002506:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002508:	429a      	cmp	r2, r3
 800250a:	d001      	beq.n	8002510 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e000      	b.n	8002512 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40023800 	.word	0x40023800

08002520 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e041      	b.n	80025b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d106      	bne.n	800254c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7fe fcc8 	bl	8000edc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2202      	movs	r2, #2
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3304      	adds	r3, #4
 800255c:	4619      	mov	r1, r3
 800255e:	4610      	mov	r0, r2
 8002560:	f000 fd6e 	bl	8003040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d001      	beq.n	80025d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e04e      	b.n	8002676 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2202      	movs	r2, #2
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0201 	orr.w	r2, r2, #1
 80025ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a23      	ldr	r2, [pc, #140]	@ (8002684 <HAL_TIM_Base_Start_IT+0xc4>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d022      	beq.n	8002640 <HAL_TIM_Base_Start_IT+0x80>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002602:	d01d      	beq.n	8002640 <HAL_TIM_Base_Start_IT+0x80>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a1f      	ldr	r2, [pc, #124]	@ (8002688 <HAL_TIM_Base_Start_IT+0xc8>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d018      	beq.n	8002640 <HAL_TIM_Base_Start_IT+0x80>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a1e      	ldr	r2, [pc, #120]	@ (800268c <HAL_TIM_Base_Start_IT+0xcc>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d013      	beq.n	8002640 <HAL_TIM_Base_Start_IT+0x80>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a1c      	ldr	r2, [pc, #112]	@ (8002690 <HAL_TIM_Base_Start_IT+0xd0>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d00e      	beq.n	8002640 <HAL_TIM_Base_Start_IT+0x80>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a1b      	ldr	r2, [pc, #108]	@ (8002694 <HAL_TIM_Base_Start_IT+0xd4>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d009      	beq.n	8002640 <HAL_TIM_Base_Start_IT+0x80>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a19      	ldr	r2, [pc, #100]	@ (8002698 <HAL_TIM_Base_Start_IT+0xd8>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d004      	beq.n	8002640 <HAL_TIM_Base_Start_IT+0x80>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a18      	ldr	r2, [pc, #96]	@ (800269c <HAL_TIM_Base_Start_IT+0xdc>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d111      	bne.n	8002664 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2b06      	cmp	r3, #6
 8002650:	d010      	beq.n	8002674 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f042 0201 	orr.w	r2, r2, #1
 8002660:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002662:	e007      	b.n	8002674 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0201 	orr.w	r2, r2, #1
 8002672:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40010000 	.word	0x40010000
 8002688:	40000400 	.word	0x40000400
 800268c:	40000800 	.word	0x40000800
 8002690:	40000c00 	.word	0x40000c00
 8002694:	40010400 	.word	0x40010400
 8002698:	40014000 	.word	0x40014000
 800269c:	40001800 	.word	0x40001800

080026a0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0201 	bic.w	r2, r2, #1
 80026b6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6a1a      	ldr	r2, [r3, #32]
 80026be:	f241 1311 	movw	r3, #4369	@ 0x1111
 80026c2:	4013      	ands	r3, r2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10f      	bne.n	80026e8 <HAL_TIM_Base_Stop_IT+0x48>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6a1a      	ldr	r2, [r3, #32]
 80026ce:	f240 4344 	movw	r3, #1092	@ 0x444
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d107      	bne.n	80026e8 <HAL_TIM_Base_Stop_IT+0x48>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0201 	bic.w	r2, r2, #1
 80026e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b082      	sub	sp, #8
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e041      	b.n	8002794 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b00      	cmp	r3, #0
 800271a:	d106      	bne.n	800272a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f839 	bl	800279c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2202      	movs	r2, #2
 800272e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	3304      	adds	r3, #4
 800273a:	4619      	mov	r1, r3
 800273c:	4610      	mov	r0, r2
 800273e:	f000 fc7f 	bl	8003040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d104      	bne.n	80027ce <HAL_TIM_IC_Start_IT+0x1e>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	e013      	b.n	80027f6 <HAL_TIM_IC_Start_IT+0x46>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	2b04      	cmp	r3, #4
 80027d2:	d104      	bne.n	80027de <HAL_TIM_IC_Start_IT+0x2e>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	e00b      	b.n	80027f6 <HAL_TIM_IC_Start_IT+0x46>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d104      	bne.n	80027ee <HAL_TIM_IC_Start_IT+0x3e>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	e003      	b.n	80027f6 <HAL_TIM_IC_Start_IT+0x46>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d104      	bne.n	8002808 <HAL_TIM_IC_Start_IT+0x58>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002804:	b2db      	uxtb	r3, r3
 8002806:	e013      	b.n	8002830 <HAL_TIM_IC_Start_IT+0x80>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	2b04      	cmp	r3, #4
 800280c:	d104      	bne.n	8002818 <HAL_TIM_IC_Start_IT+0x68>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002814:	b2db      	uxtb	r3, r3
 8002816:	e00b      	b.n	8002830 <HAL_TIM_IC_Start_IT+0x80>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	2b08      	cmp	r3, #8
 800281c:	d104      	bne.n	8002828 <HAL_TIM_IC_Start_IT+0x78>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002824:	b2db      	uxtb	r3, r3
 8002826:	e003      	b.n	8002830 <HAL_TIM_IC_Start_IT+0x80>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800282e:	b2db      	uxtb	r3, r3
 8002830:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002832:	7bbb      	ldrb	r3, [r7, #14]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d102      	bne.n	800283e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002838:	7b7b      	ldrb	r3, [r7, #13]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d001      	beq.n	8002842 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e0cc      	b.n	80029dc <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d104      	bne.n	8002852 <HAL_TIM_IC_Start_IT+0xa2>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002850:	e013      	b.n	800287a <HAL_TIM_IC_Start_IT+0xca>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	2b04      	cmp	r3, #4
 8002856:	d104      	bne.n	8002862 <HAL_TIM_IC_Start_IT+0xb2>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002860:	e00b      	b.n	800287a <HAL_TIM_IC_Start_IT+0xca>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	2b08      	cmp	r3, #8
 8002866:	d104      	bne.n	8002872 <HAL_TIM_IC_Start_IT+0xc2>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002870:	e003      	b.n	800287a <HAL_TIM_IC_Start_IT+0xca>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2202      	movs	r2, #2
 8002876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d104      	bne.n	800288a <HAL_TIM_IC_Start_IT+0xda>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2202      	movs	r2, #2
 8002884:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002888:	e013      	b.n	80028b2 <HAL_TIM_IC_Start_IT+0x102>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	2b04      	cmp	r3, #4
 800288e:	d104      	bne.n	800289a <HAL_TIM_IC_Start_IT+0xea>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2202      	movs	r2, #2
 8002894:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002898:	e00b      	b.n	80028b2 <HAL_TIM_IC_Start_IT+0x102>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	2b08      	cmp	r3, #8
 800289e:	d104      	bne.n	80028aa <HAL_TIM_IC_Start_IT+0xfa>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2202      	movs	r2, #2
 80028a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028a8:	e003      	b.n	80028b2 <HAL_TIM_IC_Start_IT+0x102>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2202      	movs	r2, #2
 80028ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2b0c      	cmp	r3, #12
 80028b6:	d841      	bhi.n	800293c <HAL_TIM_IC_Start_IT+0x18c>
 80028b8:	a201      	add	r2, pc, #4	@ (adr r2, 80028c0 <HAL_TIM_IC_Start_IT+0x110>)
 80028ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028be:	bf00      	nop
 80028c0:	080028f5 	.word	0x080028f5
 80028c4:	0800293d 	.word	0x0800293d
 80028c8:	0800293d 	.word	0x0800293d
 80028cc:	0800293d 	.word	0x0800293d
 80028d0:	08002907 	.word	0x08002907
 80028d4:	0800293d 	.word	0x0800293d
 80028d8:	0800293d 	.word	0x0800293d
 80028dc:	0800293d 	.word	0x0800293d
 80028e0:	08002919 	.word	0x08002919
 80028e4:	0800293d 	.word	0x0800293d
 80028e8:	0800293d 	.word	0x0800293d
 80028ec:	0800293d 	.word	0x0800293d
 80028f0:	0800292b 	.word	0x0800292b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0202 	orr.w	r2, r2, #2
 8002902:	60da      	str	r2, [r3, #12]
      break;
 8002904:	e01d      	b.n	8002942 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f042 0204 	orr.w	r2, r2, #4
 8002914:	60da      	str	r2, [r3, #12]
      break;
 8002916:	e014      	b.n	8002942 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0208 	orr.w	r2, r2, #8
 8002926:	60da      	str	r2, [r3, #12]
      break;
 8002928:	e00b      	b.n	8002942 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f042 0210 	orr.w	r2, r2, #16
 8002938:	60da      	str	r2, [r3, #12]
      break;
 800293a:	e002      	b.n	8002942 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	73fb      	strb	r3, [r7, #15]
      break;
 8002940:	bf00      	nop
  }

  if (status == HAL_OK)
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d148      	bne.n	80029da <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2201      	movs	r2, #1
 800294e:	6839      	ldr	r1, [r7, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f000 fde5 	bl	8003520 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a22      	ldr	r2, [pc, #136]	@ (80029e4 <HAL_TIM_IC_Start_IT+0x234>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d022      	beq.n	80029a6 <HAL_TIM_IC_Start_IT+0x1f6>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002968:	d01d      	beq.n	80029a6 <HAL_TIM_IC_Start_IT+0x1f6>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a1e      	ldr	r2, [pc, #120]	@ (80029e8 <HAL_TIM_IC_Start_IT+0x238>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d018      	beq.n	80029a6 <HAL_TIM_IC_Start_IT+0x1f6>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a1c      	ldr	r2, [pc, #112]	@ (80029ec <HAL_TIM_IC_Start_IT+0x23c>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d013      	beq.n	80029a6 <HAL_TIM_IC_Start_IT+0x1f6>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a1b      	ldr	r2, [pc, #108]	@ (80029f0 <HAL_TIM_IC_Start_IT+0x240>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d00e      	beq.n	80029a6 <HAL_TIM_IC_Start_IT+0x1f6>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a19      	ldr	r2, [pc, #100]	@ (80029f4 <HAL_TIM_IC_Start_IT+0x244>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d009      	beq.n	80029a6 <HAL_TIM_IC_Start_IT+0x1f6>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a18      	ldr	r2, [pc, #96]	@ (80029f8 <HAL_TIM_IC_Start_IT+0x248>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d004      	beq.n	80029a6 <HAL_TIM_IC_Start_IT+0x1f6>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a16      	ldr	r2, [pc, #88]	@ (80029fc <HAL_TIM_IC_Start_IT+0x24c>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d111      	bne.n	80029ca <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2b06      	cmp	r3, #6
 80029b6:	d010      	beq.n	80029da <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0201 	orr.w	r2, r2, #1
 80029c6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c8:	e007      	b.n	80029da <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f042 0201 	orr.w	r2, r2, #1
 80029d8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80029da:	7bfb      	ldrb	r3, [r7, #15]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40010000 	.word	0x40010000
 80029e8:	40000400 	.word	0x40000400
 80029ec:	40000800 	.word	0x40000800
 80029f0:	40000c00 	.word	0x40000c00
 80029f4:	40010400 	.word	0x40010400
 80029f8:	40014000 	.word	0x40014000
 80029fc:	40001800 	.word	0x40001800

08002a00 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2b0c      	cmp	r3, #12
 8002a12:	d841      	bhi.n	8002a98 <HAL_TIM_IC_Stop_IT+0x98>
 8002a14:	a201      	add	r2, pc, #4	@ (adr r2, 8002a1c <HAL_TIM_IC_Stop_IT+0x1c>)
 8002a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1a:	bf00      	nop
 8002a1c:	08002a51 	.word	0x08002a51
 8002a20:	08002a99 	.word	0x08002a99
 8002a24:	08002a99 	.word	0x08002a99
 8002a28:	08002a99 	.word	0x08002a99
 8002a2c:	08002a63 	.word	0x08002a63
 8002a30:	08002a99 	.word	0x08002a99
 8002a34:	08002a99 	.word	0x08002a99
 8002a38:	08002a99 	.word	0x08002a99
 8002a3c:	08002a75 	.word	0x08002a75
 8002a40:	08002a99 	.word	0x08002a99
 8002a44:	08002a99 	.word	0x08002a99
 8002a48:	08002a99 	.word	0x08002a99
 8002a4c:	08002a87 	.word	0x08002a87
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0202 	bic.w	r2, r2, #2
 8002a5e:	60da      	str	r2, [r3, #12]
      break;
 8002a60:	e01d      	b.n	8002a9e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0204 	bic.w	r2, r2, #4
 8002a70:	60da      	str	r2, [r3, #12]
      break;
 8002a72:	e014      	b.n	8002a9e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0208 	bic.w	r2, r2, #8
 8002a82:	60da      	str	r2, [r3, #12]
      break;
 8002a84:	e00b      	b.n	8002a9e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68da      	ldr	r2, [r3, #12]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0210 	bic.w	r2, r2, #16
 8002a94:	60da      	str	r2, [r3, #12]
      break;
 8002a96:	e002      	b.n	8002a9e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a9c:	bf00      	nop
  }

  if (status == HAL_OK)
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d156      	bne.n	8002b52 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	6839      	ldr	r1, [r7, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 fd37 	bl	8003520 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6a1a      	ldr	r2, [r3, #32]
 8002ab8:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002abc:	4013      	ands	r3, r2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10f      	bne.n	8002ae2 <HAL_TIM_IC_Stop_IT+0xe2>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6a1a      	ldr	r2, [r3, #32]
 8002ac8:	f240 4344 	movw	r3, #1092	@ 0x444
 8002acc:	4013      	ands	r3, r2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d107      	bne.n	8002ae2 <HAL_TIM_IC_Stop_IT+0xe2>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 0201 	bic.w	r2, r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d104      	bne.n	8002af2 <HAL_TIM_IC_Stop_IT+0xf2>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002af0:	e013      	b.n	8002b1a <HAL_TIM_IC_Stop_IT+0x11a>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	d104      	bne.n	8002b02 <HAL_TIM_IC_Stop_IT+0x102>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b00:	e00b      	b.n	8002b1a <HAL_TIM_IC_Stop_IT+0x11a>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d104      	bne.n	8002b12 <HAL_TIM_IC_Stop_IT+0x112>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b10:	e003      	b.n	8002b1a <HAL_TIM_IC_Stop_IT+0x11a>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d104      	bne.n	8002b2a <HAL_TIM_IC_Stop_IT+0x12a>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b28:	e013      	b.n	8002b52 <HAL_TIM_IC_Stop_IT+0x152>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	d104      	bne.n	8002b3a <HAL_TIM_IC_Stop_IT+0x13a>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b38:	e00b      	b.n	8002b52 <HAL_TIM_IC_Stop_IT+0x152>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d104      	bne.n	8002b4a <HAL_TIM_IC_Stop_IT+0x14a>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b48:	e003      	b.n	8002b52 <HAL_TIM_IC_Stop_IT+0x152>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d020      	beq.n	8002bc0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d01b      	beq.n	8002bc0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f06f 0202 	mvn.w	r2, #2
 8002b90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7fe f9e6 	bl	8000f78 <HAL_TIM_IC_CaptureCallback>
 8002bac:	e005      	b.n	8002bba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 fa27 	bl	8003002 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 fa2e 	bl	8003016 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	f003 0304 	and.w	r3, r3, #4
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d020      	beq.n	8002c0c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d01b      	beq.n	8002c0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f06f 0204 	mvn.w	r2, #4
 8002bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2202      	movs	r2, #2
 8002be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7fe f9c0 	bl	8000f78 <HAL_TIM_IC_CaptureCallback>
 8002bf8:	e005      	b.n	8002c06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fa01 	bl	8003002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 fa08 	bl	8003016 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d020      	beq.n	8002c58 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d01b      	beq.n	8002c58 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f06f 0208 	mvn.w	r2, #8
 8002c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2204      	movs	r2, #4
 8002c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7fe f99a 	bl	8000f78 <HAL_TIM_IC_CaptureCallback>
 8002c44:	e005      	b.n	8002c52 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f9db 	bl	8003002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 f9e2 	bl	8003016 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f003 0310 	and.w	r3, r3, #16
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d020      	beq.n	8002ca4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f003 0310 	and.w	r3, r3, #16
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d01b      	beq.n	8002ca4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f06f 0210 	mvn.w	r2, #16
 8002c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2208      	movs	r2, #8
 8002c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7fe f974 	bl	8000f78 <HAL_TIM_IC_CaptureCallback>
 8002c90:	e005      	b.n	8002c9e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f9b5 	bl	8003002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f9bc 	bl	8003016 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00c      	beq.n	8002cc8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d007      	beq.n	8002cc8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f06f 0201 	mvn.w	r2, #1
 8002cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7fe f9a2 	bl	800100c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00c      	beq.n	8002cec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d007      	beq.n	8002cec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 fcc6 	bl	8003678 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00c      	beq.n	8002d10 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d007      	beq.n	8002d10 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f98d 	bl	800302a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	f003 0320 	and.w	r3, r3, #32
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00c      	beq.n	8002d34 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f003 0320 	and.w	r3, r3, #32
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d007      	beq.n	8002d34 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f06f 0220 	mvn.w	r2, #32
 8002d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 fc98 	bl	8003664 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d34:	bf00      	nop
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d101      	bne.n	8002d5a <HAL_TIM_IC_ConfigChannel+0x1e>
 8002d56:	2302      	movs	r3, #2
 8002d58:	e088      	b.n	8002e6c <HAL_TIM_IC_ConfigChannel+0x130>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d11b      	bne.n	8002da0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002d78:	f000 fa0e 	bl	8003198 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	699a      	ldr	r2, [r3, #24]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 020c 	bic.w	r2, r2, #12
 8002d8a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6999      	ldr	r1, [r3, #24]
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	619a      	str	r2, [r3, #24]
 8002d9e:	e060      	b.n	8002e62 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d11c      	bne.n	8002de0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002db6:	f000 fa92 	bl	80032de <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	699a      	ldr	r2, [r3, #24]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002dc8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6999      	ldr	r1, [r3, #24]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	021a      	lsls	r2, r3, #8
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	619a      	str	r2, [r3, #24]
 8002dde:	e040      	b.n	8002e62 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b08      	cmp	r3, #8
 8002de4:	d11b      	bne.n	8002e1e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002df6:	f000 fadf 	bl	80033b8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	69da      	ldr	r2, [r3, #28]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 020c 	bic.w	r2, r2, #12
 8002e08:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	69d9      	ldr	r1, [r3, #28]
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	61da      	str	r2, [r3, #28]
 8002e1c:	e021      	b.n	8002e62 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b0c      	cmp	r3, #12
 8002e22:	d11c      	bne.n	8002e5e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002e34:	f000 fafc 	bl	8003430 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	69da      	ldr	r2, [r3, #28]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002e46:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	69d9      	ldr	r1, [r3, #28]
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	021a      	lsls	r2, r3, #8
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	61da      	str	r2, [r3, #28]
 8002e5c:	e001      	b.n	8002e62 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d101      	bne.n	8002e90 <HAL_TIM_ConfigClockSource+0x1c>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e0b4      	b.n	8002ffa <HAL_TIM_ConfigClockSource+0x186>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002eae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002eb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ec8:	d03e      	beq.n	8002f48 <HAL_TIM_ConfigClockSource+0xd4>
 8002eca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ece:	f200 8087 	bhi.w	8002fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ed2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ed6:	f000 8086 	beq.w	8002fe6 <HAL_TIM_ConfigClockSource+0x172>
 8002eda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ede:	d87f      	bhi.n	8002fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ee0:	2b70      	cmp	r3, #112	@ 0x70
 8002ee2:	d01a      	beq.n	8002f1a <HAL_TIM_ConfigClockSource+0xa6>
 8002ee4:	2b70      	cmp	r3, #112	@ 0x70
 8002ee6:	d87b      	bhi.n	8002fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ee8:	2b60      	cmp	r3, #96	@ 0x60
 8002eea:	d050      	beq.n	8002f8e <HAL_TIM_ConfigClockSource+0x11a>
 8002eec:	2b60      	cmp	r3, #96	@ 0x60
 8002eee:	d877      	bhi.n	8002fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef0:	2b50      	cmp	r3, #80	@ 0x50
 8002ef2:	d03c      	beq.n	8002f6e <HAL_TIM_ConfigClockSource+0xfa>
 8002ef4:	2b50      	cmp	r3, #80	@ 0x50
 8002ef6:	d873      	bhi.n	8002fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef8:	2b40      	cmp	r3, #64	@ 0x40
 8002efa:	d058      	beq.n	8002fae <HAL_TIM_ConfigClockSource+0x13a>
 8002efc:	2b40      	cmp	r3, #64	@ 0x40
 8002efe:	d86f      	bhi.n	8002fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8002f00:	2b30      	cmp	r3, #48	@ 0x30
 8002f02:	d064      	beq.n	8002fce <HAL_TIM_ConfigClockSource+0x15a>
 8002f04:	2b30      	cmp	r3, #48	@ 0x30
 8002f06:	d86b      	bhi.n	8002fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8002f08:	2b20      	cmp	r3, #32
 8002f0a:	d060      	beq.n	8002fce <HAL_TIM_ConfigClockSource+0x15a>
 8002f0c:	2b20      	cmp	r3, #32
 8002f0e:	d867      	bhi.n	8002fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d05c      	beq.n	8002fce <HAL_TIM_ConfigClockSource+0x15a>
 8002f14:	2b10      	cmp	r3, #16
 8002f16:	d05a      	beq.n	8002fce <HAL_TIM_ConfigClockSource+0x15a>
 8002f18:	e062      	b.n	8002fe0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f2a:	f000 fad9 	bl	80034e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002f3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	609a      	str	r2, [r3, #8]
      break;
 8002f46:	e04f      	b.n	8002fe8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f58:	f000 fac2 	bl	80034e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f6a:	609a      	str	r2, [r3, #8]
      break;
 8002f6c:	e03c      	b.n	8002fe8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	f000 f980 	bl	8003280 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2150      	movs	r1, #80	@ 0x50
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 fa8f 	bl	80034aa <TIM_ITRx_SetConfig>
      break;
 8002f8c:	e02c      	b.n	8002fe8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	f000 f9dc 	bl	8003358 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2160      	movs	r1, #96	@ 0x60
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 fa7f 	bl	80034aa <TIM_ITRx_SetConfig>
      break;
 8002fac:	e01c      	b.n	8002fe8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fba:	461a      	mov	r2, r3
 8002fbc:	f000 f960 	bl	8003280 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2140      	movs	r1, #64	@ 0x40
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 fa6f 	bl	80034aa <TIM_ITRx_SetConfig>
      break;
 8002fcc:	e00c      	b.n	8002fe8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	4610      	mov	r0, r2
 8002fda:	f000 fa66 	bl	80034aa <TIM_ITRx_SetConfig>
      break;
 8002fde:	e003      	b.n	8002fe8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8002fe4:	e000      	b.n	8002fe8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002fe6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003016:	b480      	push	{r7}
 8003018:	b083      	sub	sp, #12
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800301e:	bf00      	nop
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800302a:	b480      	push	{r7}
 800302c:	b083      	sub	sp, #12
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003032:	bf00      	nop
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
	...

08003040 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a46      	ldr	r2, [pc, #280]	@ (800316c <TIM_Base_SetConfig+0x12c>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d013      	beq.n	8003080 <TIM_Base_SetConfig+0x40>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800305e:	d00f      	beq.n	8003080 <TIM_Base_SetConfig+0x40>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a43      	ldr	r2, [pc, #268]	@ (8003170 <TIM_Base_SetConfig+0x130>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d00b      	beq.n	8003080 <TIM_Base_SetConfig+0x40>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a42      	ldr	r2, [pc, #264]	@ (8003174 <TIM_Base_SetConfig+0x134>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d007      	beq.n	8003080 <TIM_Base_SetConfig+0x40>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a41      	ldr	r2, [pc, #260]	@ (8003178 <TIM_Base_SetConfig+0x138>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d003      	beq.n	8003080 <TIM_Base_SetConfig+0x40>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a40      	ldr	r2, [pc, #256]	@ (800317c <TIM_Base_SetConfig+0x13c>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d108      	bne.n	8003092 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003086:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	4313      	orrs	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a35      	ldr	r2, [pc, #212]	@ (800316c <TIM_Base_SetConfig+0x12c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d02b      	beq.n	80030f2 <TIM_Base_SetConfig+0xb2>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030a0:	d027      	beq.n	80030f2 <TIM_Base_SetConfig+0xb2>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a32      	ldr	r2, [pc, #200]	@ (8003170 <TIM_Base_SetConfig+0x130>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d023      	beq.n	80030f2 <TIM_Base_SetConfig+0xb2>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a31      	ldr	r2, [pc, #196]	@ (8003174 <TIM_Base_SetConfig+0x134>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d01f      	beq.n	80030f2 <TIM_Base_SetConfig+0xb2>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a30      	ldr	r2, [pc, #192]	@ (8003178 <TIM_Base_SetConfig+0x138>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d01b      	beq.n	80030f2 <TIM_Base_SetConfig+0xb2>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a2f      	ldr	r2, [pc, #188]	@ (800317c <TIM_Base_SetConfig+0x13c>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d017      	beq.n	80030f2 <TIM_Base_SetConfig+0xb2>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a2e      	ldr	r2, [pc, #184]	@ (8003180 <TIM_Base_SetConfig+0x140>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d013      	beq.n	80030f2 <TIM_Base_SetConfig+0xb2>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a2d      	ldr	r2, [pc, #180]	@ (8003184 <TIM_Base_SetConfig+0x144>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d00f      	beq.n	80030f2 <TIM_Base_SetConfig+0xb2>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a2c      	ldr	r2, [pc, #176]	@ (8003188 <TIM_Base_SetConfig+0x148>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d00b      	beq.n	80030f2 <TIM_Base_SetConfig+0xb2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a2b      	ldr	r2, [pc, #172]	@ (800318c <TIM_Base_SetConfig+0x14c>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d007      	beq.n	80030f2 <TIM_Base_SetConfig+0xb2>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a2a      	ldr	r2, [pc, #168]	@ (8003190 <TIM_Base_SetConfig+0x150>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d003      	beq.n	80030f2 <TIM_Base_SetConfig+0xb2>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a29      	ldr	r2, [pc, #164]	@ (8003194 <TIM_Base_SetConfig+0x154>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d108      	bne.n	8003104 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	4313      	orrs	r3, r2
 8003102:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	4313      	orrs	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a10      	ldr	r2, [pc, #64]	@ (800316c <TIM_Base_SetConfig+0x12c>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d003      	beq.n	8003138 <TIM_Base_SetConfig+0xf8>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a12      	ldr	r2, [pc, #72]	@ (800317c <TIM_Base_SetConfig+0x13c>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d103      	bne.n	8003140 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	691a      	ldr	r2, [r3, #16]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b01      	cmp	r3, #1
 8003150:	d105      	bne.n	800315e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	f023 0201 	bic.w	r2, r3, #1
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	611a      	str	r2, [r3, #16]
  }
}
 800315e:	bf00      	nop
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	40010000 	.word	0x40010000
 8003170:	40000400 	.word	0x40000400
 8003174:	40000800 	.word	0x40000800
 8003178:	40000c00 	.word	0x40000c00
 800317c:	40010400 	.word	0x40010400
 8003180:	40014000 	.word	0x40014000
 8003184:	40014400 	.word	0x40014400
 8003188:	40014800 	.word	0x40014800
 800318c:	40001800 	.word	0x40001800
 8003190:	40001c00 	.word	0x40001c00
 8003194:	40002000 	.word	0x40002000

08003198 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003198:	b480      	push	{r7}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
 80031a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	f023 0201 	bic.w	r2, r3, #1
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	4a28      	ldr	r2, [pc, #160]	@ (8003264 <TIM_TI1_SetConfig+0xcc>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d01b      	beq.n	80031fe <TIM_TI1_SetConfig+0x66>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031cc:	d017      	beq.n	80031fe <TIM_TI1_SetConfig+0x66>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	4a25      	ldr	r2, [pc, #148]	@ (8003268 <TIM_TI1_SetConfig+0xd0>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d013      	beq.n	80031fe <TIM_TI1_SetConfig+0x66>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4a24      	ldr	r2, [pc, #144]	@ (800326c <TIM_TI1_SetConfig+0xd4>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d00f      	beq.n	80031fe <TIM_TI1_SetConfig+0x66>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	4a23      	ldr	r2, [pc, #140]	@ (8003270 <TIM_TI1_SetConfig+0xd8>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00b      	beq.n	80031fe <TIM_TI1_SetConfig+0x66>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	4a22      	ldr	r2, [pc, #136]	@ (8003274 <TIM_TI1_SetConfig+0xdc>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d007      	beq.n	80031fe <TIM_TI1_SetConfig+0x66>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4a21      	ldr	r2, [pc, #132]	@ (8003278 <TIM_TI1_SetConfig+0xe0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d003      	beq.n	80031fe <TIM_TI1_SetConfig+0x66>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	4a20      	ldr	r2, [pc, #128]	@ (800327c <TIM_TI1_SetConfig+0xe4>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d101      	bne.n	8003202 <TIM_TI1_SetConfig+0x6a>
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <TIM_TI1_SetConfig+0x6c>
 8003202:	2300      	movs	r3, #0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d008      	beq.n	800321a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	f023 0303 	bic.w	r3, r3, #3
 800320e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4313      	orrs	r3, r2
 8003216:	617b      	str	r3, [r7, #20]
 8003218:	e003      	b.n	8003222 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f043 0301 	orr.w	r3, r3, #1
 8003220:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003228:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	b2db      	uxtb	r3, r3
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	4313      	orrs	r3, r2
 8003234:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	f023 030a 	bic.w	r3, r3, #10
 800323c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	f003 030a 	and.w	r3, r3, #10
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	4313      	orrs	r3, r2
 8003248:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	621a      	str	r2, [r3, #32]
}
 8003256:	bf00      	nop
 8003258:	371c      	adds	r7, #28
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	40010000 	.word	0x40010000
 8003268:	40000400 	.word	0x40000400
 800326c:	40000800 	.word	0x40000800
 8003270:	40000c00 	.word	0x40000c00
 8003274:	40010400 	.word	0x40010400
 8003278:	40014000 	.word	0x40014000
 800327c:	40001800 	.word	0x40001800

08003280 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003280:	b480      	push	{r7}
 8003282:	b087      	sub	sp, #28
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	f023 0201 	bic.w	r2, r3, #1
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	011b      	lsls	r3, r3, #4
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f023 030a 	bic.w	r3, r3, #10
 80032bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	621a      	str	r2, [r3, #32]
}
 80032d2:	bf00      	nop
 80032d4:	371c      	adds	r7, #28
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80032de:	b480      	push	{r7}
 80032e0:	b087      	sub	sp, #28
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	60f8      	str	r0, [r7, #12]
 80032e6:	60b9      	str	r1, [r7, #8]
 80032e8:	607a      	str	r2, [r7, #4]
 80032ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	f023 0210 	bic.w	r2, r3, #16
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800330a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	021b      	lsls	r3, r3, #8
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800331c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	031b      	lsls	r3, r3, #12
 8003322:	b29b      	uxth	r3, r3
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	4313      	orrs	r3, r2
 8003328:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003330:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	011b      	lsls	r3, r3, #4
 8003336:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	4313      	orrs	r3, r2
 800333e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	621a      	str	r2, [r3, #32]
}
 800334c:	bf00      	nop
 800334e:	371c      	adds	r7, #28
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003358:	b480      	push	{r7}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	f023 0210 	bic.w	r2, r3, #16
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	031b      	lsls	r3, r3, #12
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4313      	orrs	r3, r2
 800338c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003394:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	4313      	orrs	r3, r2
 800339e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	621a      	str	r2, [r3, #32]
}
 80033ac:	bf00      	nop
 80033ae:	371c      	adds	r7, #28
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b087      	sub	sp, #28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
 80033c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f023 0303 	bic.w	r3, r3, #3
 80033e4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033f4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	4313      	orrs	r3, r2
 8003400:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003408:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	021b      	lsls	r3, r3, #8
 800340e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	4313      	orrs	r3, r2
 8003416:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	621a      	str	r2, [r3, #32]
}
 8003424:	bf00      	nop
 8003426:	371c      	adds	r7, #28
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003430:	b480      	push	{r7}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
 800343c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800345c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	021b      	lsls	r3, r3, #8
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	4313      	orrs	r3, r2
 8003466:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800346e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	031b      	lsls	r3, r3, #12
 8003474:	b29b      	uxth	r3, r3
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	4313      	orrs	r3, r2
 800347a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003482:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	031b      	lsls	r3, r3, #12
 8003488:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	4313      	orrs	r3, r2
 8003490:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	621a      	str	r2, [r3, #32]
}
 800349e:	bf00      	nop
 80034a0:	371c      	adds	r7, #28
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b085      	sub	sp, #20
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
 80034b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	f043 0307 	orr.w	r3, r3, #7
 80034cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	609a      	str	r2, [r3, #8]
}
 80034d4:	bf00      	nop
 80034d6:	3714      	adds	r7, #20
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b087      	sub	sp, #28
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
 80034ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	021a      	lsls	r2, r3, #8
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	431a      	orrs	r2, r3
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	4313      	orrs	r3, r2
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	4313      	orrs	r3, r2
 800350c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	609a      	str	r2, [r3, #8]
}
 8003514:	bf00      	nop
 8003516:	371c      	adds	r7, #28
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003520:	b480      	push	{r7}
 8003522:	b087      	sub	sp, #28
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	f003 031f 	and.w	r3, r3, #31
 8003532:	2201      	movs	r2, #1
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6a1a      	ldr	r2, [r3, #32]
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	43db      	mvns	r3, r3
 8003542:	401a      	ands	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a1a      	ldr	r2, [r3, #32]
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f003 031f 	and.w	r3, r3, #31
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	fa01 f303 	lsl.w	r3, r1, r3
 8003558:	431a      	orrs	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	621a      	str	r2, [r3, #32]
}
 800355e:	bf00      	nop
 8003560:	371c      	adds	r7, #28
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
	...

0800356c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800357c:	2b01      	cmp	r3, #1
 800357e:	d101      	bne.n	8003584 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003580:	2302      	movs	r3, #2
 8003582:	e05a      	b.n	800363a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2202      	movs	r2, #2
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a21      	ldr	r2, [pc, #132]	@ (8003648 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d022      	beq.n	800360e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035d0:	d01d      	beq.n	800360e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a1d      	ldr	r2, [pc, #116]	@ (800364c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d018      	beq.n	800360e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a1b      	ldr	r2, [pc, #108]	@ (8003650 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d013      	beq.n	800360e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a1a      	ldr	r2, [pc, #104]	@ (8003654 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d00e      	beq.n	800360e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a18      	ldr	r2, [pc, #96]	@ (8003658 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d009      	beq.n	800360e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a17      	ldr	r2, [pc, #92]	@ (800365c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d004      	beq.n	800360e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a15      	ldr	r2, [pc, #84]	@ (8003660 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d10c      	bne.n	8003628 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003614:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	4313      	orrs	r3, r2
 800361e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40010000 	.word	0x40010000
 800364c:	40000400 	.word	0x40000400
 8003650:	40000800 	.word	0x40000800
 8003654:	40000c00 	.word	0x40000c00
 8003658:	40010400 	.word	0x40010400
 800365c:	40014000 	.word	0x40014000
 8003660:	40001800 	.word	0x40001800

08003664 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e042      	b.n	8003724 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d106      	bne.n	80036b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7fd fd10 	bl	80010d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2224      	movs	r2, #36	@ 0x24
 80036bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 fa09 	bl	8003ae8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	691a      	ldr	r2, [r3, #16]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	695a      	ldr	r2, [r3, #20]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68da      	ldr	r2, [r3, #12]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003704:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2220      	movs	r2, #32
 8003710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2220      	movs	r2, #32
 8003718:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b08a      	sub	sp, #40	@ 0x28
 8003730:	af02      	add	r7, sp, #8
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	603b      	str	r3, [r7, #0]
 8003738:	4613      	mov	r3, r2
 800373a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800373c:	2300      	movs	r3, #0
 800373e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b20      	cmp	r3, #32
 800374a:	d175      	bne.n	8003838 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <HAL_UART_Transmit+0x2c>
 8003752:	88fb      	ldrh	r3, [r7, #6]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e06e      	b.n	800383a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2221      	movs	r2, #33	@ 0x21
 8003766:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800376a:	f7fd fddb 	bl	8001324 <HAL_GetTick>
 800376e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	88fa      	ldrh	r2, [r7, #6]
 8003774:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	88fa      	ldrh	r2, [r7, #6]
 800377a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003784:	d108      	bne.n	8003798 <HAL_UART_Transmit+0x6c>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d104      	bne.n	8003798 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800378e:	2300      	movs	r3, #0
 8003790:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	61bb      	str	r3, [r7, #24]
 8003796:	e003      	b.n	80037a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800379c:	2300      	movs	r3, #0
 800379e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037a0:	e02e      	b.n	8003800 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	2200      	movs	r2, #0
 80037aa:	2180      	movs	r1, #128	@ 0x80
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 f8df 	bl	8003970 <UART_WaitOnFlagUntilTimeout>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d005      	beq.n	80037c4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2220      	movs	r2, #32
 80037bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e03a      	b.n	800383a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10b      	bne.n	80037e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	461a      	mov	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	3302      	adds	r3, #2
 80037de:	61bb      	str	r3, [r7, #24]
 80037e0:	e007      	b.n	80037f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	781a      	ldrb	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	3301      	adds	r3, #1
 80037f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	3b01      	subs	r3, #1
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003804:	b29b      	uxth	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1cb      	bne.n	80037a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	2200      	movs	r2, #0
 8003812:	2140      	movs	r1, #64	@ 0x40
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 f8ab 	bl	8003970 <UART_WaitOnFlagUntilTimeout>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d005      	beq.n	800382c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2220      	movs	r2, #32
 8003824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e006      	b.n	800383a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003834:	2300      	movs	r3, #0
 8003836:	e000      	b.n	800383a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003838:	2302      	movs	r3, #2
  }
}
 800383a:	4618      	mov	r0, r3
 800383c:	3720      	adds	r7, #32
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b08a      	sub	sp, #40	@ 0x28
 8003846:	af02      	add	r7, sp, #8
 8003848:	60f8      	str	r0, [r7, #12]
 800384a:	60b9      	str	r1, [r7, #8]
 800384c:	603b      	str	r3, [r7, #0]
 800384e:	4613      	mov	r3, r2
 8003850:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003852:	2300      	movs	r3, #0
 8003854:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b20      	cmp	r3, #32
 8003860:	f040 8081 	bne.w	8003966 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d002      	beq.n	8003870 <HAL_UART_Receive+0x2e>
 800386a:	88fb      	ldrh	r3, [r7, #6]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e079      	b.n	8003968 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2222      	movs	r2, #34	@ 0x22
 800387e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003888:	f7fd fd4c 	bl	8001324 <HAL_GetTick>
 800388c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	88fa      	ldrh	r2, [r7, #6]
 8003892:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	88fa      	ldrh	r2, [r7, #6]
 8003898:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038a2:	d108      	bne.n	80038b6 <HAL_UART_Receive+0x74>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d104      	bne.n	80038b6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80038ac:	2300      	movs	r3, #0
 80038ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	61bb      	str	r3, [r7, #24]
 80038b4:	e003      	b.n	80038be <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038ba:	2300      	movs	r3, #0
 80038bc:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80038be:	e047      	b.n	8003950 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	2200      	movs	r2, #0
 80038c8:	2120      	movs	r1, #32
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f000 f850 	bl	8003970 <UART_WaitOnFlagUntilTimeout>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d005      	beq.n	80038e2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2220      	movs	r2, #32
 80038da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e042      	b.n	8003968 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10c      	bne.n	8003902 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	3302      	adds	r3, #2
 80038fe:	61bb      	str	r3, [r7, #24]
 8003900:	e01f      	b.n	8003942 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800390a:	d007      	beq.n	800391c <HAL_UART_Receive+0xda>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10a      	bne.n	800392a <HAL_UART_Receive+0xe8>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d106      	bne.n	800392a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	b2da      	uxtb	r2, r3
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	701a      	strb	r2, [r3, #0]
 8003928:	e008      	b.n	800393c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	b2db      	uxtb	r3, r3
 8003932:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003936:	b2da      	uxtb	r2, r3
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	3301      	adds	r3, #1
 8003940:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003946:	b29b      	uxth	r3, r3
 8003948:	3b01      	subs	r3, #1
 800394a:	b29a      	uxth	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003954:	b29b      	uxth	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1b2      	bne.n	80038c0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2220      	movs	r2, #32
 800395e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003962:	2300      	movs	r3, #0
 8003964:	e000      	b.n	8003968 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003966:	2302      	movs	r3, #2
  }
}
 8003968:	4618      	mov	r0, r3
 800396a:	3720      	adds	r7, #32
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	603b      	str	r3, [r7, #0]
 800397c:	4613      	mov	r3, r2
 800397e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003980:	e03b      	b.n	80039fa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003988:	d037      	beq.n	80039fa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398a:	f7fd fccb 	bl	8001324 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	6a3a      	ldr	r2, [r7, #32]
 8003996:	429a      	cmp	r2, r3
 8003998:	d302      	bcc.n	80039a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800399a:	6a3b      	ldr	r3, [r7, #32]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e03a      	b.n	8003a1a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f003 0304 	and.w	r3, r3, #4
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d023      	beq.n	80039fa <UART_WaitOnFlagUntilTimeout+0x8a>
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2b80      	cmp	r3, #128	@ 0x80
 80039b6:	d020      	beq.n	80039fa <UART_WaitOnFlagUntilTimeout+0x8a>
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	2b40      	cmp	r3, #64	@ 0x40
 80039bc:	d01d      	beq.n	80039fa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0308 	and.w	r3, r3, #8
 80039c8:	2b08      	cmp	r3, #8
 80039ca:	d116      	bne.n	80039fa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80039cc:	2300      	movs	r3, #0
 80039ce:	617b      	str	r3, [r7, #20]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	617b      	str	r3, [r7, #20]
 80039e0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f000 f81d 	bl	8003a22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2208      	movs	r2, #8
 80039ec:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e00f      	b.n	8003a1a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	4013      	ands	r3, r2
 8003a04:	68ba      	ldr	r2, [r7, #8]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	bf0c      	ite	eq
 8003a0a:	2301      	moveq	r3, #1
 8003a0c:	2300      	movne	r3, #0
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	461a      	mov	r2, r3
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d0b4      	beq.n	8003982 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b095      	sub	sp, #84	@ 0x54
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	330c      	adds	r3, #12
 8003a30:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a34:	e853 3f00 	ldrex	r3, [r3]
 8003a38:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	330c      	adds	r3, #12
 8003a48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a4a:	643a      	str	r2, [r7, #64]	@ 0x40
 8003a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a52:	e841 2300 	strex	r3, r2, [r1]
 8003a56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1e5      	bne.n	8003a2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	3314      	adds	r3, #20
 8003a64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	e853 3f00 	ldrex	r3, [r3]
 8003a6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	f023 0301 	bic.w	r3, r3, #1
 8003a74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	3314      	adds	r3, #20
 8003a7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a80:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a86:	e841 2300 	strex	r3, r2, [r1]
 8003a8a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1e5      	bne.n	8003a5e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d119      	bne.n	8003ace <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	330c      	adds	r3, #12
 8003aa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	e853 3f00 	ldrex	r3, [r3]
 8003aa8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	f023 0310 	bic.w	r3, r3, #16
 8003ab0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	330c      	adds	r3, #12
 8003ab8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003aba:	61ba      	str	r2, [r7, #24]
 8003abc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abe:	6979      	ldr	r1, [r7, #20]
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	e841 2300 	strex	r3, r2, [r1]
 8003ac6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1e5      	bne.n	8003a9a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003adc:	bf00      	nop
 8003ade:	3754      	adds	r7, #84	@ 0x54
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aec:	b0c0      	sub	sp, #256	@ 0x100
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b04:	68d9      	ldr	r1, [r3, #12]
 8003b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	ea40 0301 	orr.w	r3, r0, r1
 8003b10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	431a      	orrs	r2, r3
 8003b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003b40:	f021 010c 	bic.w	r1, r1, #12
 8003b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003b4e:	430b      	orrs	r3, r1
 8003b50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b62:	6999      	ldr	r1, [r3, #24]
 8003b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	ea40 0301 	orr.w	r3, r0, r1
 8003b6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	4b8f      	ldr	r3, [pc, #572]	@ (8003db4 <UART_SetConfig+0x2cc>)
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d005      	beq.n	8003b88 <UART_SetConfig+0xa0>
 8003b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	4b8d      	ldr	r3, [pc, #564]	@ (8003db8 <UART_SetConfig+0x2d0>)
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d104      	bne.n	8003b92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b88:	f7fd ffe8 	bl	8001b5c <HAL_RCC_GetPCLK2Freq>
 8003b8c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003b90:	e003      	b.n	8003b9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b92:	f7fd ffcf 	bl	8001b34 <HAL_RCC_GetPCLK1Freq>
 8003b96:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ba4:	f040 810c 	bne.w	8003dc0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ba8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bac:	2200      	movs	r2, #0
 8003bae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003bb2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003bb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003bba:	4622      	mov	r2, r4
 8003bbc:	462b      	mov	r3, r5
 8003bbe:	1891      	adds	r1, r2, r2
 8003bc0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003bc2:	415b      	adcs	r3, r3
 8003bc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003bc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003bca:	4621      	mov	r1, r4
 8003bcc:	eb12 0801 	adds.w	r8, r2, r1
 8003bd0:	4629      	mov	r1, r5
 8003bd2:	eb43 0901 	adc.w	r9, r3, r1
 8003bd6:	f04f 0200 	mov.w	r2, #0
 8003bda:	f04f 0300 	mov.w	r3, #0
 8003bde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003be2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003be6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bea:	4690      	mov	r8, r2
 8003bec:	4699      	mov	r9, r3
 8003bee:	4623      	mov	r3, r4
 8003bf0:	eb18 0303 	adds.w	r3, r8, r3
 8003bf4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003bf8:	462b      	mov	r3, r5
 8003bfa:	eb49 0303 	adc.w	r3, r9, r3
 8003bfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c0e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003c12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c16:	460b      	mov	r3, r1
 8003c18:	18db      	adds	r3, r3, r3
 8003c1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	eb42 0303 	adc.w	r3, r2, r3
 8003c22:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003c28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003c2c:	f7fc fb48 	bl	80002c0 <__aeabi_uldivmod>
 8003c30:	4602      	mov	r2, r0
 8003c32:	460b      	mov	r3, r1
 8003c34:	4b61      	ldr	r3, [pc, #388]	@ (8003dbc <UART_SetConfig+0x2d4>)
 8003c36:	fba3 2302 	umull	r2, r3, r3, r2
 8003c3a:	095b      	lsrs	r3, r3, #5
 8003c3c:	011c      	lsls	r4, r3, #4
 8003c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c42:	2200      	movs	r2, #0
 8003c44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c48:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003c4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003c50:	4642      	mov	r2, r8
 8003c52:	464b      	mov	r3, r9
 8003c54:	1891      	adds	r1, r2, r2
 8003c56:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003c58:	415b      	adcs	r3, r3
 8003c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003c60:	4641      	mov	r1, r8
 8003c62:	eb12 0a01 	adds.w	sl, r2, r1
 8003c66:	4649      	mov	r1, r9
 8003c68:	eb43 0b01 	adc.w	fp, r3, r1
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	f04f 0300 	mov.w	r3, #0
 8003c74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c80:	4692      	mov	sl, r2
 8003c82:	469b      	mov	fp, r3
 8003c84:	4643      	mov	r3, r8
 8003c86:	eb1a 0303 	adds.w	r3, sl, r3
 8003c8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c8e:	464b      	mov	r3, r9
 8003c90:	eb4b 0303 	adc.w	r3, fp, r3
 8003c94:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ca4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ca8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003cac:	460b      	mov	r3, r1
 8003cae:	18db      	adds	r3, r3, r3
 8003cb0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	eb42 0303 	adc.w	r3, r2, r3
 8003cb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003cbe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003cc2:	f7fc fafd 	bl	80002c0 <__aeabi_uldivmod>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	460b      	mov	r3, r1
 8003cca:	4611      	mov	r1, r2
 8003ccc:	4b3b      	ldr	r3, [pc, #236]	@ (8003dbc <UART_SetConfig+0x2d4>)
 8003cce:	fba3 2301 	umull	r2, r3, r3, r1
 8003cd2:	095b      	lsrs	r3, r3, #5
 8003cd4:	2264      	movs	r2, #100	@ 0x64
 8003cd6:	fb02 f303 	mul.w	r3, r2, r3
 8003cda:	1acb      	subs	r3, r1, r3
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003ce2:	4b36      	ldr	r3, [pc, #216]	@ (8003dbc <UART_SetConfig+0x2d4>)
 8003ce4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ce8:	095b      	lsrs	r3, r3, #5
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003cf0:	441c      	add	r4, r3
 8003cf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003cfc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003d00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003d04:	4642      	mov	r2, r8
 8003d06:	464b      	mov	r3, r9
 8003d08:	1891      	adds	r1, r2, r2
 8003d0a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d0c:	415b      	adcs	r3, r3
 8003d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003d14:	4641      	mov	r1, r8
 8003d16:	1851      	adds	r1, r2, r1
 8003d18:	6339      	str	r1, [r7, #48]	@ 0x30
 8003d1a:	4649      	mov	r1, r9
 8003d1c:	414b      	adcs	r3, r1
 8003d1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	f04f 0300 	mov.w	r3, #0
 8003d28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003d2c:	4659      	mov	r1, fp
 8003d2e:	00cb      	lsls	r3, r1, #3
 8003d30:	4651      	mov	r1, sl
 8003d32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d36:	4651      	mov	r1, sl
 8003d38:	00ca      	lsls	r2, r1, #3
 8003d3a:	4610      	mov	r0, r2
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	4603      	mov	r3, r0
 8003d40:	4642      	mov	r2, r8
 8003d42:	189b      	adds	r3, r3, r2
 8003d44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d48:	464b      	mov	r3, r9
 8003d4a:	460a      	mov	r2, r1
 8003d4c:	eb42 0303 	adc.w	r3, r2, r3
 8003d50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d60:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003d64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d68:	460b      	mov	r3, r1
 8003d6a:	18db      	adds	r3, r3, r3
 8003d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d6e:	4613      	mov	r3, r2
 8003d70:	eb42 0303 	adc.w	r3, r2, r3
 8003d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003d7e:	f7fc fa9f 	bl	80002c0 <__aeabi_uldivmod>
 8003d82:	4602      	mov	r2, r0
 8003d84:	460b      	mov	r3, r1
 8003d86:	4b0d      	ldr	r3, [pc, #52]	@ (8003dbc <UART_SetConfig+0x2d4>)
 8003d88:	fba3 1302 	umull	r1, r3, r3, r2
 8003d8c:	095b      	lsrs	r3, r3, #5
 8003d8e:	2164      	movs	r1, #100	@ 0x64
 8003d90:	fb01 f303 	mul.w	r3, r1, r3
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	3332      	adds	r3, #50	@ 0x32
 8003d9a:	4a08      	ldr	r2, [pc, #32]	@ (8003dbc <UART_SetConfig+0x2d4>)
 8003d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003da0:	095b      	lsrs	r3, r3, #5
 8003da2:	f003 0207 	and.w	r2, r3, #7
 8003da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4422      	add	r2, r4
 8003dae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003db0:	e106      	b.n	8003fc0 <UART_SetConfig+0x4d8>
 8003db2:	bf00      	nop
 8003db4:	40011000 	.word	0x40011000
 8003db8:	40011400 	.word	0x40011400
 8003dbc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003dca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003dce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003dd2:	4642      	mov	r2, r8
 8003dd4:	464b      	mov	r3, r9
 8003dd6:	1891      	adds	r1, r2, r2
 8003dd8:	6239      	str	r1, [r7, #32]
 8003dda:	415b      	adcs	r3, r3
 8003ddc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003de2:	4641      	mov	r1, r8
 8003de4:	1854      	adds	r4, r2, r1
 8003de6:	4649      	mov	r1, r9
 8003de8:	eb43 0501 	adc.w	r5, r3, r1
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	00eb      	lsls	r3, r5, #3
 8003df6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dfa:	00e2      	lsls	r2, r4, #3
 8003dfc:	4614      	mov	r4, r2
 8003dfe:	461d      	mov	r5, r3
 8003e00:	4643      	mov	r3, r8
 8003e02:	18e3      	adds	r3, r4, r3
 8003e04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e08:	464b      	mov	r3, r9
 8003e0a:	eb45 0303 	adc.w	r3, r5, r3
 8003e0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	f04f 0300 	mov.w	r3, #0
 8003e2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003e2e:	4629      	mov	r1, r5
 8003e30:	008b      	lsls	r3, r1, #2
 8003e32:	4621      	mov	r1, r4
 8003e34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e38:	4621      	mov	r1, r4
 8003e3a:	008a      	lsls	r2, r1, #2
 8003e3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003e40:	f7fc fa3e 	bl	80002c0 <__aeabi_uldivmod>
 8003e44:	4602      	mov	r2, r0
 8003e46:	460b      	mov	r3, r1
 8003e48:	4b60      	ldr	r3, [pc, #384]	@ (8003fcc <UART_SetConfig+0x4e4>)
 8003e4a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e4e:	095b      	lsrs	r3, r3, #5
 8003e50:	011c      	lsls	r4, r3, #4
 8003e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e56:	2200      	movs	r2, #0
 8003e58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003e64:	4642      	mov	r2, r8
 8003e66:	464b      	mov	r3, r9
 8003e68:	1891      	adds	r1, r2, r2
 8003e6a:	61b9      	str	r1, [r7, #24]
 8003e6c:	415b      	adcs	r3, r3
 8003e6e:	61fb      	str	r3, [r7, #28]
 8003e70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e74:	4641      	mov	r1, r8
 8003e76:	1851      	adds	r1, r2, r1
 8003e78:	6139      	str	r1, [r7, #16]
 8003e7a:	4649      	mov	r1, r9
 8003e7c:	414b      	adcs	r3, r1
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	f04f 0200 	mov.w	r2, #0
 8003e84:	f04f 0300 	mov.w	r3, #0
 8003e88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e8c:	4659      	mov	r1, fp
 8003e8e:	00cb      	lsls	r3, r1, #3
 8003e90:	4651      	mov	r1, sl
 8003e92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e96:	4651      	mov	r1, sl
 8003e98:	00ca      	lsls	r2, r1, #3
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	4642      	mov	r2, r8
 8003ea2:	189b      	adds	r3, r3, r2
 8003ea4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ea8:	464b      	mov	r3, r9
 8003eaa:	460a      	mov	r2, r1
 8003eac:	eb42 0303 	adc.w	r3, r2, r3
 8003eb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ebe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003ec0:	f04f 0200 	mov.w	r2, #0
 8003ec4:	f04f 0300 	mov.w	r3, #0
 8003ec8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003ecc:	4649      	mov	r1, r9
 8003ece:	008b      	lsls	r3, r1, #2
 8003ed0:	4641      	mov	r1, r8
 8003ed2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ed6:	4641      	mov	r1, r8
 8003ed8:	008a      	lsls	r2, r1, #2
 8003eda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003ede:	f7fc f9ef 	bl	80002c0 <__aeabi_uldivmod>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4611      	mov	r1, r2
 8003ee8:	4b38      	ldr	r3, [pc, #224]	@ (8003fcc <UART_SetConfig+0x4e4>)
 8003eea:	fba3 2301 	umull	r2, r3, r3, r1
 8003eee:	095b      	lsrs	r3, r3, #5
 8003ef0:	2264      	movs	r2, #100	@ 0x64
 8003ef2:	fb02 f303 	mul.w	r3, r2, r3
 8003ef6:	1acb      	subs	r3, r1, r3
 8003ef8:	011b      	lsls	r3, r3, #4
 8003efa:	3332      	adds	r3, #50	@ 0x32
 8003efc:	4a33      	ldr	r2, [pc, #204]	@ (8003fcc <UART_SetConfig+0x4e4>)
 8003efe:	fba2 2303 	umull	r2, r3, r2, r3
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f08:	441c      	add	r4, r3
 8003f0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f0e:	2200      	movs	r2, #0
 8003f10:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f12:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f14:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003f18:	4642      	mov	r2, r8
 8003f1a:	464b      	mov	r3, r9
 8003f1c:	1891      	adds	r1, r2, r2
 8003f1e:	60b9      	str	r1, [r7, #8]
 8003f20:	415b      	adcs	r3, r3
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f28:	4641      	mov	r1, r8
 8003f2a:	1851      	adds	r1, r2, r1
 8003f2c:	6039      	str	r1, [r7, #0]
 8003f2e:	4649      	mov	r1, r9
 8003f30:	414b      	adcs	r3, r1
 8003f32:	607b      	str	r3, [r7, #4]
 8003f34:	f04f 0200 	mov.w	r2, #0
 8003f38:	f04f 0300 	mov.w	r3, #0
 8003f3c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f40:	4659      	mov	r1, fp
 8003f42:	00cb      	lsls	r3, r1, #3
 8003f44:	4651      	mov	r1, sl
 8003f46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f4a:	4651      	mov	r1, sl
 8003f4c:	00ca      	lsls	r2, r1, #3
 8003f4e:	4610      	mov	r0, r2
 8003f50:	4619      	mov	r1, r3
 8003f52:	4603      	mov	r3, r0
 8003f54:	4642      	mov	r2, r8
 8003f56:	189b      	adds	r3, r3, r2
 8003f58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f5a:	464b      	mov	r3, r9
 8003f5c:	460a      	mov	r2, r1
 8003f5e:	eb42 0303 	adc.w	r3, r2, r3
 8003f62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f6e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003f70:	f04f 0200 	mov.w	r2, #0
 8003f74:	f04f 0300 	mov.w	r3, #0
 8003f78:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003f7c:	4649      	mov	r1, r9
 8003f7e:	008b      	lsls	r3, r1, #2
 8003f80:	4641      	mov	r1, r8
 8003f82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f86:	4641      	mov	r1, r8
 8003f88:	008a      	lsls	r2, r1, #2
 8003f8a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003f8e:	f7fc f997 	bl	80002c0 <__aeabi_uldivmod>
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	4b0d      	ldr	r3, [pc, #52]	@ (8003fcc <UART_SetConfig+0x4e4>)
 8003f98:	fba3 1302 	umull	r1, r3, r3, r2
 8003f9c:	095b      	lsrs	r3, r3, #5
 8003f9e:	2164      	movs	r1, #100	@ 0x64
 8003fa0:	fb01 f303 	mul.w	r3, r1, r3
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	3332      	adds	r3, #50	@ 0x32
 8003faa:	4a08      	ldr	r2, [pc, #32]	@ (8003fcc <UART_SetConfig+0x4e4>)
 8003fac:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb0:	095b      	lsrs	r3, r3, #5
 8003fb2:	f003 020f 	and.w	r2, r3, #15
 8003fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4422      	add	r2, r4
 8003fbe:	609a      	str	r2, [r3, #8]
}
 8003fc0:	bf00      	nop
 8003fc2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fcc:	51eb851f 	.word	0x51eb851f

08003fd0 <siprintf>:
 8003fd0:	b40e      	push	{r1, r2, r3}
 8003fd2:	b500      	push	{lr}
 8003fd4:	b09c      	sub	sp, #112	@ 0x70
 8003fd6:	ab1d      	add	r3, sp, #116	@ 0x74
 8003fd8:	9002      	str	r0, [sp, #8]
 8003fda:	9006      	str	r0, [sp, #24]
 8003fdc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003fe0:	4809      	ldr	r0, [pc, #36]	@ (8004008 <siprintf+0x38>)
 8003fe2:	9107      	str	r1, [sp, #28]
 8003fe4:	9104      	str	r1, [sp, #16]
 8003fe6:	4909      	ldr	r1, [pc, #36]	@ (800400c <siprintf+0x3c>)
 8003fe8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fec:	9105      	str	r1, [sp, #20]
 8003fee:	6800      	ldr	r0, [r0, #0]
 8003ff0:	9301      	str	r3, [sp, #4]
 8003ff2:	a902      	add	r1, sp, #8
 8003ff4:	f000 f994 	bl	8004320 <_svfiprintf_r>
 8003ff8:	9b02      	ldr	r3, [sp, #8]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	701a      	strb	r2, [r3, #0]
 8003ffe:	b01c      	add	sp, #112	@ 0x70
 8004000:	f85d eb04 	ldr.w	lr, [sp], #4
 8004004:	b003      	add	sp, #12
 8004006:	4770      	bx	lr
 8004008:	2000000c 	.word	0x2000000c
 800400c:	ffff0208 	.word	0xffff0208

08004010 <memset>:
 8004010:	4402      	add	r2, r0
 8004012:	4603      	mov	r3, r0
 8004014:	4293      	cmp	r3, r2
 8004016:	d100      	bne.n	800401a <memset+0xa>
 8004018:	4770      	bx	lr
 800401a:	f803 1b01 	strb.w	r1, [r3], #1
 800401e:	e7f9      	b.n	8004014 <memset+0x4>

08004020 <__errno>:
 8004020:	4b01      	ldr	r3, [pc, #4]	@ (8004028 <__errno+0x8>)
 8004022:	6818      	ldr	r0, [r3, #0]
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	2000000c 	.word	0x2000000c

0800402c <__libc_init_array>:
 800402c:	b570      	push	{r4, r5, r6, lr}
 800402e:	4d0d      	ldr	r5, [pc, #52]	@ (8004064 <__libc_init_array+0x38>)
 8004030:	4c0d      	ldr	r4, [pc, #52]	@ (8004068 <__libc_init_array+0x3c>)
 8004032:	1b64      	subs	r4, r4, r5
 8004034:	10a4      	asrs	r4, r4, #2
 8004036:	2600      	movs	r6, #0
 8004038:	42a6      	cmp	r6, r4
 800403a:	d109      	bne.n	8004050 <__libc_init_array+0x24>
 800403c:	4d0b      	ldr	r5, [pc, #44]	@ (800406c <__libc_init_array+0x40>)
 800403e:	4c0c      	ldr	r4, [pc, #48]	@ (8004070 <__libc_init_array+0x44>)
 8004040:	f000 fc66 	bl	8004910 <_init>
 8004044:	1b64      	subs	r4, r4, r5
 8004046:	10a4      	asrs	r4, r4, #2
 8004048:	2600      	movs	r6, #0
 800404a:	42a6      	cmp	r6, r4
 800404c:	d105      	bne.n	800405a <__libc_init_array+0x2e>
 800404e:	bd70      	pop	{r4, r5, r6, pc}
 8004050:	f855 3b04 	ldr.w	r3, [r5], #4
 8004054:	4798      	blx	r3
 8004056:	3601      	adds	r6, #1
 8004058:	e7ee      	b.n	8004038 <__libc_init_array+0xc>
 800405a:	f855 3b04 	ldr.w	r3, [r5], #4
 800405e:	4798      	blx	r3
 8004060:	3601      	adds	r6, #1
 8004062:	e7f2      	b.n	800404a <__libc_init_array+0x1e>
 8004064:	080049d4 	.word	0x080049d4
 8004068:	080049d4 	.word	0x080049d4
 800406c:	080049d4 	.word	0x080049d4
 8004070:	080049d8 	.word	0x080049d8

08004074 <__retarget_lock_acquire_recursive>:
 8004074:	4770      	bx	lr

08004076 <__retarget_lock_release_recursive>:
 8004076:	4770      	bx	lr

08004078 <_free_r>:
 8004078:	b538      	push	{r3, r4, r5, lr}
 800407a:	4605      	mov	r5, r0
 800407c:	2900      	cmp	r1, #0
 800407e:	d041      	beq.n	8004104 <_free_r+0x8c>
 8004080:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004084:	1f0c      	subs	r4, r1, #4
 8004086:	2b00      	cmp	r3, #0
 8004088:	bfb8      	it	lt
 800408a:	18e4      	addlt	r4, r4, r3
 800408c:	f000 f8e0 	bl	8004250 <__malloc_lock>
 8004090:	4a1d      	ldr	r2, [pc, #116]	@ (8004108 <_free_r+0x90>)
 8004092:	6813      	ldr	r3, [r2, #0]
 8004094:	b933      	cbnz	r3, 80040a4 <_free_r+0x2c>
 8004096:	6063      	str	r3, [r4, #4]
 8004098:	6014      	str	r4, [r2, #0]
 800409a:	4628      	mov	r0, r5
 800409c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040a0:	f000 b8dc 	b.w	800425c <__malloc_unlock>
 80040a4:	42a3      	cmp	r3, r4
 80040a6:	d908      	bls.n	80040ba <_free_r+0x42>
 80040a8:	6820      	ldr	r0, [r4, #0]
 80040aa:	1821      	adds	r1, r4, r0
 80040ac:	428b      	cmp	r3, r1
 80040ae:	bf01      	itttt	eq
 80040b0:	6819      	ldreq	r1, [r3, #0]
 80040b2:	685b      	ldreq	r3, [r3, #4]
 80040b4:	1809      	addeq	r1, r1, r0
 80040b6:	6021      	streq	r1, [r4, #0]
 80040b8:	e7ed      	b.n	8004096 <_free_r+0x1e>
 80040ba:	461a      	mov	r2, r3
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	b10b      	cbz	r3, 80040c4 <_free_r+0x4c>
 80040c0:	42a3      	cmp	r3, r4
 80040c2:	d9fa      	bls.n	80040ba <_free_r+0x42>
 80040c4:	6811      	ldr	r1, [r2, #0]
 80040c6:	1850      	adds	r0, r2, r1
 80040c8:	42a0      	cmp	r0, r4
 80040ca:	d10b      	bne.n	80040e4 <_free_r+0x6c>
 80040cc:	6820      	ldr	r0, [r4, #0]
 80040ce:	4401      	add	r1, r0
 80040d0:	1850      	adds	r0, r2, r1
 80040d2:	4283      	cmp	r3, r0
 80040d4:	6011      	str	r1, [r2, #0]
 80040d6:	d1e0      	bne.n	800409a <_free_r+0x22>
 80040d8:	6818      	ldr	r0, [r3, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	6053      	str	r3, [r2, #4]
 80040de:	4408      	add	r0, r1
 80040e0:	6010      	str	r0, [r2, #0]
 80040e2:	e7da      	b.n	800409a <_free_r+0x22>
 80040e4:	d902      	bls.n	80040ec <_free_r+0x74>
 80040e6:	230c      	movs	r3, #12
 80040e8:	602b      	str	r3, [r5, #0]
 80040ea:	e7d6      	b.n	800409a <_free_r+0x22>
 80040ec:	6820      	ldr	r0, [r4, #0]
 80040ee:	1821      	adds	r1, r4, r0
 80040f0:	428b      	cmp	r3, r1
 80040f2:	bf04      	itt	eq
 80040f4:	6819      	ldreq	r1, [r3, #0]
 80040f6:	685b      	ldreq	r3, [r3, #4]
 80040f8:	6063      	str	r3, [r4, #4]
 80040fa:	bf04      	itt	eq
 80040fc:	1809      	addeq	r1, r1, r0
 80040fe:	6021      	streq	r1, [r4, #0]
 8004100:	6054      	str	r4, [r2, #4]
 8004102:	e7ca      	b.n	800409a <_free_r+0x22>
 8004104:	bd38      	pop	{r3, r4, r5, pc}
 8004106:	bf00      	nop
 8004108:	200029fc 	.word	0x200029fc

0800410c <sbrk_aligned>:
 800410c:	b570      	push	{r4, r5, r6, lr}
 800410e:	4e0f      	ldr	r6, [pc, #60]	@ (800414c <sbrk_aligned+0x40>)
 8004110:	460c      	mov	r4, r1
 8004112:	6831      	ldr	r1, [r6, #0]
 8004114:	4605      	mov	r5, r0
 8004116:	b911      	cbnz	r1, 800411e <sbrk_aligned+0x12>
 8004118:	f000 fba6 	bl	8004868 <_sbrk_r>
 800411c:	6030      	str	r0, [r6, #0]
 800411e:	4621      	mov	r1, r4
 8004120:	4628      	mov	r0, r5
 8004122:	f000 fba1 	bl	8004868 <_sbrk_r>
 8004126:	1c43      	adds	r3, r0, #1
 8004128:	d103      	bne.n	8004132 <sbrk_aligned+0x26>
 800412a:	f04f 34ff 	mov.w	r4, #4294967295
 800412e:	4620      	mov	r0, r4
 8004130:	bd70      	pop	{r4, r5, r6, pc}
 8004132:	1cc4      	adds	r4, r0, #3
 8004134:	f024 0403 	bic.w	r4, r4, #3
 8004138:	42a0      	cmp	r0, r4
 800413a:	d0f8      	beq.n	800412e <sbrk_aligned+0x22>
 800413c:	1a21      	subs	r1, r4, r0
 800413e:	4628      	mov	r0, r5
 8004140:	f000 fb92 	bl	8004868 <_sbrk_r>
 8004144:	3001      	adds	r0, #1
 8004146:	d1f2      	bne.n	800412e <sbrk_aligned+0x22>
 8004148:	e7ef      	b.n	800412a <sbrk_aligned+0x1e>
 800414a:	bf00      	nop
 800414c:	200029f8 	.word	0x200029f8

08004150 <_malloc_r>:
 8004150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004154:	1ccd      	adds	r5, r1, #3
 8004156:	f025 0503 	bic.w	r5, r5, #3
 800415a:	3508      	adds	r5, #8
 800415c:	2d0c      	cmp	r5, #12
 800415e:	bf38      	it	cc
 8004160:	250c      	movcc	r5, #12
 8004162:	2d00      	cmp	r5, #0
 8004164:	4606      	mov	r6, r0
 8004166:	db01      	blt.n	800416c <_malloc_r+0x1c>
 8004168:	42a9      	cmp	r1, r5
 800416a:	d904      	bls.n	8004176 <_malloc_r+0x26>
 800416c:	230c      	movs	r3, #12
 800416e:	6033      	str	r3, [r6, #0]
 8004170:	2000      	movs	r0, #0
 8004172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004176:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800424c <_malloc_r+0xfc>
 800417a:	f000 f869 	bl	8004250 <__malloc_lock>
 800417e:	f8d8 3000 	ldr.w	r3, [r8]
 8004182:	461c      	mov	r4, r3
 8004184:	bb44      	cbnz	r4, 80041d8 <_malloc_r+0x88>
 8004186:	4629      	mov	r1, r5
 8004188:	4630      	mov	r0, r6
 800418a:	f7ff ffbf 	bl	800410c <sbrk_aligned>
 800418e:	1c43      	adds	r3, r0, #1
 8004190:	4604      	mov	r4, r0
 8004192:	d158      	bne.n	8004246 <_malloc_r+0xf6>
 8004194:	f8d8 4000 	ldr.w	r4, [r8]
 8004198:	4627      	mov	r7, r4
 800419a:	2f00      	cmp	r7, #0
 800419c:	d143      	bne.n	8004226 <_malloc_r+0xd6>
 800419e:	2c00      	cmp	r4, #0
 80041a0:	d04b      	beq.n	800423a <_malloc_r+0xea>
 80041a2:	6823      	ldr	r3, [r4, #0]
 80041a4:	4639      	mov	r1, r7
 80041a6:	4630      	mov	r0, r6
 80041a8:	eb04 0903 	add.w	r9, r4, r3
 80041ac:	f000 fb5c 	bl	8004868 <_sbrk_r>
 80041b0:	4581      	cmp	r9, r0
 80041b2:	d142      	bne.n	800423a <_malloc_r+0xea>
 80041b4:	6821      	ldr	r1, [r4, #0]
 80041b6:	1a6d      	subs	r5, r5, r1
 80041b8:	4629      	mov	r1, r5
 80041ba:	4630      	mov	r0, r6
 80041bc:	f7ff ffa6 	bl	800410c <sbrk_aligned>
 80041c0:	3001      	adds	r0, #1
 80041c2:	d03a      	beq.n	800423a <_malloc_r+0xea>
 80041c4:	6823      	ldr	r3, [r4, #0]
 80041c6:	442b      	add	r3, r5
 80041c8:	6023      	str	r3, [r4, #0]
 80041ca:	f8d8 3000 	ldr.w	r3, [r8]
 80041ce:	685a      	ldr	r2, [r3, #4]
 80041d0:	bb62      	cbnz	r2, 800422c <_malloc_r+0xdc>
 80041d2:	f8c8 7000 	str.w	r7, [r8]
 80041d6:	e00f      	b.n	80041f8 <_malloc_r+0xa8>
 80041d8:	6822      	ldr	r2, [r4, #0]
 80041da:	1b52      	subs	r2, r2, r5
 80041dc:	d420      	bmi.n	8004220 <_malloc_r+0xd0>
 80041de:	2a0b      	cmp	r2, #11
 80041e0:	d917      	bls.n	8004212 <_malloc_r+0xc2>
 80041e2:	1961      	adds	r1, r4, r5
 80041e4:	42a3      	cmp	r3, r4
 80041e6:	6025      	str	r5, [r4, #0]
 80041e8:	bf18      	it	ne
 80041ea:	6059      	strne	r1, [r3, #4]
 80041ec:	6863      	ldr	r3, [r4, #4]
 80041ee:	bf08      	it	eq
 80041f0:	f8c8 1000 	streq.w	r1, [r8]
 80041f4:	5162      	str	r2, [r4, r5]
 80041f6:	604b      	str	r3, [r1, #4]
 80041f8:	4630      	mov	r0, r6
 80041fa:	f000 f82f 	bl	800425c <__malloc_unlock>
 80041fe:	f104 000b 	add.w	r0, r4, #11
 8004202:	1d23      	adds	r3, r4, #4
 8004204:	f020 0007 	bic.w	r0, r0, #7
 8004208:	1ac2      	subs	r2, r0, r3
 800420a:	bf1c      	itt	ne
 800420c:	1a1b      	subne	r3, r3, r0
 800420e:	50a3      	strne	r3, [r4, r2]
 8004210:	e7af      	b.n	8004172 <_malloc_r+0x22>
 8004212:	6862      	ldr	r2, [r4, #4]
 8004214:	42a3      	cmp	r3, r4
 8004216:	bf0c      	ite	eq
 8004218:	f8c8 2000 	streq.w	r2, [r8]
 800421c:	605a      	strne	r2, [r3, #4]
 800421e:	e7eb      	b.n	80041f8 <_malloc_r+0xa8>
 8004220:	4623      	mov	r3, r4
 8004222:	6864      	ldr	r4, [r4, #4]
 8004224:	e7ae      	b.n	8004184 <_malloc_r+0x34>
 8004226:	463c      	mov	r4, r7
 8004228:	687f      	ldr	r7, [r7, #4]
 800422a:	e7b6      	b.n	800419a <_malloc_r+0x4a>
 800422c:	461a      	mov	r2, r3
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	42a3      	cmp	r3, r4
 8004232:	d1fb      	bne.n	800422c <_malloc_r+0xdc>
 8004234:	2300      	movs	r3, #0
 8004236:	6053      	str	r3, [r2, #4]
 8004238:	e7de      	b.n	80041f8 <_malloc_r+0xa8>
 800423a:	230c      	movs	r3, #12
 800423c:	6033      	str	r3, [r6, #0]
 800423e:	4630      	mov	r0, r6
 8004240:	f000 f80c 	bl	800425c <__malloc_unlock>
 8004244:	e794      	b.n	8004170 <_malloc_r+0x20>
 8004246:	6005      	str	r5, [r0, #0]
 8004248:	e7d6      	b.n	80041f8 <_malloc_r+0xa8>
 800424a:	bf00      	nop
 800424c:	200029fc 	.word	0x200029fc

08004250 <__malloc_lock>:
 8004250:	4801      	ldr	r0, [pc, #4]	@ (8004258 <__malloc_lock+0x8>)
 8004252:	f7ff bf0f 	b.w	8004074 <__retarget_lock_acquire_recursive>
 8004256:	bf00      	nop
 8004258:	200029f4 	.word	0x200029f4

0800425c <__malloc_unlock>:
 800425c:	4801      	ldr	r0, [pc, #4]	@ (8004264 <__malloc_unlock+0x8>)
 800425e:	f7ff bf0a 	b.w	8004076 <__retarget_lock_release_recursive>
 8004262:	bf00      	nop
 8004264:	200029f4 	.word	0x200029f4

08004268 <__ssputs_r>:
 8004268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800426c:	688e      	ldr	r6, [r1, #8]
 800426e:	461f      	mov	r7, r3
 8004270:	42be      	cmp	r6, r7
 8004272:	680b      	ldr	r3, [r1, #0]
 8004274:	4682      	mov	sl, r0
 8004276:	460c      	mov	r4, r1
 8004278:	4690      	mov	r8, r2
 800427a:	d82d      	bhi.n	80042d8 <__ssputs_r+0x70>
 800427c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004280:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004284:	d026      	beq.n	80042d4 <__ssputs_r+0x6c>
 8004286:	6965      	ldr	r5, [r4, #20]
 8004288:	6909      	ldr	r1, [r1, #16]
 800428a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800428e:	eba3 0901 	sub.w	r9, r3, r1
 8004292:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004296:	1c7b      	adds	r3, r7, #1
 8004298:	444b      	add	r3, r9
 800429a:	106d      	asrs	r5, r5, #1
 800429c:	429d      	cmp	r5, r3
 800429e:	bf38      	it	cc
 80042a0:	461d      	movcc	r5, r3
 80042a2:	0553      	lsls	r3, r2, #21
 80042a4:	d527      	bpl.n	80042f6 <__ssputs_r+0x8e>
 80042a6:	4629      	mov	r1, r5
 80042a8:	f7ff ff52 	bl	8004150 <_malloc_r>
 80042ac:	4606      	mov	r6, r0
 80042ae:	b360      	cbz	r0, 800430a <__ssputs_r+0xa2>
 80042b0:	6921      	ldr	r1, [r4, #16]
 80042b2:	464a      	mov	r2, r9
 80042b4:	f000 fae8 	bl	8004888 <memcpy>
 80042b8:	89a3      	ldrh	r3, [r4, #12]
 80042ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80042be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042c2:	81a3      	strh	r3, [r4, #12]
 80042c4:	6126      	str	r6, [r4, #16]
 80042c6:	6165      	str	r5, [r4, #20]
 80042c8:	444e      	add	r6, r9
 80042ca:	eba5 0509 	sub.w	r5, r5, r9
 80042ce:	6026      	str	r6, [r4, #0]
 80042d0:	60a5      	str	r5, [r4, #8]
 80042d2:	463e      	mov	r6, r7
 80042d4:	42be      	cmp	r6, r7
 80042d6:	d900      	bls.n	80042da <__ssputs_r+0x72>
 80042d8:	463e      	mov	r6, r7
 80042da:	6820      	ldr	r0, [r4, #0]
 80042dc:	4632      	mov	r2, r6
 80042de:	4641      	mov	r1, r8
 80042e0:	f000 faa8 	bl	8004834 <memmove>
 80042e4:	68a3      	ldr	r3, [r4, #8]
 80042e6:	1b9b      	subs	r3, r3, r6
 80042e8:	60a3      	str	r3, [r4, #8]
 80042ea:	6823      	ldr	r3, [r4, #0]
 80042ec:	4433      	add	r3, r6
 80042ee:	6023      	str	r3, [r4, #0]
 80042f0:	2000      	movs	r0, #0
 80042f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042f6:	462a      	mov	r2, r5
 80042f8:	f000 fad4 	bl	80048a4 <_realloc_r>
 80042fc:	4606      	mov	r6, r0
 80042fe:	2800      	cmp	r0, #0
 8004300:	d1e0      	bne.n	80042c4 <__ssputs_r+0x5c>
 8004302:	6921      	ldr	r1, [r4, #16]
 8004304:	4650      	mov	r0, sl
 8004306:	f7ff feb7 	bl	8004078 <_free_r>
 800430a:	230c      	movs	r3, #12
 800430c:	f8ca 3000 	str.w	r3, [sl]
 8004310:	89a3      	ldrh	r3, [r4, #12]
 8004312:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004316:	81a3      	strh	r3, [r4, #12]
 8004318:	f04f 30ff 	mov.w	r0, #4294967295
 800431c:	e7e9      	b.n	80042f2 <__ssputs_r+0x8a>
	...

08004320 <_svfiprintf_r>:
 8004320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004324:	4698      	mov	r8, r3
 8004326:	898b      	ldrh	r3, [r1, #12]
 8004328:	061b      	lsls	r3, r3, #24
 800432a:	b09d      	sub	sp, #116	@ 0x74
 800432c:	4607      	mov	r7, r0
 800432e:	460d      	mov	r5, r1
 8004330:	4614      	mov	r4, r2
 8004332:	d510      	bpl.n	8004356 <_svfiprintf_r+0x36>
 8004334:	690b      	ldr	r3, [r1, #16]
 8004336:	b973      	cbnz	r3, 8004356 <_svfiprintf_r+0x36>
 8004338:	2140      	movs	r1, #64	@ 0x40
 800433a:	f7ff ff09 	bl	8004150 <_malloc_r>
 800433e:	6028      	str	r0, [r5, #0]
 8004340:	6128      	str	r0, [r5, #16]
 8004342:	b930      	cbnz	r0, 8004352 <_svfiprintf_r+0x32>
 8004344:	230c      	movs	r3, #12
 8004346:	603b      	str	r3, [r7, #0]
 8004348:	f04f 30ff 	mov.w	r0, #4294967295
 800434c:	b01d      	add	sp, #116	@ 0x74
 800434e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004352:	2340      	movs	r3, #64	@ 0x40
 8004354:	616b      	str	r3, [r5, #20]
 8004356:	2300      	movs	r3, #0
 8004358:	9309      	str	r3, [sp, #36]	@ 0x24
 800435a:	2320      	movs	r3, #32
 800435c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004360:	f8cd 800c 	str.w	r8, [sp, #12]
 8004364:	2330      	movs	r3, #48	@ 0x30
 8004366:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004504 <_svfiprintf_r+0x1e4>
 800436a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800436e:	f04f 0901 	mov.w	r9, #1
 8004372:	4623      	mov	r3, r4
 8004374:	469a      	mov	sl, r3
 8004376:	f813 2b01 	ldrb.w	r2, [r3], #1
 800437a:	b10a      	cbz	r2, 8004380 <_svfiprintf_r+0x60>
 800437c:	2a25      	cmp	r2, #37	@ 0x25
 800437e:	d1f9      	bne.n	8004374 <_svfiprintf_r+0x54>
 8004380:	ebba 0b04 	subs.w	fp, sl, r4
 8004384:	d00b      	beq.n	800439e <_svfiprintf_r+0x7e>
 8004386:	465b      	mov	r3, fp
 8004388:	4622      	mov	r2, r4
 800438a:	4629      	mov	r1, r5
 800438c:	4638      	mov	r0, r7
 800438e:	f7ff ff6b 	bl	8004268 <__ssputs_r>
 8004392:	3001      	adds	r0, #1
 8004394:	f000 80a7 	beq.w	80044e6 <_svfiprintf_r+0x1c6>
 8004398:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800439a:	445a      	add	r2, fp
 800439c:	9209      	str	r2, [sp, #36]	@ 0x24
 800439e:	f89a 3000 	ldrb.w	r3, [sl]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f000 809f 	beq.w	80044e6 <_svfiprintf_r+0x1c6>
 80043a8:	2300      	movs	r3, #0
 80043aa:	f04f 32ff 	mov.w	r2, #4294967295
 80043ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043b2:	f10a 0a01 	add.w	sl, sl, #1
 80043b6:	9304      	str	r3, [sp, #16]
 80043b8:	9307      	str	r3, [sp, #28]
 80043ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80043be:	931a      	str	r3, [sp, #104]	@ 0x68
 80043c0:	4654      	mov	r4, sl
 80043c2:	2205      	movs	r2, #5
 80043c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043c8:	484e      	ldr	r0, [pc, #312]	@ (8004504 <_svfiprintf_r+0x1e4>)
 80043ca:	f7fb ff29 	bl	8000220 <memchr>
 80043ce:	9a04      	ldr	r2, [sp, #16]
 80043d0:	b9d8      	cbnz	r0, 800440a <_svfiprintf_r+0xea>
 80043d2:	06d0      	lsls	r0, r2, #27
 80043d4:	bf44      	itt	mi
 80043d6:	2320      	movmi	r3, #32
 80043d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80043dc:	0711      	lsls	r1, r2, #28
 80043de:	bf44      	itt	mi
 80043e0:	232b      	movmi	r3, #43	@ 0x2b
 80043e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80043e6:	f89a 3000 	ldrb.w	r3, [sl]
 80043ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80043ec:	d015      	beq.n	800441a <_svfiprintf_r+0xfa>
 80043ee:	9a07      	ldr	r2, [sp, #28]
 80043f0:	4654      	mov	r4, sl
 80043f2:	2000      	movs	r0, #0
 80043f4:	f04f 0c0a 	mov.w	ip, #10
 80043f8:	4621      	mov	r1, r4
 80043fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043fe:	3b30      	subs	r3, #48	@ 0x30
 8004400:	2b09      	cmp	r3, #9
 8004402:	d94b      	bls.n	800449c <_svfiprintf_r+0x17c>
 8004404:	b1b0      	cbz	r0, 8004434 <_svfiprintf_r+0x114>
 8004406:	9207      	str	r2, [sp, #28]
 8004408:	e014      	b.n	8004434 <_svfiprintf_r+0x114>
 800440a:	eba0 0308 	sub.w	r3, r0, r8
 800440e:	fa09 f303 	lsl.w	r3, r9, r3
 8004412:	4313      	orrs	r3, r2
 8004414:	9304      	str	r3, [sp, #16]
 8004416:	46a2      	mov	sl, r4
 8004418:	e7d2      	b.n	80043c0 <_svfiprintf_r+0xa0>
 800441a:	9b03      	ldr	r3, [sp, #12]
 800441c:	1d19      	adds	r1, r3, #4
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	9103      	str	r1, [sp, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	bfbb      	ittet	lt
 8004426:	425b      	neglt	r3, r3
 8004428:	f042 0202 	orrlt.w	r2, r2, #2
 800442c:	9307      	strge	r3, [sp, #28]
 800442e:	9307      	strlt	r3, [sp, #28]
 8004430:	bfb8      	it	lt
 8004432:	9204      	strlt	r2, [sp, #16]
 8004434:	7823      	ldrb	r3, [r4, #0]
 8004436:	2b2e      	cmp	r3, #46	@ 0x2e
 8004438:	d10a      	bne.n	8004450 <_svfiprintf_r+0x130>
 800443a:	7863      	ldrb	r3, [r4, #1]
 800443c:	2b2a      	cmp	r3, #42	@ 0x2a
 800443e:	d132      	bne.n	80044a6 <_svfiprintf_r+0x186>
 8004440:	9b03      	ldr	r3, [sp, #12]
 8004442:	1d1a      	adds	r2, r3, #4
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	9203      	str	r2, [sp, #12]
 8004448:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800444c:	3402      	adds	r4, #2
 800444e:	9305      	str	r3, [sp, #20]
 8004450:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004514 <_svfiprintf_r+0x1f4>
 8004454:	7821      	ldrb	r1, [r4, #0]
 8004456:	2203      	movs	r2, #3
 8004458:	4650      	mov	r0, sl
 800445a:	f7fb fee1 	bl	8000220 <memchr>
 800445e:	b138      	cbz	r0, 8004470 <_svfiprintf_r+0x150>
 8004460:	9b04      	ldr	r3, [sp, #16]
 8004462:	eba0 000a 	sub.w	r0, r0, sl
 8004466:	2240      	movs	r2, #64	@ 0x40
 8004468:	4082      	lsls	r2, r0
 800446a:	4313      	orrs	r3, r2
 800446c:	3401      	adds	r4, #1
 800446e:	9304      	str	r3, [sp, #16]
 8004470:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004474:	4824      	ldr	r0, [pc, #144]	@ (8004508 <_svfiprintf_r+0x1e8>)
 8004476:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800447a:	2206      	movs	r2, #6
 800447c:	f7fb fed0 	bl	8000220 <memchr>
 8004480:	2800      	cmp	r0, #0
 8004482:	d036      	beq.n	80044f2 <_svfiprintf_r+0x1d2>
 8004484:	4b21      	ldr	r3, [pc, #132]	@ (800450c <_svfiprintf_r+0x1ec>)
 8004486:	bb1b      	cbnz	r3, 80044d0 <_svfiprintf_r+0x1b0>
 8004488:	9b03      	ldr	r3, [sp, #12]
 800448a:	3307      	adds	r3, #7
 800448c:	f023 0307 	bic.w	r3, r3, #7
 8004490:	3308      	adds	r3, #8
 8004492:	9303      	str	r3, [sp, #12]
 8004494:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004496:	4433      	add	r3, r6
 8004498:	9309      	str	r3, [sp, #36]	@ 0x24
 800449a:	e76a      	b.n	8004372 <_svfiprintf_r+0x52>
 800449c:	fb0c 3202 	mla	r2, ip, r2, r3
 80044a0:	460c      	mov	r4, r1
 80044a2:	2001      	movs	r0, #1
 80044a4:	e7a8      	b.n	80043f8 <_svfiprintf_r+0xd8>
 80044a6:	2300      	movs	r3, #0
 80044a8:	3401      	adds	r4, #1
 80044aa:	9305      	str	r3, [sp, #20]
 80044ac:	4619      	mov	r1, r3
 80044ae:	f04f 0c0a 	mov.w	ip, #10
 80044b2:	4620      	mov	r0, r4
 80044b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044b8:	3a30      	subs	r2, #48	@ 0x30
 80044ba:	2a09      	cmp	r2, #9
 80044bc:	d903      	bls.n	80044c6 <_svfiprintf_r+0x1a6>
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0c6      	beq.n	8004450 <_svfiprintf_r+0x130>
 80044c2:	9105      	str	r1, [sp, #20]
 80044c4:	e7c4      	b.n	8004450 <_svfiprintf_r+0x130>
 80044c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80044ca:	4604      	mov	r4, r0
 80044cc:	2301      	movs	r3, #1
 80044ce:	e7f0      	b.n	80044b2 <_svfiprintf_r+0x192>
 80044d0:	ab03      	add	r3, sp, #12
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	462a      	mov	r2, r5
 80044d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004510 <_svfiprintf_r+0x1f0>)
 80044d8:	a904      	add	r1, sp, #16
 80044da:	4638      	mov	r0, r7
 80044dc:	f3af 8000 	nop.w
 80044e0:	1c42      	adds	r2, r0, #1
 80044e2:	4606      	mov	r6, r0
 80044e4:	d1d6      	bne.n	8004494 <_svfiprintf_r+0x174>
 80044e6:	89ab      	ldrh	r3, [r5, #12]
 80044e8:	065b      	lsls	r3, r3, #25
 80044ea:	f53f af2d 	bmi.w	8004348 <_svfiprintf_r+0x28>
 80044ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80044f0:	e72c      	b.n	800434c <_svfiprintf_r+0x2c>
 80044f2:	ab03      	add	r3, sp, #12
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	462a      	mov	r2, r5
 80044f8:	4b05      	ldr	r3, [pc, #20]	@ (8004510 <_svfiprintf_r+0x1f0>)
 80044fa:	a904      	add	r1, sp, #16
 80044fc:	4638      	mov	r0, r7
 80044fe:	f000 f879 	bl	80045f4 <_printf_i>
 8004502:	e7ed      	b.n	80044e0 <_svfiprintf_r+0x1c0>
 8004504:	08004998 	.word	0x08004998
 8004508:	080049a2 	.word	0x080049a2
 800450c:	00000000 	.word	0x00000000
 8004510:	08004269 	.word	0x08004269
 8004514:	0800499e 	.word	0x0800499e

08004518 <_printf_common>:
 8004518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800451c:	4616      	mov	r6, r2
 800451e:	4698      	mov	r8, r3
 8004520:	688a      	ldr	r2, [r1, #8]
 8004522:	690b      	ldr	r3, [r1, #16]
 8004524:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004528:	4293      	cmp	r3, r2
 800452a:	bfb8      	it	lt
 800452c:	4613      	movlt	r3, r2
 800452e:	6033      	str	r3, [r6, #0]
 8004530:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004534:	4607      	mov	r7, r0
 8004536:	460c      	mov	r4, r1
 8004538:	b10a      	cbz	r2, 800453e <_printf_common+0x26>
 800453a:	3301      	adds	r3, #1
 800453c:	6033      	str	r3, [r6, #0]
 800453e:	6823      	ldr	r3, [r4, #0]
 8004540:	0699      	lsls	r1, r3, #26
 8004542:	bf42      	ittt	mi
 8004544:	6833      	ldrmi	r3, [r6, #0]
 8004546:	3302      	addmi	r3, #2
 8004548:	6033      	strmi	r3, [r6, #0]
 800454a:	6825      	ldr	r5, [r4, #0]
 800454c:	f015 0506 	ands.w	r5, r5, #6
 8004550:	d106      	bne.n	8004560 <_printf_common+0x48>
 8004552:	f104 0a19 	add.w	sl, r4, #25
 8004556:	68e3      	ldr	r3, [r4, #12]
 8004558:	6832      	ldr	r2, [r6, #0]
 800455a:	1a9b      	subs	r3, r3, r2
 800455c:	42ab      	cmp	r3, r5
 800455e:	dc26      	bgt.n	80045ae <_printf_common+0x96>
 8004560:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004564:	6822      	ldr	r2, [r4, #0]
 8004566:	3b00      	subs	r3, #0
 8004568:	bf18      	it	ne
 800456a:	2301      	movne	r3, #1
 800456c:	0692      	lsls	r2, r2, #26
 800456e:	d42b      	bmi.n	80045c8 <_printf_common+0xb0>
 8004570:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004574:	4641      	mov	r1, r8
 8004576:	4638      	mov	r0, r7
 8004578:	47c8      	blx	r9
 800457a:	3001      	adds	r0, #1
 800457c:	d01e      	beq.n	80045bc <_printf_common+0xa4>
 800457e:	6823      	ldr	r3, [r4, #0]
 8004580:	6922      	ldr	r2, [r4, #16]
 8004582:	f003 0306 	and.w	r3, r3, #6
 8004586:	2b04      	cmp	r3, #4
 8004588:	bf02      	ittt	eq
 800458a:	68e5      	ldreq	r5, [r4, #12]
 800458c:	6833      	ldreq	r3, [r6, #0]
 800458e:	1aed      	subeq	r5, r5, r3
 8004590:	68a3      	ldr	r3, [r4, #8]
 8004592:	bf0c      	ite	eq
 8004594:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004598:	2500      	movne	r5, #0
 800459a:	4293      	cmp	r3, r2
 800459c:	bfc4      	itt	gt
 800459e:	1a9b      	subgt	r3, r3, r2
 80045a0:	18ed      	addgt	r5, r5, r3
 80045a2:	2600      	movs	r6, #0
 80045a4:	341a      	adds	r4, #26
 80045a6:	42b5      	cmp	r5, r6
 80045a8:	d11a      	bne.n	80045e0 <_printf_common+0xc8>
 80045aa:	2000      	movs	r0, #0
 80045ac:	e008      	b.n	80045c0 <_printf_common+0xa8>
 80045ae:	2301      	movs	r3, #1
 80045b0:	4652      	mov	r2, sl
 80045b2:	4641      	mov	r1, r8
 80045b4:	4638      	mov	r0, r7
 80045b6:	47c8      	blx	r9
 80045b8:	3001      	adds	r0, #1
 80045ba:	d103      	bne.n	80045c4 <_printf_common+0xac>
 80045bc:	f04f 30ff 	mov.w	r0, #4294967295
 80045c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045c4:	3501      	adds	r5, #1
 80045c6:	e7c6      	b.n	8004556 <_printf_common+0x3e>
 80045c8:	18e1      	adds	r1, r4, r3
 80045ca:	1c5a      	adds	r2, r3, #1
 80045cc:	2030      	movs	r0, #48	@ 0x30
 80045ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80045d2:	4422      	add	r2, r4
 80045d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80045d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80045dc:	3302      	adds	r3, #2
 80045de:	e7c7      	b.n	8004570 <_printf_common+0x58>
 80045e0:	2301      	movs	r3, #1
 80045e2:	4622      	mov	r2, r4
 80045e4:	4641      	mov	r1, r8
 80045e6:	4638      	mov	r0, r7
 80045e8:	47c8      	blx	r9
 80045ea:	3001      	adds	r0, #1
 80045ec:	d0e6      	beq.n	80045bc <_printf_common+0xa4>
 80045ee:	3601      	adds	r6, #1
 80045f0:	e7d9      	b.n	80045a6 <_printf_common+0x8e>
	...

080045f4 <_printf_i>:
 80045f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045f8:	7e0f      	ldrb	r7, [r1, #24]
 80045fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80045fc:	2f78      	cmp	r7, #120	@ 0x78
 80045fe:	4691      	mov	r9, r2
 8004600:	4680      	mov	r8, r0
 8004602:	460c      	mov	r4, r1
 8004604:	469a      	mov	sl, r3
 8004606:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800460a:	d807      	bhi.n	800461c <_printf_i+0x28>
 800460c:	2f62      	cmp	r7, #98	@ 0x62
 800460e:	d80a      	bhi.n	8004626 <_printf_i+0x32>
 8004610:	2f00      	cmp	r7, #0
 8004612:	f000 80d2 	beq.w	80047ba <_printf_i+0x1c6>
 8004616:	2f58      	cmp	r7, #88	@ 0x58
 8004618:	f000 80b9 	beq.w	800478e <_printf_i+0x19a>
 800461c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004620:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004624:	e03a      	b.n	800469c <_printf_i+0xa8>
 8004626:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800462a:	2b15      	cmp	r3, #21
 800462c:	d8f6      	bhi.n	800461c <_printf_i+0x28>
 800462e:	a101      	add	r1, pc, #4	@ (adr r1, 8004634 <_printf_i+0x40>)
 8004630:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004634:	0800468d 	.word	0x0800468d
 8004638:	080046a1 	.word	0x080046a1
 800463c:	0800461d 	.word	0x0800461d
 8004640:	0800461d 	.word	0x0800461d
 8004644:	0800461d 	.word	0x0800461d
 8004648:	0800461d 	.word	0x0800461d
 800464c:	080046a1 	.word	0x080046a1
 8004650:	0800461d 	.word	0x0800461d
 8004654:	0800461d 	.word	0x0800461d
 8004658:	0800461d 	.word	0x0800461d
 800465c:	0800461d 	.word	0x0800461d
 8004660:	080047a1 	.word	0x080047a1
 8004664:	080046cb 	.word	0x080046cb
 8004668:	0800475b 	.word	0x0800475b
 800466c:	0800461d 	.word	0x0800461d
 8004670:	0800461d 	.word	0x0800461d
 8004674:	080047c3 	.word	0x080047c3
 8004678:	0800461d 	.word	0x0800461d
 800467c:	080046cb 	.word	0x080046cb
 8004680:	0800461d 	.word	0x0800461d
 8004684:	0800461d 	.word	0x0800461d
 8004688:	08004763 	.word	0x08004763
 800468c:	6833      	ldr	r3, [r6, #0]
 800468e:	1d1a      	adds	r2, r3, #4
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6032      	str	r2, [r6, #0]
 8004694:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004698:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800469c:	2301      	movs	r3, #1
 800469e:	e09d      	b.n	80047dc <_printf_i+0x1e8>
 80046a0:	6833      	ldr	r3, [r6, #0]
 80046a2:	6820      	ldr	r0, [r4, #0]
 80046a4:	1d19      	adds	r1, r3, #4
 80046a6:	6031      	str	r1, [r6, #0]
 80046a8:	0606      	lsls	r6, r0, #24
 80046aa:	d501      	bpl.n	80046b0 <_printf_i+0xbc>
 80046ac:	681d      	ldr	r5, [r3, #0]
 80046ae:	e003      	b.n	80046b8 <_printf_i+0xc4>
 80046b0:	0645      	lsls	r5, r0, #25
 80046b2:	d5fb      	bpl.n	80046ac <_printf_i+0xb8>
 80046b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80046b8:	2d00      	cmp	r5, #0
 80046ba:	da03      	bge.n	80046c4 <_printf_i+0xd0>
 80046bc:	232d      	movs	r3, #45	@ 0x2d
 80046be:	426d      	negs	r5, r5
 80046c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046c4:	4859      	ldr	r0, [pc, #356]	@ (800482c <_printf_i+0x238>)
 80046c6:	230a      	movs	r3, #10
 80046c8:	e011      	b.n	80046ee <_printf_i+0xfa>
 80046ca:	6821      	ldr	r1, [r4, #0]
 80046cc:	6833      	ldr	r3, [r6, #0]
 80046ce:	0608      	lsls	r0, r1, #24
 80046d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80046d4:	d402      	bmi.n	80046dc <_printf_i+0xe8>
 80046d6:	0649      	lsls	r1, r1, #25
 80046d8:	bf48      	it	mi
 80046da:	b2ad      	uxthmi	r5, r5
 80046dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80046de:	4853      	ldr	r0, [pc, #332]	@ (800482c <_printf_i+0x238>)
 80046e0:	6033      	str	r3, [r6, #0]
 80046e2:	bf14      	ite	ne
 80046e4:	230a      	movne	r3, #10
 80046e6:	2308      	moveq	r3, #8
 80046e8:	2100      	movs	r1, #0
 80046ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80046ee:	6866      	ldr	r6, [r4, #4]
 80046f0:	60a6      	str	r6, [r4, #8]
 80046f2:	2e00      	cmp	r6, #0
 80046f4:	bfa2      	ittt	ge
 80046f6:	6821      	ldrge	r1, [r4, #0]
 80046f8:	f021 0104 	bicge.w	r1, r1, #4
 80046fc:	6021      	strge	r1, [r4, #0]
 80046fe:	b90d      	cbnz	r5, 8004704 <_printf_i+0x110>
 8004700:	2e00      	cmp	r6, #0
 8004702:	d04b      	beq.n	800479c <_printf_i+0x1a8>
 8004704:	4616      	mov	r6, r2
 8004706:	fbb5 f1f3 	udiv	r1, r5, r3
 800470a:	fb03 5711 	mls	r7, r3, r1, r5
 800470e:	5dc7      	ldrb	r7, [r0, r7]
 8004710:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004714:	462f      	mov	r7, r5
 8004716:	42bb      	cmp	r3, r7
 8004718:	460d      	mov	r5, r1
 800471a:	d9f4      	bls.n	8004706 <_printf_i+0x112>
 800471c:	2b08      	cmp	r3, #8
 800471e:	d10b      	bne.n	8004738 <_printf_i+0x144>
 8004720:	6823      	ldr	r3, [r4, #0]
 8004722:	07df      	lsls	r7, r3, #31
 8004724:	d508      	bpl.n	8004738 <_printf_i+0x144>
 8004726:	6923      	ldr	r3, [r4, #16]
 8004728:	6861      	ldr	r1, [r4, #4]
 800472a:	4299      	cmp	r1, r3
 800472c:	bfde      	ittt	le
 800472e:	2330      	movle	r3, #48	@ 0x30
 8004730:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004734:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004738:	1b92      	subs	r2, r2, r6
 800473a:	6122      	str	r2, [r4, #16]
 800473c:	f8cd a000 	str.w	sl, [sp]
 8004740:	464b      	mov	r3, r9
 8004742:	aa03      	add	r2, sp, #12
 8004744:	4621      	mov	r1, r4
 8004746:	4640      	mov	r0, r8
 8004748:	f7ff fee6 	bl	8004518 <_printf_common>
 800474c:	3001      	adds	r0, #1
 800474e:	d14a      	bne.n	80047e6 <_printf_i+0x1f2>
 8004750:	f04f 30ff 	mov.w	r0, #4294967295
 8004754:	b004      	add	sp, #16
 8004756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800475a:	6823      	ldr	r3, [r4, #0]
 800475c:	f043 0320 	orr.w	r3, r3, #32
 8004760:	6023      	str	r3, [r4, #0]
 8004762:	4833      	ldr	r0, [pc, #204]	@ (8004830 <_printf_i+0x23c>)
 8004764:	2778      	movs	r7, #120	@ 0x78
 8004766:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800476a:	6823      	ldr	r3, [r4, #0]
 800476c:	6831      	ldr	r1, [r6, #0]
 800476e:	061f      	lsls	r7, r3, #24
 8004770:	f851 5b04 	ldr.w	r5, [r1], #4
 8004774:	d402      	bmi.n	800477c <_printf_i+0x188>
 8004776:	065f      	lsls	r7, r3, #25
 8004778:	bf48      	it	mi
 800477a:	b2ad      	uxthmi	r5, r5
 800477c:	6031      	str	r1, [r6, #0]
 800477e:	07d9      	lsls	r1, r3, #31
 8004780:	bf44      	itt	mi
 8004782:	f043 0320 	orrmi.w	r3, r3, #32
 8004786:	6023      	strmi	r3, [r4, #0]
 8004788:	b11d      	cbz	r5, 8004792 <_printf_i+0x19e>
 800478a:	2310      	movs	r3, #16
 800478c:	e7ac      	b.n	80046e8 <_printf_i+0xf4>
 800478e:	4827      	ldr	r0, [pc, #156]	@ (800482c <_printf_i+0x238>)
 8004790:	e7e9      	b.n	8004766 <_printf_i+0x172>
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	f023 0320 	bic.w	r3, r3, #32
 8004798:	6023      	str	r3, [r4, #0]
 800479a:	e7f6      	b.n	800478a <_printf_i+0x196>
 800479c:	4616      	mov	r6, r2
 800479e:	e7bd      	b.n	800471c <_printf_i+0x128>
 80047a0:	6833      	ldr	r3, [r6, #0]
 80047a2:	6825      	ldr	r5, [r4, #0]
 80047a4:	6961      	ldr	r1, [r4, #20]
 80047a6:	1d18      	adds	r0, r3, #4
 80047a8:	6030      	str	r0, [r6, #0]
 80047aa:	062e      	lsls	r6, r5, #24
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	d501      	bpl.n	80047b4 <_printf_i+0x1c0>
 80047b0:	6019      	str	r1, [r3, #0]
 80047b2:	e002      	b.n	80047ba <_printf_i+0x1c6>
 80047b4:	0668      	lsls	r0, r5, #25
 80047b6:	d5fb      	bpl.n	80047b0 <_printf_i+0x1bc>
 80047b8:	8019      	strh	r1, [r3, #0]
 80047ba:	2300      	movs	r3, #0
 80047bc:	6123      	str	r3, [r4, #16]
 80047be:	4616      	mov	r6, r2
 80047c0:	e7bc      	b.n	800473c <_printf_i+0x148>
 80047c2:	6833      	ldr	r3, [r6, #0]
 80047c4:	1d1a      	adds	r2, r3, #4
 80047c6:	6032      	str	r2, [r6, #0]
 80047c8:	681e      	ldr	r6, [r3, #0]
 80047ca:	6862      	ldr	r2, [r4, #4]
 80047cc:	2100      	movs	r1, #0
 80047ce:	4630      	mov	r0, r6
 80047d0:	f7fb fd26 	bl	8000220 <memchr>
 80047d4:	b108      	cbz	r0, 80047da <_printf_i+0x1e6>
 80047d6:	1b80      	subs	r0, r0, r6
 80047d8:	6060      	str	r0, [r4, #4]
 80047da:	6863      	ldr	r3, [r4, #4]
 80047dc:	6123      	str	r3, [r4, #16]
 80047de:	2300      	movs	r3, #0
 80047e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047e4:	e7aa      	b.n	800473c <_printf_i+0x148>
 80047e6:	6923      	ldr	r3, [r4, #16]
 80047e8:	4632      	mov	r2, r6
 80047ea:	4649      	mov	r1, r9
 80047ec:	4640      	mov	r0, r8
 80047ee:	47d0      	blx	sl
 80047f0:	3001      	adds	r0, #1
 80047f2:	d0ad      	beq.n	8004750 <_printf_i+0x15c>
 80047f4:	6823      	ldr	r3, [r4, #0]
 80047f6:	079b      	lsls	r3, r3, #30
 80047f8:	d413      	bmi.n	8004822 <_printf_i+0x22e>
 80047fa:	68e0      	ldr	r0, [r4, #12]
 80047fc:	9b03      	ldr	r3, [sp, #12]
 80047fe:	4298      	cmp	r0, r3
 8004800:	bfb8      	it	lt
 8004802:	4618      	movlt	r0, r3
 8004804:	e7a6      	b.n	8004754 <_printf_i+0x160>
 8004806:	2301      	movs	r3, #1
 8004808:	4632      	mov	r2, r6
 800480a:	4649      	mov	r1, r9
 800480c:	4640      	mov	r0, r8
 800480e:	47d0      	blx	sl
 8004810:	3001      	adds	r0, #1
 8004812:	d09d      	beq.n	8004750 <_printf_i+0x15c>
 8004814:	3501      	adds	r5, #1
 8004816:	68e3      	ldr	r3, [r4, #12]
 8004818:	9903      	ldr	r1, [sp, #12]
 800481a:	1a5b      	subs	r3, r3, r1
 800481c:	42ab      	cmp	r3, r5
 800481e:	dcf2      	bgt.n	8004806 <_printf_i+0x212>
 8004820:	e7eb      	b.n	80047fa <_printf_i+0x206>
 8004822:	2500      	movs	r5, #0
 8004824:	f104 0619 	add.w	r6, r4, #25
 8004828:	e7f5      	b.n	8004816 <_printf_i+0x222>
 800482a:	bf00      	nop
 800482c:	080049a9 	.word	0x080049a9
 8004830:	080049ba 	.word	0x080049ba

08004834 <memmove>:
 8004834:	4288      	cmp	r0, r1
 8004836:	b510      	push	{r4, lr}
 8004838:	eb01 0402 	add.w	r4, r1, r2
 800483c:	d902      	bls.n	8004844 <memmove+0x10>
 800483e:	4284      	cmp	r4, r0
 8004840:	4623      	mov	r3, r4
 8004842:	d807      	bhi.n	8004854 <memmove+0x20>
 8004844:	1e43      	subs	r3, r0, #1
 8004846:	42a1      	cmp	r1, r4
 8004848:	d008      	beq.n	800485c <memmove+0x28>
 800484a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800484e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004852:	e7f8      	b.n	8004846 <memmove+0x12>
 8004854:	4402      	add	r2, r0
 8004856:	4601      	mov	r1, r0
 8004858:	428a      	cmp	r2, r1
 800485a:	d100      	bne.n	800485e <memmove+0x2a>
 800485c:	bd10      	pop	{r4, pc}
 800485e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004862:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004866:	e7f7      	b.n	8004858 <memmove+0x24>

08004868 <_sbrk_r>:
 8004868:	b538      	push	{r3, r4, r5, lr}
 800486a:	4d06      	ldr	r5, [pc, #24]	@ (8004884 <_sbrk_r+0x1c>)
 800486c:	2300      	movs	r3, #0
 800486e:	4604      	mov	r4, r0
 8004870:	4608      	mov	r0, r1
 8004872:	602b      	str	r3, [r5, #0]
 8004874:	f7fc fa7a 	bl	8000d6c <_sbrk>
 8004878:	1c43      	adds	r3, r0, #1
 800487a:	d102      	bne.n	8004882 <_sbrk_r+0x1a>
 800487c:	682b      	ldr	r3, [r5, #0]
 800487e:	b103      	cbz	r3, 8004882 <_sbrk_r+0x1a>
 8004880:	6023      	str	r3, [r4, #0]
 8004882:	bd38      	pop	{r3, r4, r5, pc}
 8004884:	200029f0 	.word	0x200029f0

08004888 <memcpy>:
 8004888:	440a      	add	r2, r1
 800488a:	4291      	cmp	r1, r2
 800488c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004890:	d100      	bne.n	8004894 <memcpy+0xc>
 8004892:	4770      	bx	lr
 8004894:	b510      	push	{r4, lr}
 8004896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800489a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800489e:	4291      	cmp	r1, r2
 80048a0:	d1f9      	bne.n	8004896 <memcpy+0xe>
 80048a2:	bd10      	pop	{r4, pc}

080048a4 <_realloc_r>:
 80048a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048a8:	4680      	mov	r8, r0
 80048aa:	4615      	mov	r5, r2
 80048ac:	460c      	mov	r4, r1
 80048ae:	b921      	cbnz	r1, 80048ba <_realloc_r+0x16>
 80048b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048b4:	4611      	mov	r1, r2
 80048b6:	f7ff bc4b 	b.w	8004150 <_malloc_r>
 80048ba:	b92a      	cbnz	r2, 80048c8 <_realloc_r+0x24>
 80048bc:	f7ff fbdc 	bl	8004078 <_free_r>
 80048c0:	2400      	movs	r4, #0
 80048c2:	4620      	mov	r0, r4
 80048c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048c8:	f000 f81a 	bl	8004900 <_malloc_usable_size_r>
 80048cc:	4285      	cmp	r5, r0
 80048ce:	4606      	mov	r6, r0
 80048d0:	d802      	bhi.n	80048d8 <_realloc_r+0x34>
 80048d2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80048d6:	d8f4      	bhi.n	80048c2 <_realloc_r+0x1e>
 80048d8:	4629      	mov	r1, r5
 80048da:	4640      	mov	r0, r8
 80048dc:	f7ff fc38 	bl	8004150 <_malloc_r>
 80048e0:	4607      	mov	r7, r0
 80048e2:	2800      	cmp	r0, #0
 80048e4:	d0ec      	beq.n	80048c0 <_realloc_r+0x1c>
 80048e6:	42b5      	cmp	r5, r6
 80048e8:	462a      	mov	r2, r5
 80048ea:	4621      	mov	r1, r4
 80048ec:	bf28      	it	cs
 80048ee:	4632      	movcs	r2, r6
 80048f0:	f7ff ffca 	bl	8004888 <memcpy>
 80048f4:	4621      	mov	r1, r4
 80048f6:	4640      	mov	r0, r8
 80048f8:	f7ff fbbe 	bl	8004078 <_free_r>
 80048fc:	463c      	mov	r4, r7
 80048fe:	e7e0      	b.n	80048c2 <_realloc_r+0x1e>

08004900 <_malloc_usable_size_r>:
 8004900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004904:	1f18      	subs	r0, r3, #4
 8004906:	2b00      	cmp	r3, #0
 8004908:	bfbc      	itt	lt
 800490a:	580b      	ldrlt	r3, [r1, r0]
 800490c:	18c0      	addlt	r0, r0, r3
 800490e:	4770      	bx	lr

08004910 <_init>:
 8004910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004912:	bf00      	nop
 8004914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004916:	bc08      	pop	{r3}
 8004918:	469e      	mov	lr, r3
 800491a:	4770      	bx	lr

0800491c <_fini>:
 800491c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800491e:	bf00      	nop
 8004920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004922:	bc08      	pop	{r3}
 8004924:	469e      	mov	lr, r3
 8004926:	4770      	bx	lr
