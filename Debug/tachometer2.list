
tachometer2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004788  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08004958  08004958  00005958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049f8  080049f8  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  080049f8  080049f8  000059f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a00  08004a00  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a00  08004a00  00005a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a04  08004a04  00005a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004a08  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009ed0  2000005c  08004a64  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009f2c  08004a64  00006f2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dba6  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023b8  00000000  00000000  00013c32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  00015ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a4c  00000000  00000000  00016d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021ca8  00000000  00000000  00017784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d2a  00000000  00000000  0003942c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf4aa  00000000  00000000  0004a156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00119600  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b7c  00000000  00000000  00119644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0011d1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004940 	.word	0x08004940

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08004940 	.word	0x08004940

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <tachometer_init>:
static uint32_t time1;
static uint32_t time2;
char message[100];
char byte_received;
void tachometer_init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	disable_tim_interrupts();
 80005b4:	f000 fd30 	bl	8001018 <disable_tim_interrupts>
	disable_gpio_interrupts();
 80005b8:	f000 f9f9 	bl	80009ae <disable_gpio_interrupts>
	current_state = TAC_POLLING_TRIGGER;
 80005bc:	4b0b      	ldr	r3, [pc, #44]	@ (80005ec <tachometer_init+0x3c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
	tachometer_entry_action(TAC_POLLING_TRIGGER);
 80005c2:	2000      	movs	r0, #0
 80005c4:	f000 f8c8 	bl	8000758 <tachometer_entry_action>
	evento = TRIGGER_OFF;
 80005c8:	4b09      	ldr	r3, [pc, #36]	@ (80005f0 <tachometer_init+0x40>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	701a      	strb	r2, [r3, #0]
	time_elapsed = 0;
 80005ce:	4b09      	ldr	r3, [pc, #36]	@ (80005f4 <tachometer_init+0x44>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
	time1 = 0;
 80005d4:	4b08      	ldr	r3, [pc, #32]	@ (80005f8 <tachometer_init+0x48>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
	time2= 0;
 80005da:	4b08      	ldr	r3, [pc, #32]	@ (80005fc <tachometer_init+0x4c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
	byte_received = '0';
 80005e0:	4b07      	ldr	r3, [pc, #28]	@ (8000600 <tachometer_init+0x50>)
 80005e2:	2230      	movs	r2, #48	@ 0x30
 80005e4:	701a      	strb	r2, [r3, #0]

}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20009cbc 	.word	0x20009cbc
 80005f0:	20009cbd 	.word	0x20009cbd
 80005f4:	20009cc0 	.word	0x20009cc0
 80005f8:	20009cc4 	.word	0x20009cc4
 80005fc:	20009cc8 	.word	0x20009cc8
 8000600:	20009d30 	.word	0x20009d30

08000604 <tachometer_state_machine>:

void tachometer_state_machine(tachometer_event_t event)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
	tachometer_state_t prev_state;
	prev_state = current_state;
 800060e:	4b4b      	ldr	r3, [pc, #300]	@ (800073c <tachometer_state_machine+0x138>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	73fb      	strb	r3, [r7, #15]
	switch (current_state) {
 8000614:	4b49      	ldr	r3, [pc, #292]	@ (800073c <tachometer_state_machine+0x138>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b03      	cmp	r3, #3
 800061a:	f200 8080 	bhi.w	800071e <tachometer_state_machine+0x11a>
 800061e:	a201      	add	r2, pc, #4	@ (adr r2, 8000624 <tachometer_state_machine+0x20>)
 8000620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000624:	08000635 	.word	0x08000635
 8000628:	08000647 	.word	0x08000647
 800062c:	0800069d 	.word	0x0800069d
 8000630:	080006d5 	.word	0x080006d5
		case TAC_POLLING_TRIGGER:
			switch (event) {
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	2b01      	cmp	r3, #1
 8000638:	d103      	bne.n	8000642 <tachometer_state_machine+0x3e>
				case TRIGGER_ON:
					current_state = TAC_MEASURE;
 800063a:	4b40      	ldr	r3, [pc, #256]	@ (800073c <tachometer_state_machine+0x138>)
 800063c:	2201      	movs	r2, #1
 800063e:	701a      	strb	r2, [r3, #0]
					break;
 8000640:	e000      	b.n	8000644 <tachometer_state_machine+0x40>
				default:
					break;
 8000642:	bf00      	nop
			}
			break;
 8000644:	e06c      	b.n	8000720 <tachometer_state_machine+0x11c>
		case TAC_MEASURE:
			switch (event) {
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d005      	beq.n	8000658 <tachometer_state_machine+0x54>
 800064c:	2b02      	cmp	r3, #2
 800064e:	d123      	bne.n	8000698 <tachometer_state_machine+0x94>
				case FULL_BUFFER:
					current_state = TAC_WAIT_TRANSMIT;
 8000650:	4b3a      	ldr	r3, [pc, #232]	@ (800073c <tachometer_state_machine+0x138>)
 8000652:	2202      	movs	r2, #2
 8000654:	701a      	strb	r2, [r3, #0]
					break;
 8000656:	e020      	b.n	800069a <tachometer_state_machine+0x96>
				case TRIGGER_ON:
					if (! enqueue(&buffer, get_frequency()))
 8000658:	f000 fcd2 	bl	8001000 <get_frequency>
 800065c:	4603      	mov	r3, r0
 800065e:	4619      	mov	r1, r3
 8000660:	4837      	ldr	r0, [pc, #220]	@ (8000740 <tachometer_state_machine+0x13c>)
 8000662:	f000 fa7d 	bl	8000b60 <enqueue>
 8000666:	4603      	mov	r3, r0
 8000668:	f083 0301 	eor.w	r3, r3, #1
 800066c:	b2db      	uxtb	r3, r3
 800066e:	2b00      	cmp	r3, #0
 8000670:	d007      	beq.n	8000682 <tachometer_state_machine+0x7e>
					{
						evento = FULL_BUFFER;
 8000672:	4b34      	ldr	r3, [pc, #208]	@ (8000744 <tachometer_state_machine+0x140>)
 8000674:	2202      	movs	r2, #2
 8000676:	701a      	strb	r2, [r3, #0]
						time2 = HAL_GetTick();
 8000678:	f000 fe48 	bl	800130c <HAL_GetTick>
 800067c:	4603      	mov	r3, r0
 800067e:	4a32      	ldr	r2, [pc, #200]	@ (8000748 <tachometer_state_machine+0x144>)
 8000680:	6013      	str	r3, [r2, #0]
					}
					time_elapsed = time2 - time1;
 8000682:	4b31      	ldr	r3, [pc, #196]	@ (8000748 <tachometer_state_machine+0x144>)
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	4b31      	ldr	r3, [pc, #196]	@ (800074c <tachometer_state_machine+0x148>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	1ad3      	subs	r3, r2, r3
 800068c:	4a30      	ldr	r2, [pc, #192]	@ (8000750 <tachometer_state_machine+0x14c>)
 800068e:	6013      	str	r3, [r2, #0]
					HAL_Delay(MUESTREO_MS);
 8000690:	2001      	movs	r0, #1
 8000692:	f000 fe47 	bl	8001324 <HAL_Delay>


					break;
 8000696:	e000      	b.n	800069a <tachometer_state_machine+0x96>
				default:
					break;
 8000698:	bf00      	nop
			}
			break;
 800069a:	e041      	b.n	8000720 <tachometer_state_machine+0x11c>
		case TAC_WAIT_TRANSMIT:
			switch (event) {
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	2b02      	cmp	r3, #2
 80006a0:	d005      	beq.n	80006ae <tachometer_state_machine+0xaa>
 80006a2:	2b03      	cmp	r3, #3
 80006a4:	d114      	bne.n	80006d0 <tachometer_state_machine+0xcc>
				case SERIAL_RECEIVED:
					current_state = TAC_TRANSMIT;
 80006a6:	4b25      	ldr	r3, [pc, #148]	@ (800073c <tachometer_state_machine+0x138>)
 80006a8:	2203      	movs	r2, #3
 80006aa:	701a      	strb	r2, [r3, #0]
					break;
 80006ac:	e011      	b.n	80006d2 <tachometer_state_machine+0xce>
				case FULL_BUFFER:
					byte_received = receive_byte();
 80006ae:	f000 fd41 	bl	8001134 <receive_byte>
 80006b2:	4603      	mov	r3, r0
 80006b4:	461a      	mov	r2, r3
 80006b6:	4b27      	ldr	r3, [pc, #156]	@ (8000754 <tachometer_state_machine+0x150>)
 80006b8:	701a      	strb	r2, [r3, #0]
					if (byte_received == 'x' || byte_received == 'X' )
 80006ba:	4b26      	ldr	r3, [pc, #152]	@ (8000754 <tachometer_state_machine+0x150>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b78      	cmp	r3, #120	@ 0x78
 80006c0:	d003      	beq.n	80006ca <tachometer_state_machine+0xc6>
 80006c2:	4b24      	ldr	r3, [pc, #144]	@ (8000754 <tachometer_state_machine+0x150>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2b58      	cmp	r3, #88	@ 0x58
 80006c8:	d102      	bne.n	80006d0 <tachometer_state_machine+0xcc>
					{
						evento = SERIAL_RECEIVED;
 80006ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000744 <tachometer_state_machine+0x140>)
 80006cc:	2203      	movs	r2, #3
 80006ce:	701a      	strb	r2, [r3, #0]

					}
				default:
					break;
 80006d0:	bf00      	nop
			}
			break;
 80006d2:	e025      	b.n	8000720 <tachometer_state_machine+0x11c>
		case TAC_TRANSMIT:
			switch (event) {
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	2b03      	cmp	r3, #3
 80006d8:	d004      	beq.n	80006e4 <tachometer_state_machine+0xe0>
 80006da:	2b04      	cmp	r3, #4
 80006dc:	d11b      	bne.n	8000716 <tachometer_state_machine+0x112>
				case EMPTY_BUFFER:
					current_state = TAC_POLLING_TRIGGER;
 80006de:	4b17      	ldr	r3, [pc, #92]	@ (800073c <tachometer_state_machine+0x138>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]
				case SERIAL_RECEIVED:
					send_value(buffer.data[buffer.head]);
 80006e4:	4b16      	ldr	r3, [pc, #88]	@ (8000740 <tachometer_state_machine+0x13c>)
 80006e6:	f503 4310 	add.w	r3, r3, #36864	@ 0x9000
 80006ea:	f8b3 3c40 	ldrh.w	r3, [r3, #3136]	@ 0xc40
 80006ee:	461a      	mov	r2, r3
 80006f0:	4b13      	ldr	r3, [pc, #76]	@ (8000740 <tachometer_state_machine+0x13c>)
 80006f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 fd58 	bl	80011ac <send_value>
					if(!dequeue(&buffer))
 80006fc:	4810      	ldr	r0, [pc, #64]	@ (8000740 <tachometer_state_machine+0x13c>)
 80006fe:	f000 fa71 	bl	8000be4 <dequeue>
 8000702:	4603      	mov	r3, r0
 8000704:	f083 0301 	eor.w	r3, r3, #1
 8000708:	b2db      	uxtb	r3, r3
 800070a:	2b00      	cmp	r3, #0
 800070c:	d005      	beq.n	800071a <tachometer_state_machine+0x116>
					{
						evento = EMPTY_BUFFER;
 800070e:	4b0d      	ldr	r3, [pc, #52]	@ (8000744 <tachometer_state_machine+0x140>)
 8000710:	2204      	movs	r2, #4
 8000712:	701a      	strb	r2, [r3, #0]
					}

					break;
 8000714:	e001      	b.n	800071a <tachometer_state_machine+0x116>
				default:
					break;
 8000716:	bf00      	nop
 8000718:	e002      	b.n	8000720 <tachometer_state_machine+0x11c>
					break;
 800071a:	bf00      	nop
			}
			break;
 800071c:	e000      	b.n	8000720 <tachometer_state_machine+0x11c>
		default:
			break;
 800071e:	bf00      	nop
	}

	if(prev_state != current_state)
 8000720:	4b06      	ldr	r3, [pc, #24]	@ (800073c <tachometer_state_machine+0x138>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	7bfa      	ldrb	r2, [r7, #15]
 8000726:	429a      	cmp	r2, r3
 8000728:	d004      	beq.n	8000734 <tachometer_state_machine+0x130>
	{
		tachometer_entry_action(current_state);
 800072a:	4b04      	ldr	r3, [pc, #16]	@ (800073c <tachometer_state_machine+0x138>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	4618      	mov	r0, r3
 8000730:	f000 f812 	bl	8000758 <tachometer_entry_action>
	}

}
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20009cbc 	.word	0x20009cbc
 8000740:	20000078 	.word	0x20000078
 8000744:	20009cbd 	.word	0x20009cbd
 8000748:	20009cc8 	.word	0x20009cc8
 800074c:	20009cc4 	.word	0x20009cc4
 8000750:	20009cc0 	.word	0x20009cc0
 8000754:	20009d30 	.word	0x20009d30

08000758 <tachometer_entry_action>:

void tachometer_entry_action(tachometer_state_t state)
{
 8000758:	b590      	push	{r4, r7, lr}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
	switch (state) {
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	2b03      	cmp	r3, #3
 8000766:	d827      	bhi.n	80007b8 <tachometer_entry_action+0x60>
 8000768:	a201      	add	r2, pc, #4	@ (adr r2, 8000770 <tachometer_entry_action+0x18>)
 800076a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800076e:	bf00      	nop
 8000770:	08000781 	.word	0x08000781
 8000774:	08000793 	.word	0x08000793
 8000778:	080007a3 	.word	0x080007a3
 800077c:	080007b9 	.word	0x080007b9
		case TAC_POLLING_TRIGGER:
			init_ring_buffer(&buffer);
 8000780:	4810      	ldr	r0, [pc, #64]	@ (80007c4 <tachometer_entry_action+0x6c>)
 8000782:	f000 f9ad 	bl	8000ae0 <init_ring_buffer>
			enable_gpio_interrupts();
 8000786:	f000 f90b 	bl	80009a0 <enable_gpio_interrupts>
			evento = TRIGGER_OFF;
 800078a:	4b0f      	ldr	r3, [pc, #60]	@ (80007c8 <tachometer_entry_action+0x70>)
 800078c:	2200      	movs	r2, #0
 800078e:	701a      	strb	r2, [r3, #0]

			break;
 8000790:	e013      	b.n	80007ba <tachometer_entry_action+0x62>
		case TAC_MEASURE:
			enable_tim_interrupts();
 8000792:	f000 fc4f 	bl	8001034 <enable_tim_interrupts>
			time1 = HAL_GetTick();
 8000796:	f000 fdb9 	bl	800130c <HAL_GetTick>
 800079a:	4603      	mov	r3, r0
 800079c:	4a0b      	ldr	r2, [pc, #44]	@ (80007cc <tachometer_entry_action+0x74>)
 800079e:	6013      	str	r3, [r2, #0]
			break;
 80007a0:	e00b      	b.n	80007ba <tachometer_entry_action+0x62>
		case TAC_WAIT_TRANSMIT:
			data_ready(time_elapsed, (uint8_t) MUESTREO_MS, get_buffer_size(), message);
 80007a2:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <tachometer_entry_action+0x78>)
 80007a4:	681c      	ldr	r4, [r3, #0]
 80007a6:	f000 fa53 	bl	8000c50 <get_buffer_size>
 80007aa:	4602      	mov	r2, r0
 80007ac:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <tachometer_entry_action+0x7c>)
 80007ae:	2101      	movs	r1, #1
 80007b0:	4620      	mov	r0, r4
 80007b2:	f000 fcd7 	bl	8001164 <data_ready>

			break;
 80007b6:	e000      	b.n	80007ba <tachometer_entry_action+0x62>
		case TAC_TRANSMIT:

			break;
		default:
			break;
 80007b8:	bf00      	nop
	}

}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd90      	pop	{r4, r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000078 	.word	0x20000078
 80007c8:	20009cbd 	.word	0x20009cbd
 80007cc:	20009cc4 	.word	0x20009cc4
 80007d0:	20009cc0 	.word	0x20009cc0
 80007d4:	20009ccc 	.word	0x20009ccc

080007d8 <read_event>:

tachometer_event_t read_event(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
	return evento;
 80007dc:	4b03      	ldr	r3, [pc, #12]	@ (80007ec <read_event+0x14>)
 80007de:	781b      	ldrb	r3, [r3, #0]

}
 80007e0:	4618      	mov	r0, r3
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	20009cbd 	.word	0x20009cbd

080007f0 <modify_event>:

void modify_event(tachometer_event_t event)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	71fb      	strb	r3, [r7, #7]
	evento = event;
 80007fa:	4a04      	ldr	r2, [pc, #16]	@ (800080c <modify_event+0x1c>)
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	7013      	strb	r3, [r2, #0]
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	20009cbd 	.word	0x20009cbd

08000810 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	@ 0x28
 8000814:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	4b52      	ldr	r3, [pc, #328]	@ (8000974 <MX_GPIO_Init+0x164>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a51      	ldr	r2, [pc, #324]	@ (8000974 <MX_GPIO_Init+0x164>)
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b4f      	ldr	r3, [pc, #316]	@ (8000974 <MX_GPIO_Init+0x164>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0304 	and.w	r3, r3, #4
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	4b4b      	ldr	r3, [pc, #300]	@ (8000974 <MX_GPIO_Init+0x164>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a4a      	ldr	r2, [pc, #296]	@ (8000974 <MX_GPIO_Init+0x164>)
 800084c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b48      	ldr	r3, [pc, #288]	@ (8000974 <MX_GPIO_Init+0x164>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	4b44      	ldr	r3, [pc, #272]	@ (8000974 <MX_GPIO_Init+0x164>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a43      	ldr	r2, [pc, #268]	@ (8000974 <MX_GPIO_Init+0x164>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b41      	ldr	r3, [pc, #260]	@ (8000974 <MX_GPIO_Init+0x164>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b3d      	ldr	r3, [pc, #244]	@ (8000974 <MX_GPIO_Init+0x164>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a3c      	ldr	r2, [pc, #240]	@ (8000974 <MX_GPIO_Init+0x164>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b3a      	ldr	r3, [pc, #232]	@ (8000974 <MX_GPIO_Init+0x164>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	4b36      	ldr	r3, [pc, #216]	@ (8000974 <MX_GPIO_Init+0x164>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	4a35      	ldr	r2, [pc, #212]	@ (8000974 <MX_GPIO_Init+0x164>)
 80008a0:	f043 0308 	orr.w	r3, r3, #8
 80008a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a6:	4b33      	ldr	r3, [pc, #204]	@ (8000974 <MX_GPIO_Init+0x164>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	f003 0308 	and.w	r3, r3, #8
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2120      	movs	r1, #32
 80008b6:	4830      	ldr	r0, [pc, #192]	@ (8000978 <MX_GPIO_Init+0x168>)
 80008b8:	f001 f830 	bl	800191c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008c2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4619      	mov	r1, r3
 80008d2:	482a      	ldr	r0, [pc, #168]	@ (800097c <MX_GPIO_Init+0x16c>)
 80008d4:	f000 fe8e 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80008d8:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80008dc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008de:	2303      	movs	r3, #3
 80008e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4619      	mov	r1, r3
 80008ec:	4823      	ldr	r0, [pc, #140]	@ (800097c <MX_GPIO_Init+0x16c>)
 80008ee:	f000 fe81 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7
 80008f2:	f649 73d2 	movw	r3, #40914	@ 0x9fd2
 80008f6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008f8:	2303      	movs	r3, #3
 80008fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4619      	mov	r1, r3
 8000906:	481c      	ldr	r0, [pc, #112]	@ (8000978 <MX_GPIO_Init+0x168>)
 8000908:	f000 fe74 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800090c:	2320      	movs	r3, #32
 800090e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000910:	2301      	movs	r3, #1
 8000912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4619      	mov	r1, r3
 8000922:	4815      	ldr	r0, [pc, #84]	@ (8000978 <MX_GPIO_Init+0x168>)
 8000924:	f000 fe66 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 PB15
                           PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000928:	f24f 73f7 	movw	r3, #63479	@ 0xf7f7
 800092c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800092e:	2303      	movs	r3, #3
 8000930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	4619      	mov	r1, r3
 800093c:	4810      	ldr	r0, [pc, #64]	@ (8000980 <MX_GPIO_Init+0x170>)
 800093e:	f000 fe59 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000942:	2304      	movs	r3, #4
 8000944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000946:	2303      	movs	r3, #3
 8000948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	480b      	ldr	r0, [pc, #44]	@ (8000984 <MX_GPIO_Init+0x174>)
 8000956:	f000 fe4d 	bl	80015f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	2100      	movs	r1, #0
 800095e:	2028      	movs	r0, #40	@ 0x28
 8000960:	f000 fe03 	bl	800156a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000964:	2028      	movs	r0, #40	@ 0x28
 8000966:	f000 fe1c 	bl	80015a2 <HAL_NVIC_EnableIRQ>

}
 800096a:	bf00      	nop
 800096c:	3728      	adds	r7, #40	@ 0x28
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800
 8000978:	40020000 	.word	0x40020000
 800097c:	40020800 	.word	0x40020800
 8000980:	40020400 	.word	0x40020400
 8000984:	40020c00 	.word	0x40020c00

08000988 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	80fb      	strh	r3, [r7, #6]
	modify_event(TRIGGER_ON);
 8000992:	2001      	movs	r0, #1
 8000994:	f7ff ff2c 	bl	80007f0 <modify_event>
}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <enable_gpio_interrupts>:

void enable_gpio_interrupts(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009a4:	2028      	movs	r0, #40	@ 0x28
 80009a6:	f000 fdfc 	bl	80015a2 <HAL_NVIC_EnableIRQ>
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}

080009ae <disable_gpio_interrupts>:

void disable_gpio_interrupts(void)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80009b2:	2028      	movs	r0, #40	@ 0x28
 80009b4:	f000 fe03 	bl	80015be <HAL_NVIC_DisableIRQ>
}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}

080009bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c0:	f000 fc3e 	bl	8001240 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c4:	f000 f818 	bl	80009f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c8:	f7ff ff22 	bl	8000810 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009cc:	f000 fb40 	bl	8001050 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80009d0:	f000 f9fa 	bl	8000dc8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  tachometer_init();
 80009d4:	f7ff fdec 	bl	80005b0 <tachometer_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  evento_actual = read_event();
 80009d8:	f7ff fefe 	bl	80007d8 <read_event>
 80009dc:	4603      	mov	r3, r0
 80009de:	461a      	mov	r2, r3
 80009e0:	4b04      	ldr	r3, [pc, #16]	@ (80009f4 <main+0x38>)
 80009e2:	701a      	strb	r2, [r3, #0]
	  tachometer_state_machine(evento_actual);
 80009e4:	4b03      	ldr	r3, [pc, #12]	@ (80009f4 <main+0x38>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fe0b 	bl	8000604 <tachometer_state_machine>
	  evento_actual = read_event();
 80009ee:	bf00      	nop
 80009f0:	e7f2      	b.n	80009d8 <main+0x1c>
 80009f2:	bf00      	nop
 80009f4:	20009d31 	.word	0x20009d31

080009f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b094      	sub	sp, #80	@ 0x50
 80009fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	2234      	movs	r2, #52	@ 0x34
 8000a04:	2100      	movs	r1, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f003 fb1a 	bl	8004040 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a0c:	f107 0308 	add.w	r3, r7, #8
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	4b2a      	ldr	r3, [pc, #168]	@ (8000acc <SystemClock_Config+0xd4>)
 8000a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a24:	4a29      	ldr	r2, [pc, #164]	@ (8000acc <SystemClock_Config+0xd4>)
 8000a26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a2c:	4b27      	ldr	r3, [pc, #156]	@ (8000acc <SystemClock_Config+0xd4>)
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a38:	2300      	movs	r3, #0
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	4b24      	ldr	r3, [pc, #144]	@ (8000ad0 <SystemClock_Config+0xd8>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a44:	4a22      	ldr	r2, [pc, #136]	@ (8000ad0 <SystemClock_Config+0xd8>)
 8000a46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a4a:	6013      	str	r3, [r2, #0]
 8000a4c:	4b20      	ldr	r3, [pc, #128]	@ (8000ad0 <SystemClock_Config+0xd8>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a60:	2310      	movs	r3, #16
 8000a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a64:	2302      	movs	r3, #2
 8000a66:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a6c:	2310      	movs	r3, #16
 8000a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a70:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a74:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a76:	2304      	movs	r3, #4
 8000a78:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	4618      	mov	r0, r3
 8000a88:	f001 fac4 	bl	8002014 <HAL_RCC_OscConfig>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a92:	f000 f81f 	bl	8000ad4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a96:	230f      	movs	r3, #15
 8000a98:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aa2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aa6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aac:	f107 0308 	add.w	r3, r7, #8
 8000ab0:	2102      	movs	r1, #2
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 ff64 	bl	8001980 <HAL_RCC_ClockConfig>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000abe:	f000 f809 	bl	8000ad4 <Error_Handler>
  }
}
 8000ac2:	bf00      	nop
 8000ac4:	3750      	adds	r7, #80	@ 0x50
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40007000 	.word	0x40007000

08000ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad8:	b672      	cpsid	i
}
 8000ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <Error_Handler+0x8>

08000ae0 <init_ring_buffer>:
 */

#include "ringbuffer.h"

void init_ring_buffer(Ring_buffer_t *buffer)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	buffer->count = 0;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f503 4310 	add.w	r3, r3, #36864	@ 0x9000
 8000aee:	2200      	movs	r2, #0
 8000af0:	f8a3 2c42 	strh.w	r2, [r3, #3138]	@ 0xc42
	buffer->head = 0;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f503 4310 	add.w	r3, r3, #36864	@ 0x9000
 8000afa:	2200      	movs	r2, #0
 8000afc:	f8a3 2c40 	strh.w	r2, [r3, #3136]	@ 0xc40
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <buffer_is_full>:

bool buffer_is_full(Ring_buffer_t *buffer)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	return buffer->count == BUFFER_SIZE;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f503 4310 	add.w	r3, r3, #36864	@ 0x9000
 8000b1a:	f8b3 3c42 	ldrh.w	r3, [r3, #3138]	@ 0xc42
 8000b1e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000b22:	4293      	cmp	r3, r2
 8000b24:	bf0c      	ite	eq
 8000b26:	2301      	moveq	r3, #1
 8000b28:	2300      	movne	r3, #0
 8000b2a:	b2db      	uxtb	r3, r3

}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <buffer_is_empty>:

bool buffer_is_empty(Ring_buffer_t *buffer)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	return buffer->count == 0;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f503 4310 	add.w	r3, r3, #36864	@ 0x9000
 8000b46:	f8b3 3c42 	ldrh.w	r3, [r3, #3138]	@ 0xc42
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	bf0c      	ite	eq
 8000b4e:	2301      	moveq	r3, #1
 8000b50:	2300      	movne	r3, #0
 8000b52:	b2db      	uxtb	r3, r3

}
 8000b54:	4618      	mov	r0, r3
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <enqueue>:

bool enqueue(Ring_buffer_t *buffer, uint32_t value)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
	if(buffer_is_full(buffer))
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff ffce 	bl	8000b0c <buffer_is_full>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <enqueue+0x1a>
	{
		return false;
 8000b76:	2300      	movs	r3, #0
 8000b78:	e02d      	b.n	8000bd6 <enqueue+0x76>
	}
	else
	{
		buffer->data[buffer->head] = value;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f503 4310 	add.w	r3, r3, #36864	@ 0x9000
 8000b80:	f8b3 3c40 	ldrh.w	r3, [r3, #3136]	@ 0xc40
 8000b84:	4619      	mov	r1, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	683a      	ldr	r2, [r7, #0]
 8000b8a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		buffer->head = (buffer->head + 1) % BUFFER_SIZE; // aumenta y se asegura volver a cero
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	f503 4310 	add.w	r3, r3, #36864	@ 0x9000
 8000b94:	f8b3 3c40 	ldrh.w	r3, [r3, #3136]	@ 0xc40
 8000b98:	3301      	adds	r3, #1
 8000b9a:	4a11      	ldr	r2, [pc, #68]	@ (8000be0 <enqueue+0x80>)
 8000b9c:	fb82 1203 	smull	r1, r2, r2, r3
 8000ba0:	1311      	asrs	r1, r2, #12
 8000ba2:	17da      	asrs	r2, r3, #31
 8000ba4:	1a8a      	subs	r2, r1, r2
 8000ba6:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000baa:	fb01 f202 	mul.w	r2, r1, r2
 8000bae:	1a9a      	subs	r2, r3, r2
 8000bb0:	b292      	uxth	r2, r2
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f503 4310 	add.w	r3, r3, #36864	@ 0x9000
 8000bb8:	f8a3 2c40 	strh.w	r2, [r3, #3136]	@ 0xc40
		buffer->count++;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f503 4310 	add.w	r3, r3, #36864	@ 0x9000
 8000bc2:	f8b3 3c42 	ldrh.w	r3, [r3, #3138]	@ 0xc42
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f503 4310 	add.w	r3, r3, #36864	@ 0x9000
 8000bd0:	f8a3 2c42 	strh.w	r2, [r3, #3138]	@ 0xc42
		return true;
 8000bd4:	2301      	movs	r3, #1

	}

}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	68db8bad 	.word	0x68db8bad

08000be4 <dequeue>:

bool dequeue(Ring_buffer_t *buffer)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	if (buffer_is_empty(buffer))
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff ffa3 	bl	8000b38 <buffer_is_empty>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <dequeue+0x18>
	{
		return false;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	e023      	b.n	8000c44 <dequeue+0x60>
	}
	else
	{
		buffer->head = (buffer->head + 1) % BUFFER_SIZE;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f503 4310 	add.w	r3, r3, #36864	@ 0x9000
 8000c02:	f8b3 3c40 	ldrh.w	r3, [r3, #3136]	@ 0xc40
 8000c06:	3301      	adds	r3, #1
 8000c08:	4a10      	ldr	r2, [pc, #64]	@ (8000c4c <dequeue+0x68>)
 8000c0a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c0e:	1311      	asrs	r1, r2, #12
 8000c10:	17da      	asrs	r2, r3, #31
 8000c12:	1a8a      	subs	r2, r1, r2
 8000c14:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000c18:	fb01 f202 	mul.w	r2, r1, r2
 8000c1c:	1a9a      	subs	r2, r3, r2
 8000c1e:	b292      	uxth	r2, r2
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f503 4310 	add.w	r3, r3, #36864	@ 0x9000
 8000c26:	f8a3 2c40 	strh.w	r2, [r3, #3136]	@ 0xc40
		buffer->count--;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	f503 4310 	add.w	r3, r3, #36864	@ 0x9000
 8000c30:	f8b3 3c42 	ldrh.w	r3, [r3, #3138]	@ 0xc42
 8000c34:	3b01      	subs	r3, #1
 8000c36:	b29a      	uxth	r2, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f503 4310 	add.w	r3, r3, #36864	@ 0x9000
 8000c3e:	f8a3 2c42 	strh.w	r2, [r3, #3138]	@ 0xc42
		return true;
 8000c42:	2301      	movs	r3, #1
	}
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	68db8bad 	.word	0x68db8bad

08000c50 <get_buffer_size>:

uint32_t get_buffer_size(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
	return (uint32_t) BUFFER_SIZE;
 8000c54:	f242 7310 	movw	r3, #10000	@ 0x2710
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
	...

08000c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	4b10      	ldr	r3, [pc, #64]	@ (8000cb0 <HAL_MspInit+0x4c>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c72:	4a0f      	ldr	r2, [pc, #60]	@ (8000cb0 <HAL_MspInit+0x4c>)
 8000c74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb0 <HAL_MspInit+0x4c>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	4b09      	ldr	r3, [pc, #36]	@ (8000cb0 <HAL_MspInit+0x4c>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8e:	4a08      	ldr	r2, [pc, #32]	@ (8000cb0 <HAL_MspInit+0x4c>)
 8000c90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c96:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <HAL_MspInit+0x4c>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ca2:	2007      	movs	r0, #7
 8000ca4:	f000 fc56 	bl	8001554 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40023800 	.word	0x40023800

08000cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <NMI_Handler+0x4>

08000cbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <HardFault_Handler+0x4>

08000cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <MemManage_Handler+0x4>

08000ccc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <BusFault_Handler+0x4>

08000cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <UsageFault_Handler+0x4>

08000cdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d0a:	f000 faeb 	bl	80012e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d18:	4802      	ldr	r0, [pc, #8]	@ (8000d24 <TIM2_IRQHandler+0x10>)
 8000d1a:	f001 ff37 	bl	8002b8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20009d50 	.word	0x20009d50

08000d28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d2c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d30:	f000 fe0e 	bl	8001950 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d40:	4a14      	ldr	r2, [pc, #80]	@ (8000d94 <_sbrk+0x5c>)
 8000d42:	4b15      	ldr	r3, [pc, #84]	@ (8000d98 <_sbrk+0x60>)
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d4c:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <_sbrk+0x64>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d102      	bne.n	8000d5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d54:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <_sbrk+0x64>)
 8000d56:	4a12      	ldr	r2, [pc, #72]	@ (8000da0 <_sbrk+0x68>)
 8000d58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d5a:	4b10      	ldr	r3, [pc, #64]	@ (8000d9c <_sbrk+0x64>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d207      	bcs.n	8000d78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d68:	f003 f972 	bl	8004050 <__errno>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	220c      	movs	r2, #12
 8000d70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295
 8000d76:	e009      	b.n	8000d8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d78:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <_sbrk+0x64>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d7e:	4b07      	ldr	r3, [pc, #28]	@ (8000d9c <_sbrk+0x64>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	4a05      	ldr	r2, [pc, #20]	@ (8000d9c <_sbrk+0x64>)
 8000d88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20020000 	.word	0x20020000
 8000d98:	00000400 	.word	0x00000400
 8000d9c:	20009d34 	.word	0x20009d34
 8000da0:	20009f30 	.word	0x20009f30

08000da4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da8:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <SystemInit+0x20>)
 8000daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dae:	4a05      	ldr	r2, [pc, #20]	@ (8000dc4 <SystemInit+0x20>)
 8000db0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000db4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	@ 0x28
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dce:	f107 0318 	add.w	r3, r7, #24
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
 8000dda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ddc:	f107 0310 	add.w	r3, r7, #16
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000de6:	463b      	mov	r3, r7
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000df2:	4b2c      	ldr	r3, [pc, #176]	@ (8000ea4 <MX_TIM2_Init+0xdc>)
 8000df4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000df8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000dfa:	4b2a      	ldr	r3, [pc, #168]	@ (8000ea4 <MX_TIM2_Init+0xdc>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e00:	4b28      	ldr	r3, [pc, #160]	@ (8000ea4 <MX_TIM2_Init+0xdc>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000e06:	4b27      	ldr	r3, [pc, #156]	@ (8000ea4 <MX_TIM2_Init+0xdc>)
 8000e08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e0e:	4b25      	ldr	r3, [pc, #148]	@ (8000ea4 <MX_TIM2_Init+0xdc>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e14:	4b23      	ldr	r3, [pc, #140]	@ (8000ea4 <MX_TIM2_Init+0xdc>)
 8000e16:	2280      	movs	r2, #128	@ 0x80
 8000e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e1a:	4822      	ldr	r0, [pc, #136]	@ (8000ea4 <MX_TIM2_Init+0xdc>)
 8000e1c:	f001 fb98 	bl	8002550 <HAL_TIM_Base_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000e26:	f7ff fe55 	bl	8000ad4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e2e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e30:	f107 0318 	add.w	r3, r7, #24
 8000e34:	4619      	mov	r1, r3
 8000e36:	481b      	ldr	r0, [pc, #108]	@ (8000ea4 <MX_TIM2_Init+0xdc>)
 8000e38:	f002 f834 	bl	8002ea4 <HAL_TIM_ConfigClockSource>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000e42:	f7ff fe47 	bl	8000ad4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000e46:	4817      	ldr	r0, [pc, #92]	@ (8000ea4 <MX_TIM2_Init+0xdc>)
 8000e48:	f001 fc71 	bl	800272e <HAL_TIM_IC_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e52:	f7ff fe3f 	bl	8000ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e5e:	f107 0310 	add.w	r3, r7, #16
 8000e62:	4619      	mov	r1, r3
 8000e64:	480f      	ldr	r0, [pc, #60]	@ (8000ea4 <MX_TIM2_Init+0xdc>)
 8000e66:	f002 fb99 	bl	800359c <HAL_TIMEx_MasterConfigSynchronization>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000e70:	f7ff fe30 	bl	8000ad4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e74:	2300      	movs	r3, #0
 8000e76:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e84:	463b      	mov	r3, r7
 8000e86:	2200      	movs	r2, #0
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4806      	ldr	r0, [pc, #24]	@ (8000ea4 <MX_TIM2_Init+0xdc>)
 8000e8c:	f001 ff6e 	bl	8002d6c <HAL_TIM_IC_ConfigChannel>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000e96:	f7ff fe1d 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	3728      	adds	r7, #40	@ 0x28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20009d50 	.word	0x20009d50

08000ea8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	@ 0x28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ec8:	d133      	bne.n	8000f32 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	4b1b      	ldr	r3, [pc, #108]	@ (8000f3c <HAL_TIM_Base_MspInit+0x94>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed2:	4a1a      	ldr	r2, [pc, #104]	@ (8000f3c <HAL_TIM_Base_MspInit+0x94>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eda:	4b18      	ldr	r3, [pc, #96]	@ (8000f3c <HAL_TIM_Base_MspInit+0x94>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b14      	ldr	r3, [pc, #80]	@ (8000f3c <HAL_TIM_Base_MspInit+0x94>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	4a13      	ldr	r2, [pc, #76]	@ (8000f3c <HAL_TIM_Base_MspInit+0x94>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef6:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <HAL_TIM_Base_MspInit+0x94>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f02:	2301      	movs	r3, #1
 8000f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f12:	2301      	movs	r3, #1
 8000f14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4808      	ldr	r0, [pc, #32]	@ (8000f40 <HAL_TIM_Base_MspInit+0x98>)
 8000f1e:	f000 fb69 	bl	80015f4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2100      	movs	r1, #0
 8000f26:	201c      	movs	r0, #28
 8000f28:	f000 fb1f 	bl	800156a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f2c:	201c      	movs	r0, #28
 8000f2e:	f000 fb38 	bl	80015a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000f32:	bf00      	nop
 8000f34:	3728      	adds	r7, #40	@ 0x28
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40020000 	.word	0x40020000

08000f44 <HAL_TIM_IC_CaptureCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
    if(gu8_State == IDLE)
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fbc <HAL_TIM_IC_CaptureCallback+0x78>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d10b      	bne.n	8000f6e <HAL_TIM_IC_CaptureCallback+0x2a>
    {
        gu32_T1 = TIM2->CCR1;
 8000f56:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f5c:	4a18      	ldr	r2, [pc, #96]	@ (8000fc0 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000f5e:	6013      	str	r3, [r2, #0]
        gu16_TIM2_OVC = 0;
 8000f60:	4b18      	ldr	r3, [pc, #96]	@ (8000fc4 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	801a      	strh	r2, [r3, #0]
        gu8_State = DONE;
 8000f66:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <HAL_TIM_IC_CaptureCallback+0x78>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	701a      	strb	r2, [r3, #0]
        gu32_Ticks = (gu32_T2 + (gu16_TIM2_OVC * 65536)) - gu32_T1;
        gu32_Freq = (uint32_t)(F_CLK/gu32_Ticks);
        gu8_State = IDLE;

    }
}
 8000f6c:	e020      	b.n	8000fb0 <HAL_TIM_IC_CaptureCallback+0x6c>
    else if(gu8_State == DONE)
 8000f6e:	4b13      	ldr	r3, [pc, #76]	@ (8000fbc <HAL_TIM_IC_CaptureCallback+0x78>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d11b      	bne.n	8000fb0 <HAL_TIM_IC_CaptureCallback+0x6c>
        gu32_T2 = TIM2->CCR1;
 8000f78:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f7e:	4a12      	ldr	r2, [pc, #72]	@ (8000fc8 <HAL_TIM_IC_CaptureCallback+0x84>)
 8000f80:	6013      	str	r3, [r2, #0]
        gu32_Ticks = (gu32_T2 + (gu16_TIM2_OVC * 65536)) - gu32_T1;
 8000f82:	4b10      	ldr	r3, [pc, #64]	@ (8000fc4 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	041b      	lsls	r3, r3, #16
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <HAL_TIM_IC_CaptureCallback+0x84>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	441a      	add	r2, r3
 8000f92:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc0 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	4a0c      	ldr	r2, [pc, #48]	@ (8000fcc <HAL_TIM_IC_CaptureCallback+0x88>)
 8000f9a:	6013      	str	r3, [r2, #0]
        gu32_Freq = (uint32_t)(F_CLK/gu32_Ticks);
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fcc <HAL_TIM_IC_CaptureCallback+0x88>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0b      	ldr	r2, [pc, #44]	@ (8000fd0 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa6:	4a0b      	ldr	r2, [pc, #44]	@ (8000fd4 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000fa8:	6013      	str	r3, [r2, #0]
        gu8_State = IDLE;
 8000faa:	4b04      	ldr	r3, [pc, #16]	@ (8000fbc <HAL_TIM_IC_CaptureCallback+0x78>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	20009d38 	.word	0x20009d38
 8000fc0:	20009d3c 	.word	0x20009d3c
 8000fc4:	20009d48 	.word	0x20009d48
 8000fc8:	20009d40 	.word	0x20009d40
 8000fcc:	20009d44 	.word	0x20009d44
 8000fd0:	0501bd00 	.word	0x0501bd00
 8000fd4:	20009d4c 	.word	0x20009d4c

08000fd8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
    gu16_TIM2_OVC++;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	4b04      	ldr	r3, [pc, #16]	@ (8000ffc <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000fec:	801a      	strh	r2, [r3, #0]
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20009d48 	.word	0x20009d48

08001000 <get_frequency>:

uint32_t get_frequency(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
	return gu32_Freq;
 8001004:	4b03      	ldr	r3, [pc, #12]	@ (8001014 <get_frequency+0x14>)
 8001006:	681b      	ldr	r3, [r3, #0]
}
 8001008:	4618      	mov	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20009d4c 	.word	0x20009d4c

08001018 <disable_tim_interrupts>:

void disable_tim_interrupts(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim2);
 800101c:	4804      	ldr	r0, [pc, #16]	@ (8001030 <disable_tim_interrupts+0x18>)
 800101e:	f001 fb57 	bl	80026d0 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);
 8001022:	2100      	movs	r1, #0
 8001024:	4802      	ldr	r0, [pc, #8]	@ (8001030 <disable_tim_interrupts+0x18>)
 8001026:	f001 fd03 	bl	8002a30 <HAL_TIM_IC_Stop_IT>

}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20009d50 	.word	0x20009d50

08001034 <enable_tim_interrupts>:

void enable_tim_interrupts(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001038:	4804      	ldr	r0, [pc, #16]	@ (800104c <enable_tim_interrupts+0x18>)
 800103a:	f001 fad9 	bl	80025f0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800103e:	2100      	movs	r1, #0
 8001040:	4802      	ldr	r0, [pc, #8]	@ (800104c <enable_tim_interrupts+0x18>)
 8001042:	f001 fbcd 	bl	80027e0 <HAL_TIM_IC_Start_IT>
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20009d50 	.word	0x20009d50

08001050 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001054:	4b11      	ldr	r3, [pc, #68]	@ (800109c <MX_USART2_UART_Init+0x4c>)
 8001056:	4a12      	ldr	r2, [pc, #72]	@ (80010a0 <MX_USART2_UART_Init+0x50>)
 8001058:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800105a:	4b10      	ldr	r3, [pc, #64]	@ (800109c <MX_USART2_UART_Init+0x4c>)
 800105c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001060:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001062:	4b0e      	ldr	r3, [pc, #56]	@ (800109c <MX_USART2_UART_Init+0x4c>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001068:	4b0c      	ldr	r3, [pc, #48]	@ (800109c <MX_USART2_UART_Init+0x4c>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800106e:	4b0b      	ldr	r3, [pc, #44]	@ (800109c <MX_USART2_UART_Init+0x4c>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001074:	4b09      	ldr	r3, [pc, #36]	@ (800109c <MX_USART2_UART_Init+0x4c>)
 8001076:	220c      	movs	r2, #12
 8001078:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107a:	4b08      	ldr	r3, [pc, #32]	@ (800109c <MX_USART2_UART_Init+0x4c>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001080:	4b06      	ldr	r3, [pc, #24]	@ (800109c <MX_USART2_UART_Init+0x4c>)
 8001082:	2200      	movs	r2, #0
 8001084:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001086:	4805      	ldr	r0, [pc, #20]	@ (800109c <MX_USART2_UART_Init+0x4c>)
 8001088:	f002 fb18 	bl	80036bc <HAL_UART_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001092:	f7ff fd1f 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20009d98 	.word	0x20009d98
 80010a0:	40004400 	.word	0x40004400

080010a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	@ 0x28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a19      	ldr	r2, [pc, #100]	@ (8001128 <HAL_UART_MspInit+0x84>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d12b      	bne.n	800111e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	4b18      	ldr	r3, [pc, #96]	@ (800112c <HAL_UART_MspInit+0x88>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ce:	4a17      	ldr	r2, [pc, #92]	@ (800112c <HAL_UART_MspInit+0x88>)
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010d6:	4b15      	ldr	r3, [pc, #84]	@ (800112c <HAL_UART_MspInit+0x88>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <HAL_UART_MspInit+0x88>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	4a10      	ldr	r2, [pc, #64]	@ (800112c <HAL_UART_MspInit+0x88>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f2:	4b0e      	ldr	r3, [pc, #56]	@ (800112c <HAL_UART_MspInit+0x88>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010fe:	230c      	movs	r3, #12
 8001100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110a:	2303      	movs	r3, #3
 800110c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800110e:	2307      	movs	r3, #7
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	@ (8001130 <HAL_UART_MspInit+0x8c>)
 800111a:	f000 fa6b 	bl	80015f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800111e:	bf00      	nop
 8001120:	3728      	adds	r7, #40	@ 0x28
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40004400 	.word	0x40004400
 800112c:	40023800 	.word	0x40023800
 8001130:	40020000 	.word	0x40020000

08001134 <receive_byte>:
}

/* USER CODE BEGIN 1 */

char receive_byte(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
    char byte_received;
    HAL_StatusTypeDef status;

    status = HAL_UART_Receive(&huart2, (uint8_t*)&byte_received, sizeof(byte_received), 100);
 800113a:	1db9      	adds	r1, r7, #6
 800113c:	2364      	movs	r3, #100	@ 0x64
 800113e:	2201      	movs	r2, #1
 8001140:	4807      	ldr	r0, [pc, #28]	@ (8001160 <receive_byte+0x2c>)
 8001142:	f002 fb96 	bl	8003872 <HAL_UART_Receive>
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]

    if (status == HAL_OK) {
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d101      	bne.n	8001154 <receive_byte+0x20>
        return byte_received;
 8001150:	79bb      	ldrb	r3, [r7, #6]
 8001152:	e000      	b.n	8001156 <receive_byte+0x22>
    } else {

        return -1;
 8001154:	23ff      	movs	r3, #255	@ 0xff

    }
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20009d98 	.word	0x20009d98

08001164 <data_ready>:

void data_ready(uint32_t time_elapsed, uint8_t muestreo, uint32_t buffer_size, char *pMsg)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af02      	add	r7, sp, #8
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	460b      	mov	r3, r1
 8001172:	72fb      	strb	r3, [r7, #11]
    sprintf(pMsg, "Datos listos. Tiempo transcurrido = %lu ms, Muestreo= %u ms, Data Length = %lu.\r\n",
 8001174:	7afa      	ldrb	r2, [r7, #11]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	4613      	mov	r3, r2
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	4909      	ldr	r1, [pc, #36]	@ (80011a4 <data_ready+0x40>)
 8001180:	6838      	ldr	r0, [r7, #0]
 8001182:	f002 ff3d 	bl	8004000 <siprintf>
            time_elapsed, muestreo, buffer_size);

    uint16_t message_length = strlen(pMsg);
 8001186:	6838      	ldr	r0, [r7, #0]
 8001188:	f7ff f842 	bl	8000210 <strlen>
 800118c:	4603      	mov	r3, r0
 800118e:	82fb      	strh	r3, [r7, #22]

    HAL_UART_Transmit(&huart2, (uint8_t*)pMsg, message_length, 100);
 8001190:	8afa      	ldrh	r2, [r7, #22]
 8001192:	2364      	movs	r3, #100	@ 0x64
 8001194:	6839      	ldr	r1, [r7, #0]
 8001196:	4804      	ldr	r0, [pc, #16]	@ (80011a8 <data_ready+0x44>)
 8001198:	f002 fae0 	bl	800375c <HAL_UART_Transmit>
}
 800119c:	bf00      	nop
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	08004958 	.word	0x08004958
 80011a8:	20009d98 	.word	0x20009d98

080011ac <send_value>:

void send_value(uint32_t value)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
    uint8_t data[4];
    data[0] = (value >> 24) & 0xFF;  // Byte más significativo
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	0e1b      	lsrs	r3, r3, #24
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	733b      	strb	r3, [r7, #12]
    data[1] = (value >> 16) & 0xFF;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	0c1b      	lsrs	r3, r3, #16
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	737b      	strb	r3, [r7, #13]
    data[2] = (value >> 8) & 0xFF;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	0a1b      	lsrs	r3, r3, #8
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	73bb      	strb	r3, [r7, #14]
    data[3] = value & 0xFF;          // Byte menos significativo
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Transmit(&huart2, data, sizeof(data), 100);
 80011d2:	f107 010c 	add.w	r1, r7, #12
 80011d6:	2364      	movs	r3, #100	@ 0x64
 80011d8:	2204      	movs	r2, #4
 80011da:	4803      	ldr	r0, [pc, #12]	@ (80011e8 <send_value+0x3c>)
 80011dc:	f002 fabe 	bl	800375c <HAL_UART_Transmit>
}
 80011e0:	bf00      	nop
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20009d98 	.word	0x20009d98

080011ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001224 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011f0:	f7ff fdd8 	bl	8000da4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011f4:	480c      	ldr	r0, [pc, #48]	@ (8001228 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011f6:	490d      	ldr	r1, [pc, #52]	@ (800122c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001230 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011fc:	e002      	b.n	8001204 <LoopCopyDataInit>

080011fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001202:	3304      	adds	r3, #4

08001204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001208:	d3f9      	bcc.n	80011fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120a:	4a0a      	ldr	r2, [pc, #40]	@ (8001234 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800120c:	4c0a      	ldr	r4, [pc, #40]	@ (8001238 <LoopFillZerobss+0x22>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001210:	e001      	b.n	8001216 <LoopFillZerobss>

08001212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001214:	3204      	adds	r2, #4

08001216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001218:	d3fb      	bcc.n	8001212 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800121a:	f002 ff1f 	bl	800405c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800121e:	f7ff fbcd 	bl	80009bc <main>
  bx  lr    
 8001222:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001224:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800122c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001230:	08004a08 	.word	0x08004a08
  ldr r2, =_sbss
 8001234:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001238:	20009f2c 	.word	0x20009f2c

0800123c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800123c:	e7fe      	b.n	800123c <ADC_IRQHandler>
	...

08001240 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001244:	4b0e      	ldr	r3, [pc, #56]	@ (8001280 <HAL_Init+0x40>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a0d      	ldr	r2, [pc, #52]	@ (8001280 <HAL_Init+0x40>)
 800124a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800124e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001250:	4b0b      	ldr	r3, [pc, #44]	@ (8001280 <HAL_Init+0x40>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a0a      	ldr	r2, [pc, #40]	@ (8001280 <HAL_Init+0x40>)
 8001256:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800125a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800125c:	4b08      	ldr	r3, [pc, #32]	@ (8001280 <HAL_Init+0x40>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a07      	ldr	r2, [pc, #28]	@ (8001280 <HAL_Init+0x40>)
 8001262:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001266:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001268:	2003      	movs	r0, #3
 800126a:	f000 f973 	bl	8001554 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800126e:	2000      	movs	r0, #0
 8001270:	f000 f808 	bl	8001284 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001274:	f7ff fcf6 	bl	8000c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40023c00 	.word	0x40023c00

08001284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800128c:	4b12      	ldr	r3, [pc, #72]	@ (80012d8 <HAL_InitTick+0x54>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4b12      	ldr	r3, [pc, #72]	@ (80012dc <HAL_InitTick+0x58>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	4619      	mov	r1, r3
 8001296:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800129a:	fbb3 f3f1 	udiv	r3, r3, r1
 800129e:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 f999 	bl	80015da <HAL_SYSTICK_Config>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e00e      	b.n	80012d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2b0f      	cmp	r3, #15
 80012b6:	d80a      	bhi.n	80012ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b8:	2200      	movs	r2, #0
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	f04f 30ff 	mov.w	r0, #4294967295
 80012c0:	f000 f953 	bl	800156a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012c4:	4a06      	ldr	r2, [pc, #24]	@ (80012e0 <HAL_InitTick+0x5c>)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
 80012cc:	e000      	b.n	80012d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000000 	.word	0x20000000
 80012dc:	20000008 	.word	0x20000008
 80012e0:	20000004 	.word	0x20000004

080012e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e8:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <HAL_IncTick+0x20>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <HAL_IncTick+0x24>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4413      	add	r3, r2
 80012f4:	4a04      	ldr	r2, [pc, #16]	@ (8001308 <HAL_IncTick+0x24>)
 80012f6:	6013      	str	r3, [r2, #0]
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20000008 	.word	0x20000008
 8001308:	20009de0 	.word	0x20009de0

0800130c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return uwTick;
 8001310:	4b03      	ldr	r3, [pc, #12]	@ (8001320 <HAL_GetTick+0x14>)
 8001312:	681b      	ldr	r3, [r3, #0]
}
 8001314:	4618      	mov	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	20009de0 	.word	0x20009de0

08001324 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800132c:	f7ff ffee 	bl	800130c <HAL_GetTick>
 8001330:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800133c:	d005      	beq.n	800134a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800133e:	4b0a      	ldr	r3, [pc, #40]	@ (8001368 <HAL_Delay+0x44>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	461a      	mov	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4413      	add	r3, r2
 8001348:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800134a:	bf00      	nop
 800134c:	f7ff ffde 	bl	800130c <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	429a      	cmp	r2, r3
 800135a:	d8f7      	bhi.n	800134c <HAL_Delay+0x28>
  {
  }
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000008 	.word	0x20000008

0800136c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800137c:	4b0c      	ldr	r3, [pc, #48]	@ (80013b0 <__NVIC_SetPriorityGrouping+0x44>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001382:	68ba      	ldr	r2, [r7, #8]
 8001384:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001388:	4013      	ands	r3, r2
 800138a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001394:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001398:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800139c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800139e:	4a04      	ldr	r2, [pc, #16]	@ (80013b0 <__NVIC_SetPriorityGrouping+0x44>)
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	60d3      	str	r3, [r2, #12]
}
 80013a4:	bf00      	nop
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b8:	4b04      	ldr	r3, [pc, #16]	@ (80013cc <__NVIC_GetPriorityGrouping+0x18>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	0a1b      	lsrs	r3, r3, #8
 80013be:	f003 0307 	and.w	r3, r3, #7
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	db0b      	blt.n	80013fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	f003 021f 	and.w	r2, r3, #31
 80013e8:	4907      	ldr	r1, [pc, #28]	@ (8001408 <__NVIC_EnableIRQ+0x38>)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	095b      	lsrs	r3, r3, #5
 80013f0:	2001      	movs	r0, #1
 80013f2:	fa00 f202 	lsl.w	r2, r0, r2
 80013f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000e100 	.word	0xe000e100

0800140c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	2b00      	cmp	r3, #0
 800141c:	db12      	blt.n	8001444 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	f003 021f 	and.w	r2, r3, #31
 8001424:	490a      	ldr	r1, [pc, #40]	@ (8001450 <__NVIC_DisableIRQ+0x44>)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	095b      	lsrs	r3, r3, #5
 800142c:	2001      	movs	r0, #1
 800142e:	fa00 f202 	lsl.w	r2, r0, r2
 8001432:	3320      	adds	r3, #32
 8001434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001438:	f3bf 8f4f 	dsb	sy
}
 800143c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800143e:	f3bf 8f6f 	isb	sy
}
 8001442:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	e000e100 	.word	0xe000e100

08001454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	6039      	str	r1, [r7, #0]
 800145e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001464:	2b00      	cmp	r3, #0
 8001466:	db0a      	blt.n	800147e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	b2da      	uxtb	r2, r3
 800146c:	490c      	ldr	r1, [pc, #48]	@ (80014a0 <__NVIC_SetPriority+0x4c>)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	0112      	lsls	r2, r2, #4
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	440b      	add	r3, r1
 8001478:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800147c:	e00a      	b.n	8001494 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4908      	ldr	r1, [pc, #32]	@ (80014a4 <__NVIC_SetPriority+0x50>)
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	f003 030f 	and.w	r3, r3, #15
 800148a:	3b04      	subs	r3, #4
 800148c:	0112      	lsls	r2, r2, #4
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	440b      	add	r3, r1
 8001492:	761a      	strb	r2, [r3, #24]
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000e100 	.word	0xe000e100
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b089      	sub	sp, #36	@ 0x24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f1c3 0307 	rsb	r3, r3, #7
 80014c2:	2b04      	cmp	r3, #4
 80014c4:	bf28      	it	cs
 80014c6:	2304      	movcs	r3, #4
 80014c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3304      	adds	r3, #4
 80014ce:	2b06      	cmp	r3, #6
 80014d0:	d902      	bls.n	80014d8 <NVIC_EncodePriority+0x30>
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	3b03      	subs	r3, #3
 80014d6:	e000      	b.n	80014da <NVIC_EncodePriority+0x32>
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	f04f 32ff 	mov.w	r2, #4294967295
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43da      	mvns	r2, r3
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	401a      	ands	r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f0:	f04f 31ff 	mov.w	r1, #4294967295
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	fa01 f303 	lsl.w	r3, r1, r3
 80014fa:	43d9      	mvns	r1, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001500:	4313      	orrs	r3, r2
         );
}
 8001502:	4618      	mov	r0, r3
 8001504:	3724      	adds	r7, #36	@ 0x24
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
	...

08001510 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3b01      	subs	r3, #1
 800151c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001520:	d301      	bcc.n	8001526 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001522:	2301      	movs	r3, #1
 8001524:	e00f      	b.n	8001546 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001526:	4a0a      	ldr	r2, [pc, #40]	@ (8001550 <SysTick_Config+0x40>)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3b01      	subs	r3, #1
 800152c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800152e:	210f      	movs	r1, #15
 8001530:	f04f 30ff 	mov.w	r0, #4294967295
 8001534:	f7ff ff8e 	bl	8001454 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001538:	4b05      	ldr	r3, [pc, #20]	@ (8001550 <SysTick_Config+0x40>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800153e:	4b04      	ldr	r3, [pc, #16]	@ (8001550 <SysTick_Config+0x40>)
 8001540:	2207      	movs	r2, #7
 8001542:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	e000e010 	.word	0xe000e010

08001554 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff ff05 	bl	800136c <__NVIC_SetPriorityGrouping>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800156a:	b580      	push	{r7, lr}
 800156c:	b086      	sub	sp, #24
 800156e:	af00      	add	r7, sp, #0
 8001570:	4603      	mov	r3, r0
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	607a      	str	r2, [r7, #4]
 8001576:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800157c:	f7ff ff1a 	bl	80013b4 <__NVIC_GetPriorityGrouping>
 8001580:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	68b9      	ldr	r1, [r7, #8]
 8001586:	6978      	ldr	r0, [r7, #20]
 8001588:	f7ff ff8e 	bl	80014a8 <NVIC_EncodePriority>
 800158c:	4602      	mov	r2, r0
 800158e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001592:	4611      	mov	r1, r2
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff ff5d 	bl	8001454 <__NVIC_SetPriority>
}
 800159a:	bf00      	nop
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	4603      	mov	r3, r0
 80015aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ff0d 	bl	80013d0 <__NVIC_EnableIRQ>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	4603      	mov	r3, r0
 80015c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80015c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff ff1d 	bl	800140c <__NVIC_DisableIRQ>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff ff94 	bl	8001510 <SysTick_Config>
 80015e8:	4603      	mov	r3, r0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b089      	sub	sp, #36	@ 0x24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001606:	2300      	movs	r3, #0
 8001608:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
 800160e:	e165      	b.n	80018dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001610:	2201      	movs	r2, #1
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	4013      	ands	r3, r2
 8001622:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	429a      	cmp	r2, r3
 800162a:	f040 8154 	bne.w	80018d6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 0303 	and.w	r3, r3, #3
 8001636:	2b01      	cmp	r3, #1
 8001638:	d005      	beq.n	8001646 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001642:	2b02      	cmp	r3, #2
 8001644:	d130      	bne.n	80016a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	2203      	movs	r2, #3
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4313      	orrs	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800167c:	2201      	movs	r2, #1
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	091b      	lsrs	r3, r3, #4
 8001692:	f003 0201 	and.w	r2, r3, #1
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	2b03      	cmp	r3, #3
 80016b2:	d017      	beq.n	80016e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	2203      	movs	r2, #3
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 0303 	and.w	r3, r3, #3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d123      	bne.n	8001738 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	08da      	lsrs	r2, r3, #3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3208      	adds	r2, #8
 80016f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	220f      	movs	r2, #15
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	691a      	ldr	r2, [r3, #16]
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	08da      	lsrs	r2, r3, #3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3208      	adds	r2, #8
 8001732:	69b9      	ldr	r1, [r7, #24]
 8001734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	2203      	movs	r2, #3
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4013      	ands	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 0203 	and.w	r2, r3, #3
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 80ae 	beq.w	80018d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	4b5d      	ldr	r3, [pc, #372]	@ (80018f4 <HAL_GPIO_Init+0x300>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001782:	4a5c      	ldr	r2, [pc, #368]	@ (80018f4 <HAL_GPIO_Init+0x300>)
 8001784:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001788:	6453      	str	r3, [r2, #68]	@ 0x44
 800178a:	4b5a      	ldr	r3, [pc, #360]	@ (80018f4 <HAL_GPIO_Init+0x300>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001796:	4a58      	ldr	r2, [pc, #352]	@ (80018f8 <HAL_GPIO_Init+0x304>)
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	089b      	lsrs	r3, r3, #2
 800179c:	3302      	adds	r3, #2
 800179e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	220f      	movs	r2, #15
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4013      	ands	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a4f      	ldr	r2, [pc, #316]	@ (80018fc <HAL_GPIO_Init+0x308>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d025      	beq.n	800180e <HAL_GPIO_Init+0x21a>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a4e      	ldr	r2, [pc, #312]	@ (8001900 <HAL_GPIO_Init+0x30c>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d01f      	beq.n	800180a <HAL_GPIO_Init+0x216>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a4d      	ldr	r2, [pc, #308]	@ (8001904 <HAL_GPIO_Init+0x310>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d019      	beq.n	8001806 <HAL_GPIO_Init+0x212>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a4c      	ldr	r2, [pc, #304]	@ (8001908 <HAL_GPIO_Init+0x314>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d013      	beq.n	8001802 <HAL_GPIO_Init+0x20e>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a4b      	ldr	r2, [pc, #300]	@ (800190c <HAL_GPIO_Init+0x318>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d00d      	beq.n	80017fe <HAL_GPIO_Init+0x20a>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a4a      	ldr	r2, [pc, #296]	@ (8001910 <HAL_GPIO_Init+0x31c>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d007      	beq.n	80017fa <HAL_GPIO_Init+0x206>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a49      	ldr	r2, [pc, #292]	@ (8001914 <HAL_GPIO_Init+0x320>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d101      	bne.n	80017f6 <HAL_GPIO_Init+0x202>
 80017f2:	2306      	movs	r3, #6
 80017f4:	e00c      	b.n	8001810 <HAL_GPIO_Init+0x21c>
 80017f6:	2307      	movs	r3, #7
 80017f8:	e00a      	b.n	8001810 <HAL_GPIO_Init+0x21c>
 80017fa:	2305      	movs	r3, #5
 80017fc:	e008      	b.n	8001810 <HAL_GPIO_Init+0x21c>
 80017fe:	2304      	movs	r3, #4
 8001800:	e006      	b.n	8001810 <HAL_GPIO_Init+0x21c>
 8001802:	2303      	movs	r3, #3
 8001804:	e004      	b.n	8001810 <HAL_GPIO_Init+0x21c>
 8001806:	2302      	movs	r3, #2
 8001808:	e002      	b.n	8001810 <HAL_GPIO_Init+0x21c>
 800180a:	2301      	movs	r3, #1
 800180c:	e000      	b.n	8001810 <HAL_GPIO_Init+0x21c>
 800180e:	2300      	movs	r3, #0
 8001810:	69fa      	ldr	r2, [r7, #28]
 8001812:	f002 0203 	and.w	r2, r2, #3
 8001816:	0092      	lsls	r2, r2, #2
 8001818:	4093      	lsls	r3, r2
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4313      	orrs	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001820:	4935      	ldr	r1, [pc, #212]	@ (80018f8 <HAL_GPIO_Init+0x304>)
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	089b      	lsrs	r3, r3, #2
 8001826:	3302      	adds	r3, #2
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800182e:	4b3a      	ldr	r3, [pc, #232]	@ (8001918 <HAL_GPIO_Init+0x324>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	43db      	mvns	r3, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4013      	ands	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001852:	4a31      	ldr	r2, [pc, #196]	@ (8001918 <HAL_GPIO_Init+0x324>)
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001858:	4b2f      	ldr	r3, [pc, #188]	@ (8001918 <HAL_GPIO_Init+0x324>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	4313      	orrs	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800187c:	4a26      	ldr	r2, [pc, #152]	@ (8001918 <HAL_GPIO_Init+0x324>)
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001882:	4b25      	ldr	r3, [pc, #148]	@ (8001918 <HAL_GPIO_Init+0x324>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	43db      	mvns	r3, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4013      	ands	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001918 <HAL_GPIO_Init+0x324>)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001918 <HAL_GPIO_Init+0x324>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018d0:	4a11      	ldr	r2, [pc, #68]	@ (8001918 <HAL_GPIO_Init+0x324>)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3301      	adds	r3, #1
 80018da:	61fb      	str	r3, [r7, #28]
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	2b0f      	cmp	r3, #15
 80018e0:	f67f ae96 	bls.w	8001610 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018e4:	bf00      	nop
 80018e6:	bf00      	nop
 80018e8:	3724      	adds	r7, #36	@ 0x24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40013800 	.word	0x40013800
 80018fc:	40020000 	.word	0x40020000
 8001900:	40020400 	.word	0x40020400
 8001904:	40020800 	.word	0x40020800
 8001908:	40020c00 	.word	0x40020c00
 800190c:	40021000 	.word	0x40021000
 8001910:	40021400 	.word	0x40021400
 8001914:	40021800 	.word	0x40021800
 8001918:	40013c00 	.word	0x40013c00

0800191c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	807b      	strh	r3, [r7, #2]
 8001928:	4613      	mov	r3, r2
 800192a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800192c:	787b      	ldrb	r3, [r7, #1]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001932:	887a      	ldrh	r2, [r7, #2]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001938:	e003      	b.n	8001942 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800193a:	887b      	ldrh	r3, [r7, #2]
 800193c:	041a      	lsls	r2, r3, #16
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	619a      	str	r2, [r3, #24]
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
	...

08001950 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800195a:	4b08      	ldr	r3, [pc, #32]	@ (800197c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800195c:	695a      	ldr	r2, [r3, #20]
 800195e:	88fb      	ldrh	r3, [r7, #6]
 8001960:	4013      	ands	r3, r2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d006      	beq.n	8001974 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001966:	4a05      	ldr	r2, [pc, #20]	@ (800197c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001968:	88fb      	ldrh	r3, [r7, #6]
 800196a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800196c:	88fb      	ldrh	r3, [r7, #6]
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff f80a 	bl	8000988 <HAL_GPIO_EXTI_Callback>
  }
}
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40013c00 	.word	0x40013c00

08001980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e0cc      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001994:	4b68      	ldr	r3, [pc, #416]	@ (8001b38 <HAL_RCC_ClockConfig+0x1b8>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 030f 	and.w	r3, r3, #15
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d90c      	bls.n	80019bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a2:	4b65      	ldr	r3, [pc, #404]	@ (8001b38 <HAL_RCC_ClockConfig+0x1b8>)
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019aa:	4b63      	ldr	r3, [pc, #396]	@ (8001b38 <HAL_RCC_ClockConfig+0x1b8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d001      	beq.n	80019bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e0b8      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d020      	beq.n	8001a0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d005      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019d4:	4b59      	ldr	r3, [pc, #356]	@ (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	4a58      	ldr	r2, [pc, #352]	@ (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 80019da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80019de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0308 	and.w	r3, r3, #8
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d005      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019ec:	4b53      	ldr	r3, [pc, #332]	@ (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	4a52      	ldr	r2, [pc, #328]	@ (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80019f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019f8:	4b50      	ldr	r3, [pc, #320]	@ (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	494d      	ldr	r1, [pc, #308]	@ (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d044      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d107      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1e:	4b47      	ldr	r3, [pc, #284]	@ (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d119      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e07f      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d003      	beq.n	8001a3e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a3a:	2b03      	cmp	r3, #3
 8001a3c:	d107      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a3e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d109      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e06f      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a4e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e067      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a5e:	4b37      	ldr	r3, [pc, #220]	@ (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f023 0203 	bic.w	r2, r3, #3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	4934      	ldr	r1, [pc, #208]	@ (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a70:	f7ff fc4c 	bl	800130c <HAL_GetTick>
 8001a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a76:	e00a      	b.n	8001a8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a78:	f7ff fc48 	bl	800130c <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e04f      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a8e:	4b2b      	ldr	r3, [pc, #172]	@ (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 020c 	and.w	r2, r3, #12
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d1eb      	bne.n	8001a78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001aa0:	4b25      	ldr	r3, [pc, #148]	@ (8001b38 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 030f 	and.w	r3, r3, #15
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d20c      	bcs.n	8001ac8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aae:	4b22      	ldr	r3, [pc, #136]	@ (8001b38 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab6:	4b20      	ldr	r3, [pc, #128]	@ (8001b38 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d001      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e032      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d008      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ad4:	4b19      	ldr	r3, [pc, #100]	@ (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	4916      	ldr	r1, [pc, #88]	@ (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d009      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001af2:	4b12      	ldr	r3, [pc, #72]	@ (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	490e      	ldr	r1, [pc, #56]	@ (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b06:	f000 f855 	bl	8001bb4 <HAL_RCC_GetSysClockFreq>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	091b      	lsrs	r3, r3, #4
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	490a      	ldr	r1, [pc, #40]	@ (8001b40 <HAL_RCC_ClockConfig+0x1c0>)
 8001b18:	5ccb      	ldrb	r3, [r1, r3]
 8001b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b1e:	4a09      	ldr	r2, [pc, #36]	@ (8001b44 <HAL_RCC_ClockConfig+0x1c4>)
 8001b20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001b22:	4b09      	ldr	r3, [pc, #36]	@ (8001b48 <HAL_RCC_ClockConfig+0x1c8>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fbac 	bl	8001284 <HAL_InitTick>

  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40023c00 	.word	0x40023c00
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	080049ac 	.word	0x080049ac
 8001b44:	20000000 	.word	0x20000000
 8001b48:	20000004 	.word	0x20000004

08001b4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b50:	4b03      	ldr	r3, [pc, #12]	@ (8001b60 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b52:	681b      	ldr	r3, [r3, #0]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	20000000 	.word	0x20000000

08001b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b68:	f7ff fff0 	bl	8001b4c <HAL_RCC_GetHCLKFreq>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	4b05      	ldr	r3, [pc, #20]	@ (8001b84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	0a9b      	lsrs	r3, r3, #10
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	4903      	ldr	r1, [pc, #12]	@ (8001b88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b7a:	5ccb      	ldrb	r3, [r1, r3]
 8001b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40023800 	.word	0x40023800
 8001b88:	080049bc 	.word	0x080049bc

08001b8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b90:	f7ff ffdc 	bl	8001b4c <HAL_RCC_GetHCLKFreq>
 8001b94:	4602      	mov	r2, r0
 8001b96:	4b05      	ldr	r3, [pc, #20]	@ (8001bac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	0b5b      	lsrs	r3, r3, #13
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	4903      	ldr	r1, [pc, #12]	@ (8001bb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ba2:	5ccb      	ldrb	r3, [r1, r3]
 8001ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	080049bc 	.word	0x080049bc

08001bb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bb8:	b0ae      	sub	sp, #184	@ 0xb8
 8001bba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bda:	4bcb      	ldr	r3, [pc, #812]	@ (8001f08 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 030c 	and.w	r3, r3, #12
 8001be2:	2b0c      	cmp	r3, #12
 8001be4:	f200 8206 	bhi.w	8001ff4 <HAL_RCC_GetSysClockFreq+0x440>
 8001be8:	a201      	add	r2, pc, #4	@ (adr r2, 8001bf0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bee:	bf00      	nop
 8001bf0:	08001c25 	.word	0x08001c25
 8001bf4:	08001ff5 	.word	0x08001ff5
 8001bf8:	08001ff5 	.word	0x08001ff5
 8001bfc:	08001ff5 	.word	0x08001ff5
 8001c00:	08001c2d 	.word	0x08001c2d
 8001c04:	08001ff5 	.word	0x08001ff5
 8001c08:	08001ff5 	.word	0x08001ff5
 8001c0c:	08001ff5 	.word	0x08001ff5
 8001c10:	08001c35 	.word	0x08001c35
 8001c14:	08001ff5 	.word	0x08001ff5
 8001c18:	08001ff5 	.word	0x08001ff5
 8001c1c:	08001ff5 	.word	0x08001ff5
 8001c20:	08001e25 	.word	0x08001e25
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c24:	4bb9      	ldr	r3, [pc, #740]	@ (8001f0c <HAL_RCC_GetSysClockFreq+0x358>)
 8001c26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001c2a:	e1e7      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c2c:	4bb8      	ldr	r3, [pc, #736]	@ (8001f10 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001c2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001c32:	e1e3      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c34:	4bb4      	ldr	r3, [pc, #720]	@ (8001f08 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c40:	4bb1      	ldr	r3, [pc, #708]	@ (8001f08 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d071      	beq.n	8001d30 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c4c:	4bae      	ldr	r3, [pc, #696]	@ (8001f08 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	099b      	lsrs	r3, r3, #6
 8001c52:	2200      	movs	r2, #0
 8001c54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001c58:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001c5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c64:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001c6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001c72:	4622      	mov	r2, r4
 8001c74:	462b      	mov	r3, r5
 8001c76:	f04f 0000 	mov.w	r0, #0
 8001c7a:	f04f 0100 	mov.w	r1, #0
 8001c7e:	0159      	lsls	r1, r3, #5
 8001c80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c84:	0150      	lsls	r0, r2, #5
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4621      	mov	r1, r4
 8001c8c:	1a51      	subs	r1, r2, r1
 8001c8e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001c90:	4629      	mov	r1, r5
 8001c92:	eb63 0301 	sbc.w	r3, r3, r1
 8001c96:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	f04f 0300 	mov.w	r3, #0
 8001ca0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001ca4:	4649      	mov	r1, r9
 8001ca6:	018b      	lsls	r3, r1, #6
 8001ca8:	4641      	mov	r1, r8
 8001caa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cae:	4641      	mov	r1, r8
 8001cb0:	018a      	lsls	r2, r1, #6
 8001cb2:	4641      	mov	r1, r8
 8001cb4:	1a51      	subs	r1, r2, r1
 8001cb6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001cb8:	4649      	mov	r1, r9
 8001cba:	eb63 0301 	sbc.w	r3, r3, r1
 8001cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001ccc:	4649      	mov	r1, r9
 8001cce:	00cb      	lsls	r3, r1, #3
 8001cd0:	4641      	mov	r1, r8
 8001cd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001cd6:	4641      	mov	r1, r8
 8001cd8:	00ca      	lsls	r2, r1, #3
 8001cda:	4610      	mov	r0, r2
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4603      	mov	r3, r0
 8001ce0:	4622      	mov	r2, r4
 8001ce2:	189b      	adds	r3, r3, r2
 8001ce4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ce6:	462b      	mov	r3, r5
 8001ce8:	460a      	mov	r2, r1
 8001cea:	eb42 0303 	adc.w	r3, r2, r3
 8001cee:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	f04f 0300 	mov.w	r3, #0
 8001cf8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001cfc:	4629      	mov	r1, r5
 8001cfe:	024b      	lsls	r3, r1, #9
 8001d00:	4621      	mov	r1, r4
 8001d02:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d06:	4621      	mov	r1, r4
 8001d08:	024a      	lsls	r2, r1, #9
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d12:	2200      	movs	r2, #0
 8001d14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001d18:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001d1c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001d20:	f7fe face 	bl	80002c0 <__aeabi_uldivmod>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4613      	mov	r3, r2
 8001d2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001d2e:	e067      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d30:	4b75      	ldr	r3, [pc, #468]	@ (8001f08 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	099b      	lsrs	r3, r3, #6
 8001d36:	2200      	movs	r2, #0
 8001d38:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001d3c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001d40:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001d4e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001d52:	4622      	mov	r2, r4
 8001d54:	462b      	mov	r3, r5
 8001d56:	f04f 0000 	mov.w	r0, #0
 8001d5a:	f04f 0100 	mov.w	r1, #0
 8001d5e:	0159      	lsls	r1, r3, #5
 8001d60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d64:	0150      	lsls	r0, r2, #5
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	4621      	mov	r1, r4
 8001d6c:	1a51      	subs	r1, r2, r1
 8001d6e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001d70:	4629      	mov	r1, r5
 8001d72:	eb63 0301 	sbc.w	r3, r3, r1
 8001d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	f04f 0300 	mov.w	r3, #0
 8001d80:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001d84:	4649      	mov	r1, r9
 8001d86:	018b      	lsls	r3, r1, #6
 8001d88:	4641      	mov	r1, r8
 8001d8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d8e:	4641      	mov	r1, r8
 8001d90:	018a      	lsls	r2, r1, #6
 8001d92:	4641      	mov	r1, r8
 8001d94:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d98:	4649      	mov	r1, r9
 8001d9a:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	f04f 0300 	mov.w	r3, #0
 8001da6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001daa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001dae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001db2:	4692      	mov	sl, r2
 8001db4:	469b      	mov	fp, r3
 8001db6:	4623      	mov	r3, r4
 8001db8:	eb1a 0303 	adds.w	r3, sl, r3
 8001dbc:	623b      	str	r3, [r7, #32]
 8001dbe:	462b      	mov	r3, r5
 8001dc0:	eb4b 0303 	adc.w	r3, fp, r3
 8001dc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	f04f 0300 	mov.w	r3, #0
 8001dce:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001dd2:	4629      	mov	r1, r5
 8001dd4:	028b      	lsls	r3, r1, #10
 8001dd6:	4621      	mov	r1, r4
 8001dd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ddc:	4621      	mov	r1, r4
 8001dde:	028a      	lsls	r2, r1, #10
 8001de0:	4610      	mov	r0, r2
 8001de2:	4619      	mov	r1, r3
 8001de4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001de8:	2200      	movs	r2, #0
 8001dea:	673b      	str	r3, [r7, #112]	@ 0x70
 8001dec:	677a      	str	r2, [r7, #116]	@ 0x74
 8001dee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001df2:	f7fe fa65 	bl	80002c0 <__aeabi_uldivmod>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001e00:	4b41      	ldr	r3, [pc, #260]	@ (8001f08 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	0c1b      	lsrs	r3, r3, #16
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001e12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001e16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001e22:	e0eb      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e24:	4b38      	ldr	r3, [pc, #224]	@ (8001f08 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e30:	4b35      	ldr	r3, [pc, #212]	@ (8001f08 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d06b      	beq.n	8001f14 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e3c:	4b32      	ldr	r3, [pc, #200]	@ (8001f08 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	099b      	lsrs	r3, r3, #6
 8001e42:	2200      	movs	r2, #0
 8001e44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001e46:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001e48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e4e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e50:	2300      	movs	r3, #0
 8001e52:	667b      	str	r3, [r7, #100]	@ 0x64
 8001e54:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001e58:	4622      	mov	r2, r4
 8001e5a:	462b      	mov	r3, r5
 8001e5c:	f04f 0000 	mov.w	r0, #0
 8001e60:	f04f 0100 	mov.w	r1, #0
 8001e64:	0159      	lsls	r1, r3, #5
 8001e66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e6a:	0150      	lsls	r0, r2, #5
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4621      	mov	r1, r4
 8001e72:	1a51      	subs	r1, r2, r1
 8001e74:	61b9      	str	r1, [r7, #24]
 8001e76:	4629      	mov	r1, r5
 8001e78:	eb63 0301 	sbc.w	r3, r3, r1
 8001e7c:	61fb      	str	r3, [r7, #28]
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	f04f 0300 	mov.w	r3, #0
 8001e86:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001e8a:	4659      	mov	r1, fp
 8001e8c:	018b      	lsls	r3, r1, #6
 8001e8e:	4651      	mov	r1, sl
 8001e90:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e94:	4651      	mov	r1, sl
 8001e96:	018a      	lsls	r2, r1, #6
 8001e98:	4651      	mov	r1, sl
 8001e9a:	ebb2 0801 	subs.w	r8, r2, r1
 8001e9e:	4659      	mov	r1, fp
 8001ea0:	eb63 0901 	sbc.w	r9, r3, r1
 8001ea4:	f04f 0200 	mov.w	r2, #0
 8001ea8:	f04f 0300 	mov.w	r3, #0
 8001eac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001eb0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001eb4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001eb8:	4690      	mov	r8, r2
 8001eba:	4699      	mov	r9, r3
 8001ebc:	4623      	mov	r3, r4
 8001ebe:	eb18 0303 	adds.w	r3, r8, r3
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	462b      	mov	r3, r5
 8001ec6:	eb49 0303 	adc.w	r3, r9, r3
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	f04f 0300 	mov.w	r3, #0
 8001ed4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001ed8:	4629      	mov	r1, r5
 8001eda:	024b      	lsls	r3, r1, #9
 8001edc:	4621      	mov	r1, r4
 8001ede:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ee2:	4621      	mov	r1, r4
 8001ee4:	024a      	lsls	r2, r1, #9
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001eee:	2200      	movs	r2, #0
 8001ef0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001ef2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001ef4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001ef8:	f7fe f9e2 	bl	80002c0 <__aeabi_uldivmod>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4613      	mov	r3, r2
 8001f02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001f06:	e065      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x420>
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	00f42400 	.word	0x00f42400
 8001f10:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f14:	4b3d      	ldr	r3, [pc, #244]	@ (800200c <HAL_RCC_GetSysClockFreq+0x458>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	099b      	lsrs	r3, r3, #6
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	4611      	mov	r1, r2
 8001f20:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f24:	653b      	str	r3, [r7, #80]	@ 0x50
 8001f26:	2300      	movs	r3, #0
 8001f28:	657b      	str	r3, [r7, #84]	@ 0x54
 8001f2a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001f2e:	4642      	mov	r2, r8
 8001f30:	464b      	mov	r3, r9
 8001f32:	f04f 0000 	mov.w	r0, #0
 8001f36:	f04f 0100 	mov.w	r1, #0
 8001f3a:	0159      	lsls	r1, r3, #5
 8001f3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f40:	0150      	lsls	r0, r2, #5
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	4641      	mov	r1, r8
 8001f48:	1a51      	subs	r1, r2, r1
 8001f4a:	60b9      	str	r1, [r7, #8]
 8001f4c:	4649      	mov	r1, r9
 8001f4e:	eb63 0301 	sbc.w	r3, r3, r1
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	f04f 0200 	mov.w	r2, #0
 8001f58:	f04f 0300 	mov.w	r3, #0
 8001f5c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001f60:	4659      	mov	r1, fp
 8001f62:	018b      	lsls	r3, r1, #6
 8001f64:	4651      	mov	r1, sl
 8001f66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f6a:	4651      	mov	r1, sl
 8001f6c:	018a      	lsls	r2, r1, #6
 8001f6e:	4651      	mov	r1, sl
 8001f70:	1a54      	subs	r4, r2, r1
 8001f72:	4659      	mov	r1, fp
 8001f74:	eb63 0501 	sbc.w	r5, r3, r1
 8001f78:	f04f 0200 	mov.w	r2, #0
 8001f7c:	f04f 0300 	mov.w	r3, #0
 8001f80:	00eb      	lsls	r3, r5, #3
 8001f82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f86:	00e2      	lsls	r2, r4, #3
 8001f88:	4614      	mov	r4, r2
 8001f8a:	461d      	mov	r5, r3
 8001f8c:	4643      	mov	r3, r8
 8001f8e:	18e3      	adds	r3, r4, r3
 8001f90:	603b      	str	r3, [r7, #0]
 8001f92:	464b      	mov	r3, r9
 8001f94:	eb45 0303 	adc.w	r3, r5, r3
 8001f98:	607b      	str	r3, [r7, #4]
 8001f9a:	f04f 0200 	mov.w	r2, #0
 8001f9e:	f04f 0300 	mov.w	r3, #0
 8001fa2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fa6:	4629      	mov	r1, r5
 8001fa8:	028b      	lsls	r3, r1, #10
 8001faa:	4621      	mov	r1, r4
 8001fac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fb0:	4621      	mov	r1, r4
 8001fb2:	028a      	lsls	r2, r1, #10
 8001fb4:	4610      	mov	r0, r2
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001fc0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001fc2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001fc6:	f7fe f97b 	bl	80002c0 <__aeabi_uldivmod>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4613      	mov	r3, r2
 8001fd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001fd4:	4b0d      	ldr	r3, [pc, #52]	@ (800200c <HAL_RCC_GetSysClockFreq+0x458>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	0f1b      	lsrs	r3, r3, #28
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001fe2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001fe6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001ff2:	e003      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ff4:	4b06      	ldr	r3, [pc, #24]	@ (8002010 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001ff6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001ffa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ffc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002000:	4618      	mov	r0, r3
 8002002:	37b8      	adds	r7, #184	@ 0xb8
 8002004:	46bd      	mov	sp, r7
 8002006:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800200a:	bf00      	nop
 800200c:	40023800 	.word	0x40023800
 8002010:	00f42400 	.word	0x00f42400

08002014 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e28d      	b.n	8002542 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 8083 	beq.w	800213a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002034:	4b94      	ldr	r3, [pc, #592]	@ (8002288 <HAL_RCC_OscConfig+0x274>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 030c 	and.w	r3, r3, #12
 800203c:	2b04      	cmp	r3, #4
 800203e:	d019      	beq.n	8002074 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002040:	4b91      	ldr	r3, [pc, #580]	@ (8002288 <HAL_RCC_OscConfig+0x274>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 030c 	and.w	r3, r3, #12
        || \
 8002048:	2b08      	cmp	r3, #8
 800204a:	d106      	bne.n	800205a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800204c:	4b8e      	ldr	r3, [pc, #568]	@ (8002288 <HAL_RCC_OscConfig+0x274>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002054:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002058:	d00c      	beq.n	8002074 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800205a:	4b8b      	ldr	r3, [pc, #556]	@ (8002288 <HAL_RCC_OscConfig+0x274>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002062:	2b0c      	cmp	r3, #12
 8002064:	d112      	bne.n	800208c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002066:	4b88      	ldr	r3, [pc, #544]	@ (8002288 <HAL_RCC_OscConfig+0x274>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800206e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002072:	d10b      	bne.n	800208c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002074:	4b84      	ldr	r3, [pc, #528]	@ (8002288 <HAL_RCC_OscConfig+0x274>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d05b      	beq.n	8002138 <HAL_RCC_OscConfig+0x124>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d157      	bne.n	8002138 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e25a      	b.n	8002542 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002094:	d106      	bne.n	80020a4 <HAL_RCC_OscConfig+0x90>
 8002096:	4b7c      	ldr	r3, [pc, #496]	@ (8002288 <HAL_RCC_OscConfig+0x274>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a7b      	ldr	r2, [pc, #492]	@ (8002288 <HAL_RCC_OscConfig+0x274>)
 800209c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	e01d      	b.n	80020e0 <HAL_RCC_OscConfig+0xcc>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020ac:	d10c      	bne.n	80020c8 <HAL_RCC_OscConfig+0xb4>
 80020ae:	4b76      	ldr	r3, [pc, #472]	@ (8002288 <HAL_RCC_OscConfig+0x274>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a75      	ldr	r2, [pc, #468]	@ (8002288 <HAL_RCC_OscConfig+0x274>)
 80020b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020b8:	6013      	str	r3, [r2, #0]
 80020ba:	4b73      	ldr	r3, [pc, #460]	@ (8002288 <HAL_RCC_OscConfig+0x274>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a72      	ldr	r2, [pc, #456]	@ (8002288 <HAL_RCC_OscConfig+0x274>)
 80020c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	e00b      	b.n	80020e0 <HAL_RCC_OscConfig+0xcc>
 80020c8:	4b6f      	ldr	r3, [pc, #444]	@ (8002288 <HAL_RCC_OscConfig+0x274>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a6e      	ldr	r2, [pc, #440]	@ (8002288 <HAL_RCC_OscConfig+0x274>)
 80020ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	4b6c      	ldr	r3, [pc, #432]	@ (8002288 <HAL_RCC_OscConfig+0x274>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a6b      	ldr	r2, [pc, #428]	@ (8002288 <HAL_RCC_OscConfig+0x274>)
 80020da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d013      	beq.n	8002110 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e8:	f7ff f910 	bl	800130c <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020f0:	f7ff f90c 	bl	800130c <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b64      	cmp	r3, #100	@ 0x64
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e21f      	b.n	8002542 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002102:	4b61      	ldr	r3, [pc, #388]	@ (8002288 <HAL_RCC_OscConfig+0x274>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0f0      	beq.n	80020f0 <HAL_RCC_OscConfig+0xdc>
 800210e:	e014      	b.n	800213a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002110:	f7ff f8fc 	bl	800130c <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002118:	f7ff f8f8 	bl	800130c <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b64      	cmp	r3, #100	@ 0x64
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e20b      	b.n	8002542 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800212a:	4b57      	ldr	r3, [pc, #348]	@ (8002288 <HAL_RCC_OscConfig+0x274>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0x104>
 8002136:	e000      	b.n	800213a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d06f      	beq.n	8002226 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002146:	4b50      	ldr	r3, [pc, #320]	@ (8002288 <HAL_RCC_OscConfig+0x274>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 030c 	and.w	r3, r3, #12
 800214e:	2b00      	cmp	r3, #0
 8002150:	d017      	beq.n	8002182 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002152:	4b4d      	ldr	r3, [pc, #308]	@ (8002288 <HAL_RCC_OscConfig+0x274>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 030c 	and.w	r3, r3, #12
        || \
 800215a:	2b08      	cmp	r3, #8
 800215c:	d105      	bne.n	800216a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800215e:	4b4a      	ldr	r3, [pc, #296]	@ (8002288 <HAL_RCC_OscConfig+0x274>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00b      	beq.n	8002182 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800216a:	4b47      	ldr	r3, [pc, #284]	@ (8002288 <HAL_RCC_OscConfig+0x274>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002172:	2b0c      	cmp	r3, #12
 8002174:	d11c      	bne.n	80021b0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002176:	4b44      	ldr	r3, [pc, #272]	@ (8002288 <HAL_RCC_OscConfig+0x274>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d116      	bne.n	80021b0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002182:	4b41      	ldr	r3, [pc, #260]	@ (8002288 <HAL_RCC_OscConfig+0x274>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d005      	beq.n	800219a <HAL_RCC_OscConfig+0x186>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d001      	beq.n	800219a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e1d3      	b.n	8002542 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219a:	4b3b      	ldr	r3, [pc, #236]	@ (8002288 <HAL_RCC_OscConfig+0x274>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4937      	ldr	r1, [pc, #220]	@ (8002288 <HAL_RCC_OscConfig+0x274>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ae:	e03a      	b.n	8002226 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d020      	beq.n	80021fa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021b8:	4b34      	ldr	r3, [pc, #208]	@ (800228c <HAL_RCC_OscConfig+0x278>)
 80021ba:	2201      	movs	r2, #1
 80021bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021be:	f7ff f8a5 	bl	800130c <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021c6:	f7ff f8a1 	bl	800130c <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e1b4      	b.n	8002542 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002288 <HAL_RCC_OscConfig+0x274>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0f0      	beq.n	80021c6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e4:	4b28      	ldr	r3, [pc, #160]	@ (8002288 <HAL_RCC_OscConfig+0x274>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	4925      	ldr	r1, [pc, #148]	@ (8002288 <HAL_RCC_OscConfig+0x274>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	600b      	str	r3, [r1, #0]
 80021f8:	e015      	b.n	8002226 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021fa:	4b24      	ldr	r3, [pc, #144]	@ (800228c <HAL_RCC_OscConfig+0x278>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002200:	f7ff f884 	bl	800130c <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002208:	f7ff f880 	bl	800130c <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e193      	b.n	8002542 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800221a:	4b1b      	ldr	r3, [pc, #108]	@ (8002288 <HAL_RCC_OscConfig+0x274>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f0      	bne.n	8002208 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b00      	cmp	r3, #0
 8002230:	d036      	beq.n	80022a0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d016      	beq.n	8002268 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800223a:	4b15      	ldr	r3, [pc, #84]	@ (8002290 <HAL_RCC_OscConfig+0x27c>)
 800223c:	2201      	movs	r2, #1
 800223e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002240:	f7ff f864 	bl	800130c <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002248:	f7ff f860 	bl	800130c <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e173      	b.n	8002542 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800225a:	4b0b      	ldr	r3, [pc, #44]	@ (8002288 <HAL_RCC_OscConfig+0x274>)
 800225c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0f0      	beq.n	8002248 <HAL_RCC_OscConfig+0x234>
 8002266:	e01b      	b.n	80022a0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002268:	4b09      	ldr	r3, [pc, #36]	@ (8002290 <HAL_RCC_OscConfig+0x27c>)
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800226e:	f7ff f84d 	bl	800130c <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002274:	e00e      	b.n	8002294 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002276:	f7ff f849 	bl	800130c <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d907      	bls.n	8002294 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e15c      	b.n	8002542 <HAL_RCC_OscConfig+0x52e>
 8002288:	40023800 	.word	0x40023800
 800228c:	42470000 	.word	0x42470000
 8002290:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002294:	4b8a      	ldr	r3, [pc, #552]	@ (80024c0 <HAL_RCC_OscConfig+0x4ac>)
 8002296:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1ea      	bne.n	8002276 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 8097 	beq.w	80023dc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ae:	2300      	movs	r3, #0
 80022b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022b2:	4b83      	ldr	r3, [pc, #524]	@ (80024c0 <HAL_RCC_OscConfig+0x4ac>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10f      	bne.n	80022de <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	60bb      	str	r3, [r7, #8]
 80022c2:	4b7f      	ldr	r3, [pc, #508]	@ (80024c0 <HAL_RCC_OscConfig+0x4ac>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c6:	4a7e      	ldr	r2, [pc, #504]	@ (80024c0 <HAL_RCC_OscConfig+0x4ac>)
 80022c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ce:	4b7c      	ldr	r3, [pc, #496]	@ (80024c0 <HAL_RCC_OscConfig+0x4ac>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022d6:	60bb      	str	r3, [r7, #8]
 80022d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022da:	2301      	movs	r3, #1
 80022dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022de:	4b79      	ldr	r3, [pc, #484]	@ (80024c4 <HAL_RCC_OscConfig+0x4b0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d118      	bne.n	800231c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ea:	4b76      	ldr	r3, [pc, #472]	@ (80024c4 <HAL_RCC_OscConfig+0x4b0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a75      	ldr	r2, [pc, #468]	@ (80024c4 <HAL_RCC_OscConfig+0x4b0>)
 80022f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022f6:	f7ff f809 	bl	800130c <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022fe:	f7ff f805 	bl	800130c <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e118      	b.n	8002542 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002310:	4b6c      	ldr	r3, [pc, #432]	@ (80024c4 <HAL_RCC_OscConfig+0x4b0>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0f0      	beq.n	80022fe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d106      	bne.n	8002332 <HAL_RCC_OscConfig+0x31e>
 8002324:	4b66      	ldr	r3, [pc, #408]	@ (80024c0 <HAL_RCC_OscConfig+0x4ac>)
 8002326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002328:	4a65      	ldr	r2, [pc, #404]	@ (80024c0 <HAL_RCC_OscConfig+0x4ac>)
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002330:	e01c      	b.n	800236c <HAL_RCC_OscConfig+0x358>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	2b05      	cmp	r3, #5
 8002338:	d10c      	bne.n	8002354 <HAL_RCC_OscConfig+0x340>
 800233a:	4b61      	ldr	r3, [pc, #388]	@ (80024c0 <HAL_RCC_OscConfig+0x4ac>)
 800233c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800233e:	4a60      	ldr	r2, [pc, #384]	@ (80024c0 <HAL_RCC_OscConfig+0x4ac>)
 8002340:	f043 0304 	orr.w	r3, r3, #4
 8002344:	6713      	str	r3, [r2, #112]	@ 0x70
 8002346:	4b5e      	ldr	r3, [pc, #376]	@ (80024c0 <HAL_RCC_OscConfig+0x4ac>)
 8002348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800234a:	4a5d      	ldr	r2, [pc, #372]	@ (80024c0 <HAL_RCC_OscConfig+0x4ac>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	6713      	str	r3, [r2, #112]	@ 0x70
 8002352:	e00b      	b.n	800236c <HAL_RCC_OscConfig+0x358>
 8002354:	4b5a      	ldr	r3, [pc, #360]	@ (80024c0 <HAL_RCC_OscConfig+0x4ac>)
 8002356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002358:	4a59      	ldr	r2, [pc, #356]	@ (80024c0 <HAL_RCC_OscConfig+0x4ac>)
 800235a:	f023 0301 	bic.w	r3, r3, #1
 800235e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002360:	4b57      	ldr	r3, [pc, #348]	@ (80024c0 <HAL_RCC_OscConfig+0x4ac>)
 8002362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002364:	4a56      	ldr	r2, [pc, #344]	@ (80024c0 <HAL_RCC_OscConfig+0x4ac>)
 8002366:	f023 0304 	bic.w	r3, r3, #4
 800236a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d015      	beq.n	80023a0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002374:	f7fe ffca 	bl	800130c <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800237a:	e00a      	b.n	8002392 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800237c:	f7fe ffc6 	bl	800130c <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	f241 3288 	movw	r2, #5000	@ 0x1388
 800238a:	4293      	cmp	r3, r2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e0d7      	b.n	8002542 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002392:	4b4b      	ldr	r3, [pc, #300]	@ (80024c0 <HAL_RCC_OscConfig+0x4ac>)
 8002394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0ee      	beq.n	800237c <HAL_RCC_OscConfig+0x368>
 800239e:	e014      	b.n	80023ca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a0:	f7fe ffb4 	bl	800130c <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023a6:	e00a      	b.n	80023be <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a8:	f7fe ffb0 	bl	800130c <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e0c1      	b.n	8002542 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023be:	4b40      	ldr	r3, [pc, #256]	@ (80024c0 <HAL_RCC_OscConfig+0x4ac>)
 80023c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1ee      	bne.n	80023a8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023ca:	7dfb      	ldrb	r3, [r7, #23]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d105      	bne.n	80023dc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023d0:	4b3b      	ldr	r3, [pc, #236]	@ (80024c0 <HAL_RCC_OscConfig+0x4ac>)
 80023d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d4:	4a3a      	ldr	r2, [pc, #232]	@ (80024c0 <HAL_RCC_OscConfig+0x4ac>)
 80023d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 80ad 	beq.w	8002540 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023e6:	4b36      	ldr	r3, [pc, #216]	@ (80024c0 <HAL_RCC_OscConfig+0x4ac>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 030c 	and.w	r3, r3, #12
 80023ee:	2b08      	cmp	r3, #8
 80023f0:	d060      	beq.n	80024b4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d145      	bne.n	8002486 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023fa:	4b33      	ldr	r3, [pc, #204]	@ (80024c8 <HAL_RCC_OscConfig+0x4b4>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002400:	f7fe ff84 	bl	800130c <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002408:	f7fe ff80 	bl	800130c <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e093      	b.n	8002542 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800241a:	4b29      	ldr	r3, [pc, #164]	@ (80024c0 <HAL_RCC_OscConfig+0x4ac>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f0      	bne.n	8002408 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	69da      	ldr	r2, [r3, #28]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002434:	019b      	lsls	r3, r3, #6
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243c:	085b      	lsrs	r3, r3, #1
 800243e:	3b01      	subs	r3, #1
 8002440:	041b      	lsls	r3, r3, #16
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002448:	061b      	lsls	r3, r3, #24
 800244a:	431a      	orrs	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002450:	071b      	lsls	r3, r3, #28
 8002452:	491b      	ldr	r1, [pc, #108]	@ (80024c0 <HAL_RCC_OscConfig+0x4ac>)
 8002454:	4313      	orrs	r3, r2
 8002456:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002458:	4b1b      	ldr	r3, [pc, #108]	@ (80024c8 <HAL_RCC_OscConfig+0x4b4>)
 800245a:	2201      	movs	r2, #1
 800245c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245e:	f7fe ff55 	bl	800130c <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002466:	f7fe ff51 	bl	800130c <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e064      	b.n	8002542 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002478:	4b11      	ldr	r3, [pc, #68]	@ (80024c0 <HAL_RCC_OscConfig+0x4ac>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0f0      	beq.n	8002466 <HAL_RCC_OscConfig+0x452>
 8002484:	e05c      	b.n	8002540 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002486:	4b10      	ldr	r3, [pc, #64]	@ (80024c8 <HAL_RCC_OscConfig+0x4b4>)
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248c:	f7fe ff3e 	bl	800130c <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002494:	f7fe ff3a 	bl	800130c <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e04d      	b.n	8002542 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a6:	4b06      	ldr	r3, [pc, #24]	@ (80024c0 <HAL_RCC_OscConfig+0x4ac>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f0      	bne.n	8002494 <HAL_RCC_OscConfig+0x480>
 80024b2:	e045      	b.n	8002540 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d107      	bne.n	80024cc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e040      	b.n	8002542 <HAL_RCC_OscConfig+0x52e>
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40007000 	.word	0x40007000
 80024c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024cc:	4b1f      	ldr	r3, [pc, #124]	@ (800254c <HAL_RCC_OscConfig+0x538>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d030      	beq.n	800253c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d129      	bne.n	800253c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d122      	bne.n	800253c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80024fc:	4013      	ands	r3, r2
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002502:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002504:	4293      	cmp	r3, r2
 8002506:	d119      	bne.n	800253c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002512:	085b      	lsrs	r3, r3, #1
 8002514:	3b01      	subs	r3, #1
 8002516:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002518:	429a      	cmp	r2, r3
 800251a:	d10f      	bne.n	800253c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002526:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002528:	429a      	cmp	r2, r3
 800252a:	d107      	bne.n	800253c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002536:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002538:	429a      	cmp	r2, r3
 800253a:	d001      	beq.n	8002540 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e000      	b.n	8002542 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40023800 	.word	0x40023800

08002550 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e041      	b.n	80025e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d106      	bne.n	800257c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7fe fc96 	bl	8000ea8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2202      	movs	r2, #2
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3304      	adds	r3, #4
 800258c:	4619      	mov	r1, r3
 800258e:	4610      	mov	r0, r2
 8002590:	f000 fd6e 	bl	8003070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
	...

080025f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b01      	cmp	r3, #1
 8002602:	d001      	beq.n	8002608 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e04e      	b.n	80026a6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2202      	movs	r2, #2
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68da      	ldr	r2, [r3, #12]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f042 0201 	orr.w	r2, r2, #1
 800261e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a23      	ldr	r2, [pc, #140]	@ (80026b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d022      	beq.n	8002670 <HAL_TIM_Base_Start_IT+0x80>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002632:	d01d      	beq.n	8002670 <HAL_TIM_Base_Start_IT+0x80>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a1f      	ldr	r2, [pc, #124]	@ (80026b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d018      	beq.n	8002670 <HAL_TIM_Base_Start_IT+0x80>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a1e      	ldr	r2, [pc, #120]	@ (80026bc <HAL_TIM_Base_Start_IT+0xcc>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d013      	beq.n	8002670 <HAL_TIM_Base_Start_IT+0x80>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a1c      	ldr	r2, [pc, #112]	@ (80026c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d00e      	beq.n	8002670 <HAL_TIM_Base_Start_IT+0x80>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a1b      	ldr	r2, [pc, #108]	@ (80026c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d009      	beq.n	8002670 <HAL_TIM_Base_Start_IT+0x80>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a19      	ldr	r2, [pc, #100]	@ (80026c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d004      	beq.n	8002670 <HAL_TIM_Base_Start_IT+0x80>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a18      	ldr	r2, [pc, #96]	@ (80026cc <HAL_TIM_Base_Start_IT+0xdc>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d111      	bne.n	8002694 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2b06      	cmp	r3, #6
 8002680:	d010      	beq.n	80026a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f042 0201 	orr.w	r2, r2, #1
 8002690:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002692:	e007      	b.n	80026a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0201 	orr.w	r2, r2, #1
 80026a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3714      	adds	r7, #20
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	40010000 	.word	0x40010000
 80026b8:	40000400 	.word	0x40000400
 80026bc:	40000800 	.word	0x40000800
 80026c0:	40000c00 	.word	0x40000c00
 80026c4:	40010400 	.word	0x40010400
 80026c8:	40014000 	.word	0x40014000
 80026cc:	40001800 	.word	0x40001800

080026d0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68da      	ldr	r2, [r3, #12]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0201 	bic.w	r2, r2, #1
 80026e6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6a1a      	ldr	r2, [r3, #32]
 80026ee:	f241 1311 	movw	r3, #4369	@ 0x1111
 80026f2:	4013      	ands	r3, r2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10f      	bne.n	8002718 <HAL_TIM_Base_Stop_IT+0x48>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6a1a      	ldr	r2, [r3, #32]
 80026fe:	f240 4344 	movw	r3, #1092	@ 0x444
 8002702:	4013      	ands	r3, r2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d107      	bne.n	8002718 <HAL_TIM_Base_Stop_IT+0x48>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0201 	bic.w	r2, r2, #1
 8002716:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e041      	b.n	80027c4 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d106      	bne.n	800275a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 f839 	bl	80027cc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2202      	movs	r2, #2
 800275e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3304      	adds	r3, #4
 800276a:	4619      	mov	r1, r3
 800276c:	4610      	mov	r0, r2
 800276e:	f000 fc7f 	bl	8003070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027ea:	2300      	movs	r3, #0
 80027ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d104      	bne.n	80027fe <HAL_TIM_IC_Start_IT+0x1e>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	e013      	b.n	8002826 <HAL_TIM_IC_Start_IT+0x46>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	2b04      	cmp	r3, #4
 8002802:	d104      	bne.n	800280e <HAL_TIM_IC_Start_IT+0x2e>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800280a:	b2db      	uxtb	r3, r3
 800280c:	e00b      	b.n	8002826 <HAL_TIM_IC_Start_IT+0x46>
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	2b08      	cmp	r3, #8
 8002812:	d104      	bne.n	800281e <HAL_TIM_IC_Start_IT+0x3e>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800281a:	b2db      	uxtb	r3, r3
 800281c:	e003      	b.n	8002826 <HAL_TIM_IC_Start_IT+0x46>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002824:	b2db      	uxtb	r3, r3
 8002826:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d104      	bne.n	8002838 <HAL_TIM_IC_Start_IT+0x58>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002834:	b2db      	uxtb	r3, r3
 8002836:	e013      	b.n	8002860 <HAL_TIM_IC_Start_IT+0x80>
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	2b04      	cmp	r3, #4
 800283c:	d104      	bne.n	8002848 <HAL_TIM_IC_Start_IT+0x68>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002844:	b2db      	uxtb	r3, r3
 8002846:	e00b      	b.n	8002860 <HAL_TIM_IC_Start_IT+0x80>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	2b08      	cmp	r3, #8
 800284c:	d104      	bne.n	8002858 <HAL_TIM_IC_Start_IT+0x78>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002854:	b2db      	uxtb	r3, r3
 8002856:	e003      	b.n	8002860 <HAL_TIM_IC_Start_IT+0x80>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800285e:	b2db      	uxtb	r3, r3
 8002860:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002862:	7bbb      	ldrb	r3, [r7, #14]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d102      	bne.n	800286e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002868:	7b7b      	ldrb	r3, [r7, #13]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d001      	beq.n	8002872 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e0cc      	b.n	8002a0c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d104      	bne.n	8002882 <HAL_TIM_IC_Start_IT+0xa2>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002880:	e013      	b.n	80028aa <HAL_TIM_IC_Start_IT+0xca>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	2b04      	cmp	r3, #4
 8002886:	d104      	bne.n	8002892 <HAL_TIM_IC_Start_IT+0xb2>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002890:	e00b      	b.n	80028aa <HAL_TIM_IC_Start_IT+0xca>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	2b08      	cmp	r3, #8
 8002896:	d104      	bne.n	80028a2 <HAL_TIM_IC_Start_IT+0xc2>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2202      	movs	r2, #2
 800289c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028a0:	e003      	b.n	80028aa <HAL_TIM_IC_Start_IT+0xca>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2202      	movs	r2, #2
 80028a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d104      	bne.n	80028ba <HAL_TIM_IC_Start_IT+0xda>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2202      	movs	r2, #2
 80028b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028b8:	e013      	b.n	80028e2 <HAL_TIM_IC_Start_IT+0x102>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d104      	bne.n	80028ca <HAL_TIM_IC_Start_IT+0xea>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2202      	movs	r2, #2
 80028c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80028c8:	e00b      	b.n	80028e2 <HAL_TIM_IC_Start_IT+0x102>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d104      	bne.n	80028da <HAL_TIM_IC_Start_IT+0xfa>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2202      	movs	r2, #2
 80028d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028d8:	e003      	b.n	80028e2 <HAL_TIM_IC_Start_IT+0x102>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2202      	movs	r2, #2
 80028de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	2b0c      	cmp	r3, #12
 80028e6:	d841      	bhi.n	800296c <HAL_TIM_IC_Start_IT+0x18c>
 80028e8:	a201      	add	r2, pc, #4	@ (adr r2, 80028f0 <HAL_TIM_IC_Start_IT+0x110>)
 80028ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ee:	bf00      	nop
 80028f0:	08002925 	.word	0x08002925
 80028f4:	0800296d 	.word	0x0800296d
 80028f8:	0800296d 	.word	0x0800296d
 80028fc:	0800296d 	.word	0x0800296d
 8002900:	08002937 	.word	0x08002937
 8002904:	0800296d 	.word	0x0800296d
 8002908:	0800296d 	.word	0x0800296d
 800290c:	0800296d 	.word	0x0800296d
 8002910:	08002949 	.word	0x08002949
 8002914:	0800296d 	.word	0x0800296d
 8002918:	0800296d 	.word	0x0800296d
 800291c:	0800296d 	.word	0x0800296d
 8002920:	0800295b 	.word	0x0800295b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68da      	ldr	r2, [r3, #12]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f042 0202 	orr.w	r2, r2, #2
 8002932:	60da      	str	r2, [r3, #12]
      break;
 8002934:	e01d      	b.n	8002972 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68da      	ldr	r2, [r3, #12]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f042 0204 	orr.w	r2, r2, #4
 8002944:	60da      	str	r2, [r3, #12]
      break;
 8002946:	e014      	b.n	8002972 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0208 	orr.w	r2, r2, #8
 8002956:	60da      	str	r2, [r3, #12]
      break;
 8002958:	e00b      	b.n	8002972 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f042 0210 	orr.w	r2, r2, #16
 8002968:	60da      	str	r2, [r3, #12]
      break;
 800296a:	e002      	b.n	8002972 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	73fb      	strb	r3, [r7, #15]
      break;
 8002970:	bf00      	nop
  }

  if (status == HAL_OK)
 8002972:	7bfb      	ldrb	r3, [r7, #15]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d148      	bne.n	8002a0a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2201      	movs	r2, #1
 800297e:	6839      	ldr	r1, [r7, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f000 fde5 	bl	8003550 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a22      	ldr	r2, [pc, #136]	@ (8002a14 <HAL_TIM_IC_Start_IT+0x234>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d022      	beq.n	80029d6 <HAL_TIM_IC_Start_IT+0x1f6>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002998:	d01d      	beq.n	80029d6 <HAL_TIM_IC_Start_IT+0x1f6>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a1e      	ldr	r2, [pc, #120]	@ (8002a18 <HAL_TIM_IC_Start_IT+0x238>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d018      	beq.n	80029d6 <HAL_TIM_IC_Start_IT+0x1f6>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a1c      	ldr	r2, [pc, #112]	@ (8002a1c <HAL_TIM_IC_Start_IT+0x23c>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d013      	beq.n	80029d6 <HAL_TIM_IC_Start_IT+0x1f6>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a1b      	ldr	r2, [pc, #108]	@ (8002a20 <HAL_TIM_IC_Start_IT+0x240>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d00e      	beq.n	80029d6 <HAL_TIM_IC_Start_IT+0x1f6>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a19      	ldr	r2, [pc, #100]	@ (8002a24 <HAL_TIM_IC_Start_IT+0x244>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d009      	beq.n	80029d6 <HAL_TIM_IC_Start_IT+0x1f6>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a18      	ldr	r2, [pc, #96]	@ (8002a28 <HAL_TIM_IC_Start_IT+0x248>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d004      	beq.n	80029d6 <HAL_TIM_IC_Start_IT+0x1f6>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a16      	ldr	r2, [pc, #88]	@ (8002a2c <HAL_TIM_IC_Start_IT+0x24c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d111      	bne.n	80029fa <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2b06      	cmp	r3, #6
 80029e6:	d010      	beq.n	8002a0a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f8:	e007      	b.n	8002a0a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f042 0201 	orr.w	r2, r2, #1
 8002a08:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40010000 	.word	0x40010000
 8002a18:	40000400 	.word	0x40000400
 8002a1c:	40000800 	.word	0x40000800
 8002a20:	40000c00 	.word	0x40000c00
 8002a24:	40010400 	.word	0x40010400
 8002a28:	40014000 	.word	0x40014000
 8002a2c:	40001800 	.word	0x40001800

08002a30 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b0c      	cmp	r3, #12
 8002a42:	d841      	bhi.n	8002ac8 <HAL_TIM_IC_Stop_IT+0x98>
 8002a44:	a201      	add	r2, pc, #4	@ (adr r2, 8002a4c <HAL_TIM_IC_Stop_IT+0x1c>)
 8002a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a4a:	bf00      	nop
 8002a4c:	08002a81 	.word	0x08002a81
 8002a50:	08002ac9 	.word	0x08002ac9
 8002a54:	08002ac9 	.word	0x08002ac9
 8002a58:	08002ac9 	.word	0x08002ac9
 8002a5c:	08002a93 	.word	0x08002a93
 8002a60:	08002ac9 	.word	0x08002ac9
 8002a64:	08002ac9 	.word	0x08002ac9
 8002a68:	08002ac9 	.word	0x08002ac9
 8002a6c:	08002aa5 	.word	0x08002aa5
 8002a70:	08002ac9 	.word	0x08002ac9
 8002a74:	08002ac9 	.word	0x08002ac9
 8002a78:	08002ac9 	.word	0x08002ac9
 8002a7c:	08002ab7 	.word	0x08002ab7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0202 	bic.w	r2, r2, #2
 8002a8e:	60da      	str	r2, [r3, #12]
      break;
 8002a90:	e01d      	b.n	8002ace <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0204 	bic.w	r2, r2, #4
 8002aa0:	60da      	str	r2, [r3, #12]
      break;
 8002aa2:	e014      	b.n	8002ace <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0208 	bic.w	r2, r2, #8
 8002ab2:	60da      	str	r2, [r3, #12]
      break;
 8002ab4:	e00b      	b.n	8002ace <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68da      	ldr	r2, [r3, #12]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 0210 	bic.w	r2, r2, #16
 8002ac4:	60da      	str	r2, [r3, #12]
      break;
 8002ac6:	e002      	b.n	8002ace <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
      break;
 8002acc:	bf00      	nop
  }

  if (status == HAL_OK)
 8002ace:	7bfb      	ldrb	r3, [r7, #15]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d156      	bne.n	8002b82 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	6839      	ldr	r1, [r7, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 fd37 	bl	8003550 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6a1a      	ldr	r2, [r3, #32]
 8002ae8:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002aec:	4013      	ands	r3, r2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10f      	bne.n	8002b12 <HAL_TIM_IC_Stop_IT+0xe2>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6a1a      	ldr	r2, [r3, #32]
 8002af8:	f240 4344 	movw	r3, #1092	@ 0x444
 8002afc:	4013      	ands	r3, r2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d107      	bne.n	8002b12 <HAL_TIM_IC_Stop_IT+0xe2>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0201 	bic.w	r2, r2, #1
 8002b10:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d104      	bne.n	8002b22 <HAL_TIM_IC_Stop_IT+0xf2>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b20:	e013      	b.n	8002b4a <HAL_TIM_IC_Stop_IT+0x11a>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d104      	bne.n	8002b32 <HAL_TIM_IC_Stop_IT+0x102>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b30:	e00b      	b.n	8002b4a <HAL_TIM_IC_Stop_IT+0x11a>
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	2b08      	cmp	r3, #8
 8002b36:	d104      	bne.n	8002b42 <HAL_TIM_IC_Stop_IT+0x112>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b40:	e003      	b.n	8002b4a <HAL_TIM_IC_Stop_IT+0x11a>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d104      	bne.n	8002b5a <HAL_TIM_IC_Stop_IT+0x12a>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b58:	e013      	b.n	8002b82 <HAL_TIM_IC_Stop_IT+0x152>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d104      	bne.n	8002b6a <HAL_TIM_IC_Stop_IT+0x13a>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b68:	e00b      	b.n	8002b82 <HAL_TIM_IC_Stop_IT+0x152>
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d104      	bne.n	8002b7a <HAL_TIM_IC_Stop_IT+0x14a>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b78:	e003      	b.n	8002b82 <HAL_TIM_IC_Stop_IT+0x152>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d020      	beq.n	8002bf0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d01b      	beq.n	8002bf0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f06f 0202 	mvn.w	r2, #2
 8002bc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7fe f9b4 	bl	8000f44 <HAL_TIM_IC_CaptureCallback>
 8002bdc:	e005      	b.n	8002bea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 fa27 	bl	8003032 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 fa2e 	bl	8003046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	f003 0304 	and.w	r3, r3, #4
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d020      	beq.n	8002c3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f003 0304 	and.w	r3, r3, #4
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d01b      	beq.n	8002c3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f06f 0204 	mvn.w	r2, #4
 8002c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2202      	movs	r2, #2
 8002c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7fe f98e 	bl	8000f44 <HAL_TIM_IC_CaptureCallback>
 8002c28:	e005      	b.n	8002c36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 fa01 	bl	8003032 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 fa08 	bl	8003046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	f003 0308 	and.w	r3, r3, #8
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d020      	beq.n	8002c88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f003 0308 	and.w	r3, r3, #8
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d01b      	beq.n	8002c88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f06f 0208 	mvn.w	r2, #8
 8002c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2204      	movs	r2, #4
 8002c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	f003 0303 	and.w	r3, r3, #3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7fe f968 	bl	8000f44 <HAL_TIM_IC_CaptureCallback>
 8002c74:	e005      	b.n	8002c82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f9db 	bl	8003032 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f9e2 	bl	8003046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	f003 0310 	and.w	r3, r3, #16
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d020      	beq.n	8002cd4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f003 0310 	and.w	r3, r3, #16
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d01b      	beq.n	8002cd4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f06f 0210 	mvn.w	r2, #16
 8002ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2208      	movs	r2, #8
 8002caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7fe f942 	bl	8000f44 <HAL_TIM_IC_CaptureCallback>
 8002cc0:	e005      	b.n	8002cce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f9b5 	bl	8003032 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f9bc 	bl	8003046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00c      	beq.n	8002cf8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d007      	beq.n	8002cf8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f06f 0201 	mvn.w	r2, #1
 8002cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7fe f970 	bl	8000fd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00c      	beq.n	8002d1c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d007      	beq.n	8002d1c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 fcc6 	bl	80036a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00c      	beq.n	8002d40 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d007      	beq.n	8002d40 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f98d 	bl	800305a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	f003 0320 	and.w	r3, r3, #32
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00c      	beq.n	8002d64 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f003 0320 	and.w	r3, r3, #32
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d007      	beq.n	8002d64 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f06f 0220 	mvn.w	r2, #32
 8002d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 fc98 	bl	8003694 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d64:	bf00      	nop
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d101      	bne.n	8002d8a <HAL_TIM_IC_ConfigChannel+0x1e>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e088      	b.n	8002e9c <HAL_TIM_IC_ConfigChannel+0x130>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d11b      	bne.n	8002dd0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002da8:	f000 fa0e 	bl	80031c8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699a      	ldr	r2, [r3, #24]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 020c 	bic.w	r2, r2, #12
 8002dba:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6999      	ldr	r1, [r3, #24]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	619a      	str	r2, [r3, #24]
 8002dce:	e060      	b.n	8002e92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d11c      	bne.n	8002e10 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002de6:	f000 fa92 	bl	800330e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	699a      	ldr	r2, [r3, #24]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002df8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6999      	ldr	r1, [r3, #24]
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	021a      	lsls	r2, r3, #8
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	619a      	str	r2, [r3, #24]
 8002e0e:	e040      	b.n	8002e92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b08      	cmp	r3, #8
 8002e14:	d11b      	bne.n	8002e4e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002e26:	f000 fadf 	bl	80033e8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	69da      	ldr	r2, [r3, #28]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 020c 	bic.w	r2, r2, #12
 8002e38:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	69d9      	ldr	r1, [r3, #28]
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	61da      	str	r2, [r3, #28]
 8002e4c:	e021      	b.n	8002e92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b0c      	cmp	r3, #12
 8002e52:	d11c      	bne.n	8002e8e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002e64:	f000 fafc 	bl	8003460 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	69da      	ldr	r2, [r3, #28]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002e76:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	69d9      	ldr	r1, [r3, #28]
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	021a      	lsls	r2, r3, #8
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	61da      	str	r2, [r3, #28]
 8002e8c:	e001      	b.n	8002e92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_TIM_ConfigClockSource+0x1c>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e0b4      	b.n	800302a <HAL_TIM_ConfigClockSource+0x186>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002ede:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ee6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ef8:	d03e      	beq.n	8002f78 <HAL_TIM_ConfigClockSource+0xd4>
 8002efa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002efe:	f200 8087 	bhi.w	8003010 <HAL_TIM_ConfigClockSource+0x16c>
 8002f02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f06:	f000 8086 	beq.w	8003016 <HAL_TIM_ConfigClockSource+0x172>
 8002f0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f0e:	d87f      	bhi.n	8003010 <HAL_TIM_ConfigClockSource+0x16c>
 8002f10:	2b70      	cmp	r3, #112	@ 0x70
 8002f12:	d01a      	beq.n	8002f4a <HAL_TIM_ConfigClockSource+0xa6>
 8002f14:	2b70      	cmp	r3, #112	@ 0x70
 8002f16:	d87b      	bhi.n	8003010 <HAL_TIM_ConfigClockSource+0x16c>
 8002f18:	2b60      	cmp	r3, #96	@ 0x60
 8002f1a:	d050      	beq.n	8002fbe <HAL_TIM_ConfigClockSource+0x11a>
 8002f1c:	2b60      	cmp	r3, #96	@ 0x60
 8002f1e:	d877      	bhi.n	8003010 <HAL_TIM_ConfigClockSource+0x16c>
 8002f20:	2b50      	cmp	r3, #80	@ 0x50
 8002f22:	d03c      	beq.n	8002f9e <HAL_TIM_ConfigClockSource+0xfa>
 8002f24:	2b50      	cmp	r3, #80	@ 0x50
 8002f26:	d873      	bhi.n	8003010 <HAL_TIM_ConfigClockSource+0x16c>
 8002f28:	2b40      	cmp	r3, #64	@ 0x40
 8002f2a:	d058      	beq.n	8002fde <HAL_TIM_ConfigClockSource+0x13a>
 8002f2c:	2b40      	cmp	r3, #64	@ 0x40
 8002f2e:	d86f      	bhi.n	8003010 <HAL_TIM_ConfigClockSource+0x16c>
 8002f30:	2b30      	cmp	r3, #48	@ 0x30
 8002f32:	d064      	beq.n	8002ffe <HAL_TIM_ConfigClockSource+0x15a>
 8002f34:	2b30      	cmp	r3, #48	@ 0x30
 8002f36:	d86b      	bhi.n	8003010 <HAL_TIM_ConfigClockSource+0x16c>
 8002f38:	2b20      	cmp	r3, #32
 8002f3a:	d060      	beq.n	8002ffe <HAL_TIM_ConfigClockSource+0x15a>
 8002f3c:	2b20      	cmp	r3, #32
 8002f3e:	d867      	bhi.n	8003010 <HAL_TIM_ConfigClockSource+0x16c>
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d05c      	beq.n	8002ffe <HAL_TIM_ConfigClockSource+0x15a>
 8002f44:	2b10      	cmp	r3, #16
 8002f46:	d05a      	beq.n	8002ffe <HAL_TIM_ConfigClockSource+0x15a>
 8002f48:	e062      	b.n	8003010 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f5a:	f000 fad9 	bl	8003510 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002f6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	609a      	str	r2, [r3, #8]
      break;
 8002f76:	e04f      	b.n	8003018 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f88:	f000 fac2 	bl	8003510 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f9a:	609a      	str	r2, [r3, #8]
      break;
 8002f9c:	e03c      	b.n	8003018 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002faa:	461a      	mov	r2, r3
 8002fac:	f000 f980 	bl	80032b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2150      	movs	r1, #80	@ 0x50
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 fa8f 	bl	80034da <TIM_ITRx_SetConfig>
      break;
 8002fbc:	e02c      	b.n	8003018 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fca:	461a      	mov	r2, r3
 8002fcc:	f000 f9dc 	bl	8003388 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2160      	movs	r1, #96	@ 0x60
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 fa7f 	bl	80034da <TIM_ITRx_SetConfig>
      break;
 8002fdc:	e01c      	b.n	8003018 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fea:	461a      	mov	r2, r3
 8002fec:	f000 f960 	bl	80032b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2140      	movs	r1, #64	@ 0x40
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 fa6f 	bl	80034da <TIM_ITRx_SetConfig>
      break;
 8002ffc:	e00c      	b.n	8003018 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4619      	mov	r1, r3
 8003008:	4610      	mov	r0, r2
 800300a:	f000 fa66 	bl	80034da <TIM_ITRx_SetConfig>
      break;
 800300e:	e003      	b.n	8003018 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	73fb      	strb	r3, [r7, #15]
      break;
 8003014:	e000      	b.n	8003018 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003016:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003028:	7bfb      	ldrb	r3, [r7, #15]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
	...

08003070 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a46      	ldr	r2, [pc, #280]	@ (800319c <TIM_Base_SetConfig+0x12c>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d013      	beq.n	80030b0 <TIM_Base_SetConfig+0x40>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800308e:	d00f      	beq.n	80030b0 <TIM_Base_SetConfig+0x40>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a43      	ldr	r2, [pc, #268]	@ (80031a0 <TIM_Base_SetConfig+0x130>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d00b      	beq.n	80030b0 <TIM_Base_SetConfig+0x40>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a42      	ldr	r2, [pc, #264]	@ (80031a4 <TIM_Base_SetConfig+0x134>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d007      	beq.n	80030b0 <TIM_Base_SetConfig+0x40>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a41      	ldr	r2, [pc, #260]	@ (80031a8 <TIM_Base_SetConfig+0x138>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d003      	beq.n	80030b0 <TIM_Base_SetConfig+0x40>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a40      	ldr	r2, [pc, #256]	@ (80031ac <TIM_Base_SetConfig+0x13c>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d108      	bne.n	80030c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	4313      	orrs	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a35      	ldr	r2, [pc, #212]	@ (800319c <TIM_Base_SetConfig+0x12c>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d02b      	beq.n	8003122 <TIM_Base_SetConfig+0xb2>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030d0:	d027      	beq.n	8003122 <TIM_Base_SetConfig+0xb2>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a32      	ldr	r2, [pc, #200]	@ (80031a0 <TIM_Base_SetConfig+0x130>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d023      	beq.n	8003122 <TIM_Base_SetConfig+0xb2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a31      	ldr	r2, [pc, #196]	@ (80031a4 <TIM_Base_SetConfig+0x134>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d01f      	beq.n	8003122 <TIM_Base_SetConfig+0xb2>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a30      	ldr	r2, [pc, #192]	@ (80031a8 <TIM_Base_SetConfig+0x138>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d01b      	beq.n	8003122 <TIM_Base_SetConfig+0xb2>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a2f      	ldr	r2, [pc, #188]	@ (80031ac <TIM_Base_SetConfig+0x13c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d017      	beq.n	8003122 <TIM_Base_SetConfig+0xb2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a2e      	ldr	r2, [pc, #184]	@ (80031b0 <TIM_Base_SetConfig+0x140>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d013      	beq.n	8003122 <TIM_Base_SetConfig+0xb2>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a2d      	ldr	r2, [pc, #180]	@ (80031b4 <TIM_Base_SetConfig+0x144>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d00f      	beq.n	8003122 <TIM_Base_SetConfig+0xb2>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a2c      	ldr	r2, [pc, #176]	@ (80031b8 <TIM_Base_SetConfig+0x148>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d00b      	beq.n	8003122 <TIM_Base_SetConfig+0xb2>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a2b      	ldr	r2, [pc, #172]	@ (80031bc <TIM_Base_SetConfig+0x14c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d007      	beq.n	8003122 <TIM_Base_SetConfig+0xb2>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a2a      	ldr	r2, [pc, #168]	@ (80031c0 <TIM_Base_SetConfig+0x150>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d003      	beq.n	8003122 <TIM_Base_SetConfig+0xb2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a29      	ldr	r2, [pc, #164]	@ (80031c4 <TIM_Base_SetConfig+0x154>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d108      	bne.n	8003134 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003128:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	4313      	orrs	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	4313      	orrs	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a10      	ldr	r2, [pc, #64]	@ (800319c <TIM_Base_SetConfig+0x12c>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d003      	beq.n	8003168 <TIM_Base_SetConfig+0xf8>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a12      	ldr	r2, [pc, #72]	@ (80031ac <TIM_Base_SetConfig+0x13c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d103      	bne.n	8003170 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	691a      	ldr	r2, [r3, #16]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b01      	cmp	r3, #1
 8003180:	d105      	bne.n	800318e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	f023 0201 	bic.w	r2, r3, #1
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	611a      	str	r2, [r3, #16]
  }
}
 800318e:	bf00      	nop
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	40010000 	.word	0x40010000
 80031a0:	40000400 	.word	0x40000400
 80031a4:	40000800 	.word	0x40000800
 80031a8:	40000c00 	.word	0x40000c00
 80031ac:	40010400 	.word	0x40010400
 80031b0:	40014000 	.word	0x40014000
 80031b4:	40014400 	.word	0x40014400
 80031b8:	40014800 	.word	0x40014800
 80031bc:	40001800 	.word	0x40001800
 80031c0:	40001c00 	.word	0x40001c00
 80031c4:	40002000 	.word	0x40002000

080031c8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b087      	sub	sp, #28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
 80031d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	f023 0201 	bic.w	r2, r3, #1
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4a28      	ldr	r2, [pc, #160]	@ (8003294 <TIM_TI1_SetConfig+0xcc>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d01b      	beq.n	800322e <TIM_TI1_SetConfig+0x66>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031fc:	d017      	beq.n	800322e <TIM_TI1_SetConfig+0x66>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4a25      	ldr	r2, [pc, #148]	@ (8003298 <TIM_TI1_SetConfig+0xd0>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d013      	beq.n	800322e <TIM_TI1_SetConfig+0x66>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4a24      	ldr	r2, [pc, #144]	@ (800329c <TIM_TI1_SetConfig+0xd4>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00f      	beq.n	800322e <TIM_TI1_SetConfig+0x66>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	4a23      	ldr	r2, [pc, #140]	@ (80032a0 <TIM_TI1_SetConfig+0xd8>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d00b      	beq.n	800322e <TIM_TI1_SetConfig+0x66>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	4a22      	ldr	r2, [pc, #136]	@ (80032a4 <TIM_TI1_SetConfig+0xdc>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d007      	beq.n	800322e <TIM_TI1_SetConfig+0x66>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	4a21      	ldr	r2, [pc, #132]	@ (80032a8 <TIM_TI1_SetConfig+0xe0>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d003      	beq.n	800322e <TIM_TI1_SetConfig+0x66>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	4a20      	ldr	r2, [pc, #128]	@ (80032ac <TIM_TI1_SetConfig+0xe4>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d101      	bne.n	8003232 <TIM_TI1_SetConfig+0x6a>
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <TIM_TI1_SetConfig+0x6c>
 8003232:	2300      	movs	r3, #0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d008      	beq.n	800324a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f023 0303 	bic.w	r3, r3, #3
 800323e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4313      	orrs	r3, r2
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	e003      	b.n	8003252 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f043 0301 	orr.w	r3, r3, #1
 8003250:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003258:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	b2db      	uxtb	r3, r3
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	4313      	orrs	r3, r2
 8003264:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	f023 030a 	bic.w	r3, r3, #10
 800326c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	f003 030a 	and.w	r3, r3, #10
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	4313      	orrs	r3, r2
 8003278:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	621a      	str	r2, [r3, #32]
}
 8003286:	bf00      	nop
 8003288:	371c      	adds	r7, #28
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	40010000 	.word	0x40010000
 8003298:	40000400 	.word	0x40000400
 800329c:	40000800 	.word	0x40000800
 80032a0:	40000c00 	.word	0x40000c00
 80032a4:	40010400 	.word	0x40010400
 80032a8:	40014000 	.word	0x40014000
 80032ac:	40001800 	.word	0x40001800

080032b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b087      	sub	sp, #28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	f023 0201 	bic.w	r2, r3, #1
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f023 030a 	bic.w	r3, r3, #10
 80032ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	621a      	str	r2, [r3, #32]
}
 8003302:	bf00      	nop
 8003304:	371c      	adds	r7, #28
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800330e:	b480      	push	{r7}
 8003310:	b087      	sub	sp, #28
 8003312:	af00      	add	r7, sp, #0
 8003314:	60f8      	str	r0, [r7, #12]
 8003316:	60b9      	str	r1, [r7, #8]
 8003318:	607a      	str	r2, [r7, #4]
 800331a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	f023 0210 	bic.w	r2, r3, #16
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800333a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	021b      	lsls	r3, r3, #8
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800334c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	031b      	lsls	r3, r3, #12
 8003352:	b29b      	uxth	r3, r3
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4313      	orrs	r3, r2
 8003358:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003360:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	4313      	orrs	r3, r2
 800336e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	621a      	str	r2, [r3, #32]
}
 800337c:	bf00      	nop
 800337e:	371c      	adds	r7, #28
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003388:	b480      	push	{r7}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	f023 0210 	bic.w	r2, r3, #16
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80033b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	031b      	lsls	r3, r3, #12
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80033c4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	621a      	str	r2, [r3, #32]
}
 80033dc:	bf00      	nop
 80033de:	371c      	adds	r7, #28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b087      	sub	sp, #28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
 80033f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	f023 0303 	bic.w	r3, r3, #3
 8003414:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4313      	orrs	r3, r2
 800341c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003424:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	b2db      	uxtb	r3, r3
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4313      	orrs	r3, r2
 8003430:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003438:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	021b      	lsls	r3, r3, #8
 800343e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	4313      	orrs	r3, r2
 8003446:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	621a      	str	r2, [r3, #32]
}
 8003454:	bf00      	nop
 8003456:	371c      	adds	r7, #28
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003460:	b480      	push	{r7}
 8003462:	b087      	sub	sp, #28
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
 800346c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800348c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	021b      	lsls	r3, r3, #8
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800349e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	031b      	lsls	r3, r3, #12
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80034b2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	031b      	lsls	r3, r3, #12
 80034b8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	4313      	orrs	r3, r2
 80034c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	621a      	str	r2, [r3, #32]
}
 80034ce:	bf00      	nop
 80034d0:	371c      	adds	r7, #28
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034da:	b480      	push	{r7}
 80034dc:	b085      	sub	sp, #20
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
 80034e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f043 0307 	orr.w	r3, r3, #7
 80034fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	609a      	str	r2, [r3, #8]
}
 8003504:	bf00      	nop
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003510:	b480      	push	{r7}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
 800351c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800352a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	021a      	lsls	r2, r3, #8
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	431a      	orrs	r2, r3
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	4313      	orrs	r3, r2
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	4313      	orrs	r3, r2
 800353c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	609a      	str	r2, [r3, #8]
}
 8003544:	bf00      	nop
 8003546:	371c      	adds	r7, #28
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003550:	b480      	push	{r7}
 8003552:	b087      	sub	sp, #28
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	f003 031f 	and.w	r3, r3, #31
 8003562:	2201      	movs	r2, #1
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6a1a      	ldr	r2, [r3, #32]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	43db      	mvns	r3, r3
 8003572:	401a      	ands	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6a1a      	ldr	r2, [r3, #32]
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	f003 031f 	and.w	r3, r3, #31
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	fa01 f303 	lsl.w	r3, r1, r3
 8003588:	431a      	orrs	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	621a      	str	r2, [r3, #32]
}
 800358e:	bf00      	nop
 8003590:	371c      	adds	r7, #28
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
	...

0800359c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d101      	bne.n	80035b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035b0:	2302      	movs	r3, #2
 80035b2:	e05a      	b.n	800366a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a21      	ldr	r2, [pc, #132]	@ (8003678 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d022      	beq.n	800363e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003600:	d01d      	beq.n	800363e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a1d      	ldr	r2, [pc, #116]	@ (800367c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d018      	beq.n	800363e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a1b      	ldr	r2, [pc, #108]	@ (8003680 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d013      	beq.n	800363e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a1a      	ldr	r2, [pc, #104]	@ (8003684 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d00e      	beq.n	800363e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a18      	ldr	r2, [pc, #96]	@ (8003688 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d009      	beq.n	800363e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a17      	ldr	r2, [pc, #92]	@ (800368c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d004      	beq.n	800363e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a15      	ldr	r2, [pc, #84]	@ (8003690 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d10c      	bne.n	8003658 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003644:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	4313      	orrs	r3, r2
 800364e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3714      	adds	r7, #20
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	40010000 	.word	0x40010000
 800367c:	40000400 	.word	0x40000400
 8003680:	40000800 	.word	0x40000800
 8003684:	40000c00 	.word	0x40000c00
 8003688:	40010400 	.word	0x40010400
 800368c:	40014000 	.word	0x40014000
 8003690:	40001800 	.word	0x40001800

08003694 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e042      	b.n	8003754 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d106      	bne.n	80036e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7fd fcde 	bl	80010a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2224      	movs	r2, #36	@ 0x24
 80036ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68da      	ldr	r2, [r3, #12]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 fa09 	bl	8003b18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	691a      	ldr	r2, [r3, #16]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003714:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695a      	ldr	r2, [r3, #20]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003724:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68da      	ldr	r2, [r3, #12]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003734:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2220      	movs	r2, #32
 8003740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2220      	movs	r2, #32
 8003748:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b08a      	sub	sp, #40	@ 0x28
 8003760:	af02      	add	r7, sp, #8
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	603b      	str	r3, [r7, #0]
 8003768:	4613      	mov	r3, r2
 800376a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800376c:	2300      	movs	r3, #0
 800376e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b20      	cmp	r3, #32
 800377a:	d175      	bne.n	8003868 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <HAL_UART_Transmit+0x2c>
 8003782:	88fb      	ldrh	r3, [r7, #6]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d101      	bne.n	800378c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e06e      	b.n	800386a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2221      	movs	r2, #33	@ 0x21
 8003796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800379a:	f7fd fdb7 	bl	800130c <HAL_GetTick>
 800379e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	88fa      	ldrh	r2, [r7, #6]
 80037a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	88fa      	ldrh	r2, [r7, #6]
 80037aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037b4:	d108      	bne.n	80037c8 <HAL_UART_Transmit+0x6c>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d104      	bne.n	80037c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	61bb      	str	r3, [r7, #24]
 80037c6:	e003      	b.n	80037d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037cc:	2300      	movs	r3, #0
 80037ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037d0:	e02e      	b.n	8003830 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2200      	movs	r2, #0
 80037da:	2180      	movs	r1, #128	@ 0x80
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 f8df 	bl	80039a0 <UART_WaitOnFlagUntilTimeout>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e03a      	b.n	800386a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10b      	bne.n	8003812 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	881b      	ldrh	r3, [r3, #0]
 80037fe:	461a      	mov	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003808:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	3302      	adds	r3, #2
 800380e:	61bb      	str	r3, [r7, #24]
 8003810:	e007      	b.n	8003822 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	781a      	ldrb	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	3301      	adds	r3, #1
 8003820:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003826:	b29b      	uxth	r3, r3
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003834:	b29b      	uxth	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1cb      	bne.n	80037d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	2200      	movs	r2, #0
 8003842:	2140      	movs	r1, #64	@ 0x40
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f000 f8ab 	bl	80039a0 <UART_WaitOnFlagUntilTimeout>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d005      	beq.n	800385c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2220      	movs	r2, #32
 8003854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e006      	b.n	800386a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003864:	2300      	movs	r3, #0
 8003866:	e000      	b.n	800386a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003868:	2302      	movs	r3, #2
  }
}
 800386a:	4618      	mov	r0, r3
 800386c:	3720      	adds	r7, #32
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b08a      	sub	sp, #40	@ 0x28
 8003876:	af02      	add	r7, sp, #8
 8003878:	60f8      	str	r0, [r7, #12]
 800387a:	60b9      	str	r1, [r7, #8]
 800387c:	603b      	str	r3, [r7, #0]
 800387e:	4613      	mov	r3, r2
 8003880:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003882:	2300      	movs	r3, #0
 8003884:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b20      	cmp	r3, #32
 8003890:	f040 8081 	bne.w	8003996 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d002      	beq.n	80038a0 <HAL_UART_Receive+0x2e>
 800389a:	88fb      	ldrh	r3, [r7, #6]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e079      	b.n	8003998 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2222      	movs	r2, #34	@ 0x22
 80038ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038b8:	f7fd fd28 	bl	800130c <HAL_GetTick>
 80038bc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	88fa      	ldrh	r2, [r7, #6]
 80038c2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	88fa      	ldrh	r2, [r7, #6]
 80038c8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038d2:	d108      	bne.n	80038e6 <HAL_UART_Receive+0x74>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d104      	bne.n	80038e6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80038dc:	2300      	movs	r3, #0
 80038de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	61bb      	str	r3, [r7, #24]
 80038e4:	e003      	b.n	80038ee <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038ea:	2300      	movs	r3, #0
 80038ec:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80038ee:	e047      	b.n	8003980 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2200      	movs	r2, #0
 80038f8:	2120      	movs	r1, #32
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 f850 	bl	80039a0 <UART_WaitOnFlagUntilTimeout>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d005      	beq.n	8003912 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2220      	movs	r2, #32
 800390a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e042      	b.n	8003998 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10c      	bne.n	8003932 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	b29b      	uxth	r3, r3
 8003920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003924:	b29a      	uxth	r2, r3
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	3302      	adds	r3, #2
 800392e:	61bb      	str	r3, [r7, #24]
 8003930:	e01f      	b.n	8003972 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800393a:	d007      	beq.n	800394c <HAL_UART_Receive+0xda>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10a      	bne.n	800395a <HAL_UART_Receive+0xe8>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d106      	bne.n	800395a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	b2da      	uxtb	r2, r3
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	701a      	strb	r2, [r3, #0]
 8003958:	e008      	b.n	800396c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	b2db      	uxtb	r3, r3
 8003962:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003966:	b2da      	uxtb	r2, r3
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	3301      	adds	r3, #1
 8003970:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003976:	b29b      	uxth	r3, r3
 8003978:	3b01      	subs	r3, #1
 800397a:	b29a      	uxth	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003984:	b29b      	uxth	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1b2      	bne.n	80038f0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2220      	movs	r2, #32
 800398e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	e000      	b.n	8003998 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003996:	2302      	movs	r3, #2
  }
}
 8003998:	4618      	mov	r0, r3
 800399a:	3720      	adds	r7, #32
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	603b      	str	r3, [r7, #0]
 80039ac:	4613      	mov	r3, r2
 80039ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039b0:	e03b      	b.n	8003a2a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b8:	d037      	beq.n	8003a2a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ba:	f7fd fca7 	bl	800130c <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	6a3a      	ldr	r2, [r7, #32]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d302      	bcc.n	80039d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d101      	bne.n	80039d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e03a      	b.n	8003a4a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f003 0304 	and.w	r3, r3, #4
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d023      	beq.n	8003a2a <UART_WaitOnFlagUntilTimeout+0x8a>
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2b80      	cmp	r3, #128	@ 0x80
 80039e6:	d020      	beq.n	8003a2a <UART_WaitOnFlagUntilTimeout+0x8a>
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2b40      	cmp	r3, #64	@ 0x40
 80039ec:	d01d      	beq.n	8003a2a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0308 	and.w	r3, r3, #8
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	d116      	bne.n	8003a2a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80039fc:	2300      	movs	r3, #0
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	617b      	str	r3, [r7, #20]
 8003a10:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f000 f81d 	bl	8003a52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2208      	movs	r2, #8
 8003a1c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e00f      	b.n	8003a4a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	4013      	ands	r3, r2
 8003a34:	68ba      	ldr	r2, [r7, #8]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	bf0c      	ite	eq
 8003a3a:	2301      	moveq	r3, #1
 8003a3c:	2300      	movne	r3, #0
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	461a      	mov	r2, r3
 8003a42:	79fb      	ldrb	r3, [r7, #7]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d0b4      	beq.n	80039b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3718      	adds	r7, #24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b095      	sub	sp, #84	@ 0x54
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	330c      	adds	r3, #12
 8003a60:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a64:	e853 3f00 	ldrex	r3, [r3]
 8003a68:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	330c      	adds	r3, #12
 8003a78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a7a:	643a      	str	r2, [r7, #64]	@ 0x40
 8003a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a82:	e841 2300 	strex	r3, r2, [r1]
 8003a86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1e5      	bne.n	8003a5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	3314      	adds	r3, #20
 8003a94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	e853 3f00 	ldrex	r3, [r3]
 8003a9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	f023 0301 	bic.w	r3, r3, #1
 8003aa4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	3314      	adds	r3, #20
 8003aac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003aae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ab4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ab6:	e841 2300 	strex	r3, r2, [r1]
 8003aba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1e5      	bne.n	8003a8e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d119      	bne.n	8003afe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	330c      	adds	r3, #12
 8003ad0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	e853 3f00 	ldrex	r3, [r3]
 8003ad8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	f023 0310 	bic.w	r3, r3, #16
 8003ae0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	330c      	adds	r3, #12
 8003ae8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003aea:	61ba      	str	r2, [r7, #24]
 8003aec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aee:	6979      	ldr	r1, [r7, #20]
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	e841 2300 	strex	r3, r2, [r1]
 8003af6:	613b      	str	r3, [r7, #16]
   return(result);
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1e5      	bne.n	8003aca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2220      	movs	r2, #32
 8003b02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003b0c:	bf00      	nop
 8003b0e:	3754      	adds	r7, #84	@ 0x54
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b1c:	b0c0      	sub	sp, #256	@ 0x100
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b34:	68d9      	ldr	r1, [r3, #12]
 8003b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	ea40 0301 	orr.w	r3, r0, r1
 8003b40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	431a      	orrs	r2, r3
 8003b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003b70:	f021 010c 	bic.w	r1, r1, #12
 8003b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003b7e:	430b      	orrs	r3, r1
 8003b80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b92:	6999      	ldr	r1, [r3, #24]
 8003b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	ea40 0301 	orr.w	r3, r0, r1
 8003b9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	4b8f      	ldr	r3, [pc, #572]	@ (8003de4 <UART_SetConfig+0x2cc>)
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d005      	beq.n	8003bb8 <UART_SetConfig+0xa0>
 8003bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	4b8d      	ldr	r3, [pc, #564]	@ (8003de8 <UART_SetConfig+0x2d0>)
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d104      	bne.n	8003bc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bb8:	f7fd ffe8 	bl	8001b8c <HAL_RCC_GetPCLK2Freq>
 8003bbc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003bc0:	e003      	b.n	8003bca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bc2:	f7fd ffcf 	bl	8001b64 <HAL_RCC_GetPCLK1Freq>
 8003bc6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bce:	69db      	ldr	r3, [r3, #28]
 8003bd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bd4:	f040 810c 	bne.w	8003df0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003be2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003be6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003bea:	4622      	mov	r2, r4
 8003bec:	462b      	mov	r3, r5
 8003bee:	1891      	adds	r1, r2, r2
 8003bf0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003bf2:	415b      	adcs	r3, r3
 8003bf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003bf6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003bfa:	4621      	mov	r1, r4
 8003bfc:	eb12 0801 	adds.w	r8, r2, r1
 8003c00:	4629      	mov	r1, r5
 8003c02:	eb43 0901 	adc.w	r9, r3, r1
 8003c06:	f04f 0200 	mov.w	r2, #0
 8003c0a:	f04f 0300 	mov.w	r3, #0
 8003c0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c1a:	4690      	mov	r8, r2
 8003c1c:	4699      	mov	r9, r3
 8003c1e:	4623      	mov	r3, r4
 8003c20:	eb18 0303 	adds.w	r3, r8, r3
 8003c24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003c28:	462b      	mov	r3, r5
 8003c2a:	eb49 0303 	adc.w	r3, r9, r3
 8003c2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c3e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003c42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c46:	460b      	mov	r3, r1
 8003c48:	18db      	adds	r3, r3, r3
 8003c4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	eb42 0303 	adc.w	r3, r2, r3
 8003c52:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003c58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003c5c:	f7fc fb30 	bl	80002c0 <__aeabi_uldivmod>
 8003c60:	4602      	mov	r2, r0
 8003c62:	460b      	mov	r3, r1
 8003c64:	4b61      	ldr	r3, [pc, #388]	@ (8003dec <UART_SetConfig+0x2d4>)
 8003c66:	fba3 2302 	umull	r2, r3, r3, r2
 8003c6a:	095b      	lsrs	r3, r3, #5
 8003c6c:	011c      	lsls	r4, r3, #4
 8003c6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c72:	2200      	movs	r2, #0
 8003c74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c78:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003c7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003c80:	4642      	mov	r2, r8
 8003c82:	464b      	mov	r3, r9
 8003c84:	1891      	adds	r1, r2, r2
 8003c86:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003c88:	415b      	adcs	r3, r3
 8003c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003c90:	4641      	mov	r1, r8
 8003c92:	eb12 0a01 	adds.w	sl, r2, r1
 8003c96:	4649      	mov	r1, r9
 8003c98:	eb43 0b01 	adc.w	fp, r3, r1
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ca8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cb0:	4692      	mov	sl, r2
 8003cb2:	469b      	mov	fp, r3
 8003cb4:	4643      	mov	r3, r8
 8003cb6:	eb1a 0303 	adds.w	r3, sl, r3
 8003cba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003cbe:	464b      	mov	r3, r9
 8003cc0:	eb4b 0303 	adc.w	r3, fp, r3
 8003cc4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cd4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003cd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	18db      	adds	r3, r3, r3
 8003ce0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	eb42 0303 	adc.w	r3, r2, r3
 8003ce8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003cee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003cf2:	f7fc fae5 	bl	80002c0 <__aeabi_uldivmod>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	4b3b      	ldr	r3, [pc, #236]	@ (8003dec <UART_SetConfig+0x2d4>)
 8003cfe:	fba3 2301 	umull	r2, r3, r3, r1
 8003d02:	095b      	lsrs	r3, r3, #5
 8003d04:	2264      	movs	r2, #100	@ 0x64
 8003d06:	fb02 f303 	mul.w	r3, r2, r3
 8003d0a:	1acb      	subs	r3, r1, r3
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003d12:	4b36      	ldr	r3, [pc, #216]	@ (8003dec <UART_SetConfig+0x2d4>)
 8003d14:	fba3 2302 	umull	r2, r3, r3, r2
 8003d18:	095b      	lsrs	r3, r3, #5
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003d20:	441c      	add	r4, r3
 8003d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d26:	2200      	movs	r2, #0
 8003d28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d2c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003d30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003d34:	4642      	mov	r2, r8
 8003d36:	464b      	mov	r3, r9
 8003d38:	1891      	adds	r1, r2, r2
 8003d3a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d3c:	415b      	adcs	r3, r3
 8003d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003d44:	4641      	mov	r1, r8
 8003d46:	1851      	adds	r1, r2, r1
 8003d48:	6339      	str	r1, [r7, #48]	@ 0x30
 8003d4a:	4649      	mov	r1, r9
 8003d4c:	414b      	adcs	r3, r1
 8003d4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d50:	f04f 0200 	mov.w	r2, #0
 8003d54:	f04f 0300 	mov.w	r3, #0
 8003d58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003d5c:	4659      	mov	r1, fp
 8003d5e:	00cb      	lsls	r3, r1, #3
 8003d60:	4651      	mov	r1, sl
 8003d62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d66:	4651      	mov	r1, sl
 8003d68:	00ca      	lsls	r2, r1, #3
 8003d6a:	4610      	mov	r0, r2
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4603      	mov	r3, r0
 8003d70:	4642      	mov	r2, r8
 8003d72:	189b      	adds	r3, r3, r2
 8003d74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d78:	464b      	mov	r3, r9
 8003d7a:	460a      	mov	r2, r1
 8003d7c:	eb42 0303 	adc.w	r3, r2, r3
 8003d80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d90:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003d94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d98:	460b      	mov	r3, r1
 8003d9a:	18db      	adds	r3, r3, r3
 8003d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d9e:	4613      	mov	r3, r2
 8003da0:	eb42 0303 	adc.w	r3, r2, r3
 8003da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003da6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003daa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003dae:	f7fc fa87 	bl	80002c0 <__aeabi_uldivmod>
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	4b0d      	ldr	r3, [pc, #52]	@ (8003dec <UART_SetConfig+0x2d4>)
 8003db8:	fba3 1302 	umull	r1, r3, r3, r2
 8003dbc:	095b      	lsrs	r3, r3, #5
 8003dbe:	2164      	movs	r1, #100	@ 0x64
 8003dc0:	fb01 f303 	mul.w	r3, r1, r3
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	3332      	adds	r3, #50	@ 0x32
 8003dca:	4a08      	ldr	r2, [pc, #32]	@ (8003dec <UART_SetConfig+0x2d4>)
 8003dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd0:	095b      	lsrs	r3, r3, #5
 8003dd2:	f003 0207 	and.w	r2, r3, #7
 8003dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4422      	add	r2, r4
 8003dde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003de0:	e106      	b.n	8003ff0 <UART_SetConfig+0x4d8>
 8003de2:	bf00      	nop
 8003de4:	40011000 	.word	0x40011000
 8003de8:	40011400 	.word	0x40011400
 8003dec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003df0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003df4:	2200      	movs	r2, #0
 8003df6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003dfa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003dfe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003e02:	4642      	mov	r2, r8
 8003e04:	464b      	mov	r3, r9
 8003e06:	1891      	adds	r1, r2, r2
 8003e08:	6239      	str	r1, [r7, #32]
 8003e0a:	415b      	adcs	r3, r3
 8003e0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e12:	4641      	mov	r1, r8
 8003e14:	1854      	adds	r4, r2, r1
 8003e16:	4649      	mov	r1, r9
 8003e18:	eb43 0501 	adc.w	r5, r3, r1
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	00eb      	lsls	r3, r5, #3
 8003e26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e2a:	00e2      	lsls	r2, r4, #3
 8003e2c:	4614      	mov	r4, r2
 8003e2e:	461d      	mov	r5, r3
 8003e30:	4643      	mov	r3, r8
 8003e32:	18e3      	adds	r3, r4, r3
 8003e34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e38:	464b      	mov	r3, r9
 8003e3a:	eb45 0303 	adc.w	r3, r5, r3
 8003e3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e4e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e52:	f04f 0200 	mov.w	r2, #0
 8003e56:	f04f 0300 	mov.w	r3, #0
 8003e5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003e5e:	4629      	mov	r1, r5
 8003e60:	008b      	lsls	r3, r1, #2
 8003e62:	4621      	mov	r1, r4
 8003e64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e68:	4621      	mov	r1, r4
 8003e6a:	008a      	lsls	r2, r1, #2
 8003e6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003e70:	f7fc fa26 	bl	80002c0 <__aeabi_uldivmod>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	4b60      	ldr	r3, [pc, #384]	@ (8003ffc <UART_SetConfig+0x4e4>)
 8003e7a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e7e:	095b      	lsrs	r3, r3, #5
 8003e80:	011c      	lsls	r4, r3, #4
 8003e82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e86:	2200      	movs	r2, #0
 8003e88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003e94:	4642      	mov	r2, r8
 8003e96:	464b      	mov	r3, r9
 8003e98:	1891      	adds	r1, r2, r2
 8003e9a:	61b9      	str	r1, [r7, #24]
 8003e9c:	415b      	adcs	r3, r3
 8003e9e:	61fb      	str	r3, [r7, #28]
 8003ea0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ea4:	4641      	mov	r1, r8
 8003ea6:	1851      	adds	r1, r2, r1
 8003ea8:	6139      	str	r1, [r7, #16]
 8003eaa:	4649      	mov	r1, r9
 8003eac:	414b      	adcs	r3, r1
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ebc:	4659      	mov	r1, fp
 8003ebe:	00cb      	lsls	r3, r1, #3
 8003ec0:	4651      	mov	r1, sl
 8003ec2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ec6:	4651      	mov	r1, sl
 8003ec8:	00ca      	lsls	r2, r1, #3
 8003eca:	4610      	mov	r0, r2
 8003ecc:	4619      	mov	r1, r3
 8003ece:	4603      	mov	r3, r0
 8003ed0:	4642      	mov	r2, r8
 8003ed2:	189b      	adds	r3, r3, r2
 8003ed4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ed8:	464b      	mov	r3, r9
 8003eda:	460a      	mov	r2, r1
 8003edc:	eb42 0303 	adc.w	r3, r2, r3
 8003ee0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003eee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003ef0:	f04f 0200 	mov.w	r2, #0
 8003ef4:	f04f 0300 	mov.w	r3, #0
 8003ef8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003efc:	4649      	mov	r1, r9
 8003efe:	008b      	lsls	r3, r1, #2
 8003f00:	4641      	mov	r1, r8
 8003f02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f06:	4641      	mov	r1, r8
 8003f08:	008a      	lsls	r2, r1, #2
 8003f0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003f0e:	f7fc f9d7 	bl	80002c0 <__aeabi_uldivmod>
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	4611      	mov	r1, r2
 8003f18:	4b38      	ldr	r3, [pc, #224]	@ (8003ffc <UART_SetConfig+0x4e4>)
 8003f1a:	fba3 2301 	umull	r2, r3, r3, r1
 8003f1e:	095b      	lsrs	r3, r3, #5
 8003f20:	2264      	movs	r2, #100	@ 0x64
 8003f22:	fb02 f303 	mul.w	r3, r2, r3
 8003f26:	1acb      	subs	r3, r1, r3
 8003f28:	011b      	lsls	r3, r3, #4
 8003f2a:	3332      	adds	r3, #50	@ 0x32
 8003f2c:	4a33      	ldr	r2, [pc, #204]	@ (8003ffc <UART_SetConfig+0x4e4>)
 8003f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f32:	095b      	lsrs	r3, r3, #5
 8003f34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f38:	441c      	add	r4, r3
 8003f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f3e:	2200      	movs	r2, #0
 8003f40:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f42:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003f48:	4642      	mov	r2, r8
 8003f4a:	464b      	mov	r3, r9
 8003f4c:	1891      	adds	r1, r2, r2
 8003f4e:	60b9      	str	r1, [r7, #8]
 8003f50:	415b      	adcs	r3, r3
 8003f52:	60fb      	str	r3, [r7, #12]
 8003f54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f58:	4641      	mov	r1, r8
 8003f5a:	1851      	adds	r1, r2, r1
 8003f5c:	6039      	str	r1, [r7, #0]
 8003f5e:	4649      	mov	r1, r9
 8003f60:	414b      	adcs	r3, r1
 8003f62:	607b      	str	r3, [r7, #4]
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	f04f 0300 	mov.w	r3, #0
 8003f6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f70:	4659      	mov	r1, fp
 8003f72:	00cb      	lsls	r3, r1, #3
 8003f74:	4651      	mov	r1, sl
 8003f76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f7a:	4651      	mov	r1, sl
 8003f7c:	00ca      	lsls	r2, r1, #3
 8003f7e:	4610      	mov	r0, r2
 8003f80:	4619      	mov	r1, r3
 8003f82:	4603      	mov	r3, r0
 8003f84:	4642      	mov	r2, r8
 8003f86:	189b      	adds	r3, r3, r2
 8003f88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f8a:	464b      	mov	r3, r9
 8003f8c:	460a      	mov	r2, r1
 8003f8e:	eb42 0303 	adc.w	r3, r2, r3
 8003f92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f9e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	f04f 0300 	mov.w	r3, #0
 8003fa8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003fac:	4649      	mov	r1, r9
 8003fae:	008b      	lsls	r3, r1, #2
 8003fb0:	4641      	mov	r1, r8
 8003fb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fb6:	4641      	mov	r1, r8
 8003fb8:	008a      	lsls	r2, r1, #2
 8003fba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003fbe:	f7fc f97f 	bl	80002c0 <__aeabi_uldivmod>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8003ffc <UART_SetConfig+0x4e4>)
 8003fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8003fcc:	095b      	lsrs	r3, r3, #5
 8003fce:	2164      	movs	r1, #100	@ 0x64
 8003fd0:	fb01 f303 	mul.w	r3, r1, r3
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	011b      	lsls	r3, r3, #4
 8003fd8:	3332      	adds	r3, #50	@ 0x32
 8003fda:	4a08      	ldr	r2, [pc, #32]	@ (8003ffc <UART_SetConfig+0x4e4>)
 8003fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe0:	095b      	lsrs	r3, r3, #5
 8003fe2:	f003 020f 	and.w	r2, r3, #15
 8003fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4422      	add	r2, r4
 8003fee:	609a      	str	r2, [r3, #8]
}
 8003ff0:	bf00      	nop
 8003ff2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ffc:	51eb851f 	.word	0x51eb851f

08004000 <siprintf>:
 8004000:	b40e      	push	{r1, r2, r3}
 8004002:	b500      	push	{lr}
 8004004:	b09c      	sub	sp, #112	@ 0x70
 8004006:	ab1d      	add	r3, sp, #116	@ 0x74
 8004008:	9002      	str	r0, [sp, #8]
 800400a:	9006      	str	r0, [sp, #24]
 800400c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004010:	4809      	ldr	r0, [pc, #36]	@ (8004038 <siprintf+0x38>)
 8004012:	9107      	str	r1, [sp, #28]
 8004014:	9104      	str	r1, [sp, #16]
 8004016:	4909      	ldr	r1, [pc, #36]	@ (800403c <siprintf+0x3c>)
 8004018:	f853 2b04 	ldr.w	r2, [r3], #4
 800401c:	9105      	str	r1, [sp, #20]
 800401e:	6800      	ldr	r0, [r0, #0]
 8004020:	9301      	str	r3, [sp, #4]
 8004022:	a902      	add	r1, sp, #8
 8004024:	f000 f994 	bl	8004350 <_svfiprintf_r>
 8004028:	9b02      	ldr	r3, [sp, #8]
 800402a:	2200      	movs	r2, #0
 800402c:	701a      	strb	r2, [r3, #0]
 800402e:	b01c      	add	sp, #112	@ 0x70
 8004030:	f85d eb04 	ldr.w	lr, [sp], #4
 8004034:	b003      	add	sp, #12
 8004036:	4770      	bx	lr
 8004038:	2000000c 	.word	0x2000000c
 800403c:	ffff0208 	.word	0xffff0208

08004040 <memset>:
 8004040:	4402      	add	r2, r0
 8004042:	4603      	mov	r3, r0
 8004044:	4293      	cmp	r3, r2
 8004046:	d100      	bne.n	800404a <memset+0xa>
 8004048:	4770      	bx	lr
 800404a:	f803 1b01 	strb.w	r1, [r3], #1
 800404e:	e7f9      	b.n	8004044 <memset+0x4>

08004050 <__errno>:
 8004050:	4b01      	ldr	r3, [pc, #4]	@ (8004058 <__errno+0x8>)
 8004052:	6818      	ldr	r0, [r3, #0]
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	2000000c 	.word	0x2000000c

0800405c <__libc_init_array>:
 800405c:	b570      	push	{r4, r5, r6, lr}
 800405e:	4d0d      	ldr	r5, [pc, #52]	@ (8004094 <__libc_init_array+0x38>)
 8004060:	4c0d      	ldr	r4, [pc, #52]	@ (8004098 <__libc_init_array+0x3c>)
 8004062:	1b64      	subs	r4, r4, r5
 8004064:	10a4      	asrs	r4, r4, #2
 8004066:	2600      	movs	r6, #0
 8004068:	42a6      	cmp	r6, r4
 800406a:	d109      	bne.n	8004080 <__libc_init_array+0x24>
 800406c:	4d0b      	ldr	r5, [pc, #44]	@ (800409c <__libc_init_array+0x40>)
 800406e:	4c0c      	ldr	r4, [pc, #48]	@ (80040a0 <__libc_init_array+0x44>)
 8004070:	f000 fc66 	bl	8004940 <_init>
 8004074:	1b64      	subs	r4, r4, r5
 8004076:	10a4      	asrs	r4, r4, #2
 8004078:	2600      	movs	r6, #0
 800407a:	42a6      	cmp	r6, r4
 800407c:	d105      	bne.n	800408a <__libc_init_array+0x2e>
 800407e:	bd70      	pop	{r4, r5, r6, pc}
 8004080:	f855 3b04 	ldr.w	r3, [r5], #4
 8004084:	4798      	blx	r3
 8004086:	3601      	adds	r6, #1
 8004088:	e7ee      	b.n	8004068 <__libc_init_array+0xc>
 800408a:	f855 3b04 	ldr.w	r3, [r5], #4
 800408e:	4798      	blx	r3
 8004090:	3601      	adds	r6, #1
 8004092:	e7f2      	b.n	800407a <__libc_init_array+0x1e>
 8004094:	08004a00 	.word	0x08004a00
 8004098:	08004a00 	.word	0x08004a00
 800409c:	08004a00 	.word	0x08004a00
 80040a0:	08004a04 	.word	0x08004a04

080040a4 <__retarget_lock_acquire_recursive>:
 80040a4:	4770      	bx	lr

080040a6 <__retarget_lock_release_recursive>:
 80040a6:	4770      	bx	lr

080040a8 <_free_r>:
 80040a8:	b538      	push	{r3, r4, r5, lr}
 80040aa:	4605      	mov	r5, r0
 80040ac:	2900      	cmp	r1, #0
 80040ae:	d041      	beq.n	8004134 <_free_r+0x8c>
 80040b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040b4:	1f0c      	subs	r4, r1, #4
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	bfb8      	it	lt
 80040ba:	18e4      	addlt	r4, r4, r3
 80040bc:	f000 f8e0 	bl	8004280 <__malloc_lock>
 80040c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004138 <_free_r+0x90>)
 80040c2:	6813      	ldr	r3, [r2, #0]
 80040c4:	b933      	cbnz	r3, 80040d4 <_free_r+0x2c>
 80040c6:	6063      	str	r3, [r4, #4]
 80040c8:	6014      	str	r4, [r2, #0]
 80040ca:	4628      	mov	r0, r5
 80040cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040d0:	f000 b8dc 	b.w	800428c <__malloc_unlock>
 80040d4:	42a3      	cmp	r3, r4
 80040d6:	d908      	bls.n	80040ea <_free_r+0x42>
 80040d8:	6820      	ldr	r0, [r4, #0]
 80040da:	1821      	adds	r1, r4, r0
 80040dc:	428b      	cmp	r3, r1
 80040de:	bf01      	itttt	eq
 80040e0:	6819      	ldreq	r1, [r3, #0]
 80040e2:	685b      	ldreq	r3, [r3, #4]
 80040e4:	1809      	addeq	r1, r1, r0
 80040e6:	6021      	streq	r1, [r4, #0]
 80040e8:	e7ed      	b.n	80040c6 <_free_r+0x1e>
 80040ea:	461a      	mov	r2, r3
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	b10b      	cbz	r3, 80040f4 <_free_r+0x4c>
 80040f0:	42a3      	cmp	r3, r4
 80040f2:	d9fa      	bls.n	80040ea <_free_r+0x42>
 80040f4:	6811      	ldr	r1, [r2, #0]
 80040f6:	1850      	adds	r0, r2, r1
 80040f8:	42a0      	cmp	r0, r4
 80040fa:	d10b      	bne.n	8004114 <_free_r+0x6c>
 80040fc:	6820      	ldr	r0, [r4, #0]
 80040fe:	4401      	add	r1, r0
 8004100:	1850      	adds	r0, r2, r1
 8004102:	4283      	cmp	r3, r0
 8004104:	6011      	str	r1, [r2, #0]
 8004106:	d1e0      	bne.n	80040ca <_free_r+0x22>
 8004108:	6818      	ldr	r0, [r3, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	6053      	str	r3, [r2, #4]
 800410e:	4408      	add	r0, r1
 8004110:	6010      	str	r0, [r2, #0]
 8004112:	e7da      	b.n	80040ca <_free_r+0x22>
 8004114:	d902      	bls.n	800411c <_free_r+0x74>
 8004116:	230c      	movs	r3, #12
 8004118:	602b      	str	r3, [r5, #0]
 800411a:	e7d6      	b.n	80040ca <_free_r+0x22>
 800411c:	6820      	ldr	r0, [r4, #0]
 800411e:	1821      	adds	r1, r4, r0
 8004120:	428b      	cmp	r3, r1
 8004122:	bf04      	itt	eq
 8004124:	6819      	ldreq	r1, [r3, #0]
 8004126:	685b      	ldreq	r3, [r3, #4]
 8004128:	6063      	str	r3, [r4, #4]
 800412a:	bf04      	itt	eq
 800412c:	1809      	addeq	r1, r1, r0
 800412e:	6021      	streq	r1, [r4, #0]
 8004130:	6054      	str	r4, [r2, #4]
 8004132:	e7ca      	b.n	80040ca <_free_r+0x22>
 8004134:	bd38      	pop	{r3, r4, r5, pc}
 8004136:	bf00      	nop
 8004138:	20009f28 	.word	0x20009f28

0800413c <sbrk_aligned>:
 800413c:	b570      	push	{r4, r5, r6, lr}
 800413e:	4e0f      	ldr	r6, [pc, #60]	@ (800417c <sbrk_aligned+0x40>)
 8004140:	460c      	mov	r4, r1
 8004142:	6831      	ldr	r1, [r6, #0]
 8004144:	4605      	mov	r5, r0
 8004146:	b911      	cbnz	r1, 800414e <sbrk_aligned+0x12>
 8004148:	f000 fba6 	bl	8004898 <_sbrk_r>
 800414c:	6030      	str	r0, [r6, #0]
 800414e:	4621      	mov	r1, r4
 8004150:	4628      	mov	r0, r5
 8004152:	f000 fba1 	bl	8004898 <_sbrk_r>
 8004156:	1c43      	adds	r3, r0, #1
 8004158:	d103      	bne.n	8004162 <sbrk_aligned+0x26>
 800415a:	f04f 34ff 	mov.w	r4, #4294967295
 800415e:	4620      	mov	r0, r4
 8004160:	bd70      	pop	{r4, r5, r6, pc}
 8004162:	1cc4      	adds	r4, r0, #3
 8004164:	f024 0403 	bic.w	r4, r4, #3
 8004168:	42a0      	cmp	r0, r4
 800416a:	d0f8      	beq.n	800415e <sbrk_aligned+0x22>
 800416c:	1a21      	subs	r1, r4, r0
 800416e:	4628      	mov	r0, r5
 8004170:	f000 fb92 	bl	8004898 <_sbrk_r>
 8004174:	3001      	adds	r0, #1
 8004176:	d1f2      	bne.n	800415e <sbrk_aligned+0x22>
 8004178:	e7ef      	b.n	800415a <sbrk_aligned+0x1e>
 800417a:	bf00      	nop
 800417c:	20009f24 	.word	0x20009f24

08004180 <_malloc_r>:
 8004180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004184:	1ccd      	adds	r5, r1, #3
 8004186:	f025 0503 	bic.w	r5, r5, #3
 800418a:	3508      	adds	r5, #8
 800418c:	2d0c      	cmp	r5, #12
 800418e:	bf38      	it	cc
 8004190:	250c      	movcc	r5, #12
 8004192:	2d00      	cmp	r5, #0
 8004194:	4606      	mov	r6, r0
 8004196:	db01      	blt.n	800419c <_malloc_r+0x1c>
 8004198:	42a9      	cmp	r1, r5
 800419a:	d904      	bls.n	80041a6 <_malloc_r+0x26>
 800419c:	230c      	movs	r3, #12
 800419e:	6033      	str	r3, [r6, #0]
 80041a0:	2000      	movs	r0, #0
 80041a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800427c <_malloc_r+0xfc>
 80041aa:	f000 f869 	bl	8004280 <__malloc_lock>
 80041ae:	f8d8 3000 	ldr.w	r3, [r8]
 80041b2:	461c      	mov	r4, r3
 80041b4:	bb44      	cbnz	r4, 8004208 <_malloc_r+0x88>
 80041b6:	4629      	mov	r1, r5
 80041b8:	4630      	mov	r0, r6
 80041ba:	f7ff ffbf 	bl	800413c <sbrk_aligned>
 80041be:	1c43      	adds	r3, r0, #1
 80041c0:	4604      	mov	r4, r0
 80041c2:	d158      	bne.n	8004276 <_malloc_r+0xf6>
 80041c4:	f8d8 4000 	ldr.w	r4, [r8]
 80041c8:	4627      	mov	r7, r4
 80041ca:	2f00      	cmp	r7, #0
 80041cc:	d143      	bne.n	8004256 <_malloc_r+0xd6>
 80041ce:	2c00      	cmp	r4, #0
 80041d0:	d04b      	beq.n	800426a <_malloc_r+0xea>
 80041d2:	6823      	ldr	r3, [r4, #0]
 80041d4:	4639      	mov	r1, r7
 80041d6:	4630      	mov	r0, r6
 80041d8:	eb04 0903 	add.w	r9, r4, r3
 80041dc:	f000 fb5c 	bl	8004898 <_sbrk_r>
 80041e0:	4581      	cmp	r9, r0
 80041e2:	d142      	bne.n	800426a <_malloc_r+0xea>
 80041e4:	6821      	ldr	r1, [r4, #0]
 80041e6:	1a6d      	subs	r5, r5, r1
 80041e8:	4629      	mov	r1, r5
 80041ea:	4630      	mov	r0, r6
 80041ec:	f7ff ffa6 	bl	800413c <sbrk_aligned>
 80041f0:	3001      	adds	r0, #1
 80041f2:	d03a      	beq.n	800426a <_malloc_r+0xea>
 80041f4:	6823      	ldr	r3, [r4, #0]
 80041f6:	442b      	add	r3, r5
 80041f8:	6023      	str	r3, [r4, #0]
 80041fa:	f8d8 3000 	ldr.w	r3, [r8]
 80041fe:	685a      	ldr	r2, [r3, #4]
 8004200:	bb62      	cbnz	r2, 800425c <_malloc_r+0xdc>
 8004202:	f8c8 7000 	str.w	r7, [r8]
 8004206:	e00f      	b.n	8004228 <_malloc_r+0xa8>
 8004208:	6822      	ldr	r2, [r4, #0]
 800420a:	1b52      	subs	r2, r2, r5
 800420c:	d420      	bmi.n	8004250 <_malloc_r+0xd0>
 800420e:	2a0b      	cmp	r2, #11
 8004210:	d917      	bls.n	8004242 <_malloc_r+0xc2>
 8004212:	1961      	adds	r1, r4, r5
 8004214:	42a3      	cmp	r3, r4
 8004216:	6025      	str	r5, [r4, #0]
 8004218:	bf18      	it	ne
 800421a:	6059      	strne	r1, [r3, #4]
 800421c:	6863      	ldr	r3, [r4, #4]
 800421e:	bf08      	it	eq
 8004220:	f8c8 1000 	streq.w	r1, [r8]
 8004224:	5162      	str	r2, [r4, r5]
 8004226:	604b      	str	r3, [r1, #4]
 8004228:	4630      	mov	r0, r6
 800422a:	f000 f82f 	bl	800428c <__malloc_unlock>
 800422e:	f104 000b 	add.w	r0, r4, #11
 8004232:	1d23      	adds	r3, r4, #4
 8004234:	f020 0007 	bic.w	r0, r0, #7
 8004238:	1ac2      	subs	r2, r0, r3
 800423a:	bf1c      	itt	ne
 800423c:	1a1b      	subne	r3, r3, r0
 800423e:	50a3      	strne	r3, [r4, r2]
 8004240:	e7af      	b.n	80041a2 <_malloc_r+0x22>
 8004242:	6862      	ldr	r2, [r4, #4]
 8004244:	42a3      	cmp	r3, r4
 8004246:	bf0c      	ite	eq
 8004248:	f8c8 2000 	streq.w	r2, [r8]
 800424c:	605a      	strne	r2, [r3, #4]
 800424e:	e7eb      	b.n	8004228 <_malloc_r+0xa8>
 8004250:	4623      	mov	r3, r4
 8004252:	6864      	ldr	r4, [r4, #4]
 8004254:	e7ae      	b.n	80041b4 <_malloc_r+0x34>
 8004256:	463c      	mov	r4, r7
 8004258:	687f      	ldr	r7, [r7, #4]
 800425a:	e7b6      	b.n	80041ca <_malloc_r+0x4a>
 800425c:	461a      	mov	r2, r3
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	42a3      	cmp	r3, r4
 8004262:	d1fb      	bne.n	800425c <_malloc_r+0xdc>
 8004264:	2300      	movs	r3, #0
 8004266:	6053      	str	r3, [r2, #4]
 8004268:	e7de      	b.n	8004228 <_malloc_r+0xa8>
 800426a:	230c      	movs	r3, #12
 800426c:	6033      	str	r3, [r6, #0]
 800426e:	4630      	mov	r0, r6
 8004270:	f000 f80c 	bl	800428c <__malloc_unlock>
 8004274:	e794      	b.n	80041a0 <_malloc_r+0x20>
 8004276:	6005      	str	r5, [r0, #0]
 8004278:	e7d6      	b.n	8004228 <_malloc_r+0xa8>
 800427a:	bf00      	nop
 800427c:	20009f28 	.word	0x20009f28

08004280 <__malloc_lock>:
 8004280:	4801      	ldr	r0, [pc, #4]	@ (8004288 <__malloc_lock+0x8>)
 8004282:	f7ff bf0f 	b.w	80040a4 <__retarget_lock_acquire_recursive>
 8004286:	bf00      	nop
 8004288:	20009f20 	.word	0x20009f20

0800428c <__malloc_unlock>:
 800428c:	4801      	ldr	r0, [pc, #4]	@ (8004294 <__malloc_unlock+0x8>)
 800428e:	f7ff bf0a 	b.w	80040a6 <__retarget_lock_release_recursive>
 8004292:	bf00      	nop
 8004294:	20009f20 	.word	0x20009f20

08004298 <__ssputs_r>:
 8004298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800429c:	688e      	ldr	r6, [r1, #8]
 800429e:	461f      	mov	r7, r3
 80042a0:	42be      	cmp	r6, r7
 80042a2:	680b      	ldr	r3, [r1, #0]
 80042a4:	4682      	mov	sl, r0
 80042a6:	460c      	mov	r4, r1
 80042a8:	4690      	mov	r8, r2
 80042aa:	d82d      	bhi.n	8004308 <__ssputs_r+0x70>
 80042ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80042b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80042b4:	d026      	beq.n	8004304 <__ssputs_r+0x6c>
 80042b6:	6965      	ldr	r5, [r4, #20]
 80042b8:	6909      	ldr	r1, [r1, #16]
 80042ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042be:	eba3 0901 	sub.w	r9, r3, r1
 80042c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042c6:	1c7b      	adds	r3, r7, #1
 80042c8:	444b      	add	r3, r9
 80042ca:	106d      	asrs	r5, r5, #1
 80042cc:	429d      	cmp	r5, r3
 80042ce:	bf38      	it	cc
 80042d0:	461d      	movcc	r5, r3
 80042d2:	0553      	lsls	r3, r2, #21
 80042d4:	d527      	bpl.n	8004326 <__ssputs_r+0x8e>
 80042d6:	4629      	mov	r1, r5
 80042d8:	f7ff ff52 	bl	8004180 <_malloc_r>
 80042dc:	4606      	mov	r6, r0
 80042de:	b360      	cbz	r0, 800433a <__ssputs_r+0xa2>
 80042e0:	6921      	ldr	r1, [r4, #16]
 80042e2:	464a      	mov	r2, r9
 80042e4:	f000 fae8 	bl	80048b8 <memcpy>
 80042e8:	89a3      	ldrh	r3, [r4, #12]
 80042ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80042ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042f2:	81a3      	strh	r3, [r4, #12]
 80042f4:	6126      	str	r6, [r4, #16]
 80042f6:	6165      	str	r5, [r4, #20]
 80042f8:	444e      	add	r6, r9
 80042fa:	eba5 0509 	sub.w	r5, r5, r9
 80042fe:	6026      	str	r6, [r4, #0]
 8004300:	60a5      	str	r5, [r4, #8]
 8004302:	463e      	mov	r6, r7
 8004304:	42be      	cmp	r6, r7
 8004306:	d900      	bls.n	800430a <__ssputs_r+0x72>
 8004308:	463e      	mov	r6, r7
 800430a:	6820      	ldr	r0, [r4, #0]
 800430c:	4632      	mov	r2, r6
 800430e:	4641      	mov	r1, r8
 8004310:	f000 faa8 	bl	8004864 <memmove>
 8004314:	68a3      	ldr	r3, [r4, #8]
 8004316:	1b9b      	subs	r3, r3, r6
 8004318:	60a3      	str	r3, [r4, #8]
 800431a:	6823      	ldr	r3, [r4, #0]
 800431c:	4433      	add	r3, r6
 800431e:	6023      	str	r3, [r4, #0]
 8004320:	2000      	movs	r0, #0
 8004322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004326:	462a      	mov	r2, r5
 8004328:	f000 fad4 	bl	80048d4 <_realloc_r>
 800432c:	4606      	mov	r6, r0
 800432e:	2800      	cmp	r0, #0
 8004330:	d1e0      	bne.n	80042f4 <__ssputs_r+0x5c>
 8004332:	6921      	ldr	r1, [r4, #16]
 8004334:	4650      	mov	r0, sl
 8004336:	f7ff feb7 	bl	80040a8 <_free_r>
 800433a:	230c      	movs	r3, #12
 800433c:	f8ca 3000 	str.w	r3, [sl]
 8004340:	89a3      	ldrh	r3, [r4, #12]
 8004342:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004346:	81a3      	strh	r3, [r4, #12]
 8004348:	f04f 30ff 	mov.w	r0, #4294967295
 800434c:	e7e9      	b.n	8004322 <__ssputs_r+0x8a>
	...

08004350 <_svfiprintf_r>:
 8004350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004354:	4698      	mov	r8, r3
 8004356:	898b      	ldrh	r3, [r1, #12]
 8004358:	061b      	lsls	r3, r3, #24
 800435a:	b09d      	sub	sp, #116	@ 0x74
 800435c:	4607      	mov	r7, r0
 800435e:	460d      	mov	r5, r1
 8004360:	4614      	mov	r4, r2
 8004362:	d510      	bpl.n	8004386 <_svfiprintf_r+0x36>
 8004364:	690b      	ldr	r3, [r1, #16]
 8004366:	b973      	cbnz	r3, 8004386 <_svfiprintf_r+0x36>
 8004368:	2140      	movs	r1, #64	@ 0x40
 800436a:	f7ff ff09 	bl	8004180 <_malloc_r>
 800436e:	6028      	str	r0, [r5, #0]
 8004370:	6128      	str	r0, [r5, #16]
 8004372:	b930      	cbnz	r0, 8004382 <_svfiprintf_r+0x32>
 8004374:	230c      	movs	r3, #12
 8004376:	603b      	str	r3, [r7, #0]
 8004378:	f04f 30ff 	mov.w	r0, #4294967295
 800437c:	b01d      	add	sp, #116	@ 0x74
 800437e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004382:	2340      	movs	r3, #64	@ 0x40
 8004384:	616b      	str	r3, [r5, #20]
 8004386:	2300      	movs	r3, #0
 8004388:	9309      	str	r3, [sp, #36]	@ 0x24
 800438a:	2320      	movs	r3, #32
 800438c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004390:	f8cd 800c 	str.w	r8, [sp, #12]
 8004394:	2330      	movs	r3, #48	@ 0x30
 8004396:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004534 <_svfiprintf_r+0x1e4>
 800439a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800439e:	f04f 0901 	mov.w	r9, #1
 80043a2:	4623      	mov	r3, r4
 80043a4:	469a      	mov	sl, r3
 80043a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043aa:	b10a      	cbz	r2, 80043b0 <_svfiprintf_r+0x60>
 80043ac:	2a25      	cmp	r2, #37	@ 0x25
 80043ae:	d1f9      	bne.n	80043a4 <_svfiprintf_r+0x54>
 80043b0:	ebba 0b04 	subs.w	fp, sl, r4
 80043b4:	d00b      	beq.n	80043ce <_svfiprintf_r+0x7e>
 80043b6:	465b      	mov	r3, fp
 80043b8:	4622      	mov	r2, r4
 80043ba:	4629      	mov	r1, r5
 80043bc:	4638      	mov	r0, r7
 80043be:	f7ff ff6b 	bl	8004298 <__ssputs_r>
 80043c2:	3001      	adds	r0, #1
 80043c4:	f000 80a7 	beq.w	8004516 <_svfiprintf_r+0x1c6>
 80043c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80043ca:	445a      	add	r2, fp
 80043cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80043ce:	f89a 3000 	ldrb.w	r3, [sl]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f000 809f 	beq.w	8004516 <_svfiprintf_r+0x1c6>
 80043d8:	2300      	movs	r3, #0
 80043da:	f04f 32ff 	mov.w	r2, #4294967295
 80043de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043e2:	f10a 0a01 	add.w	sl, sl, #1
 80043e6:	9304      	str	r3, [sp, #16]
 80043e8:	9307      	str	r3, [sp, #28]
 80043ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80043ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80043f0:	4654      	mov	r4, sl
 80043f2:	2205      	movs	r2, #5
 80043f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043f8:	484e      	ldr	r0, [pc, #312]	@ (8004534 <_svfiprintf_r+0x1e4>)
 80043fa:	f7fb ff11 	bl	8000220 <memchr>
 80043fe:	9a04      	ldr	r2, [sp, #16]
 8004400:	b9d8      	cbnz	r0, 800443a <_svfiprintf_r+0xea>
 8004402:	06d0      	lsls	r0, r2, #27
 8004404:	bf44      	itt	mi
 8004406:	2320      	movmi	r3, #32
 8004408:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800440c:	0711      	lsls	r1, r2, #28
 800440e:	bf44      	itt	mi
 8004410:	232b      	movmi	r3, #43	@ 0x2b
 8004412:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004416:	f89a 3000 	ldrb.w	r3, [sl]
 800441a:	2b2a      	cmp	r3, #42	@ 0x2a
 800441c:	d015      	beq.n	800444a <_svfiprintf_r+0xfa>
 800441e:	9a07      	ldr	r2, [sp, #28]
 8004420:	4654      	mov	r4, sl
 8004422:	2000      	movs	r0, #0
 8004424:	f04f 0c0a 	mov.w	ip, #10
 8004428:	4621      	mov	r1, r4
 800442a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800442e:	3b30      	subs	r3, #48	@ 0x30
 8004430:	2b09      	cmp	r3, #9
 8004432:	d94b      	bls.n	80044cc <_svfiprintf_r+0x17c>
 8004434:	b1b0      	cbz	r0, 8004464 <_svfiprintf_r+0x114>
 8004436:	9207      	str	r2, [sp, #28]
 8004438:	e014      	b.n	8004464 <_svfiprintf_r+0x114>
 800443a:	eba0 0308 	sub.w	r3, r0, r8
 800443e:	fa09 f303 	lsl.w	r3, r9, r3
 8004442:	4313      	orrs	r3, r2
 8004444:	9304      	str	r3, [sp, #16]
 8004446:	46a2      	mov	sl, r4
 8004448:	e7d2      	b.n	80043f0 <_svfiprintf_r+0xa0>
 800444a:	9b03      	ldr	r3, [sp, #12]
 800444c:	1d19      	adds	r1, r3, #4
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	9103      	str	r1, [sp, #12]
 8004452:	2b00      	cmp	r3, #0
 8004454:	bfbb      	ittet	lt
 8004456:	425b      	neglt	r3, r3
 8004458:	f042 0202 	orrlt.w	r2, r2, #2
 800445c:	9307      	strge	r3, [sp, #28]
 800445e:	9307      	strlt	r3, [sp, #28]
 8004460:	bfb8      	it	lt
 8004462:	9204      	strlt	r2, [sp, #16]
 8004464:	7823      	ldrb	r3, [r4, #0]
 8004466:	2b2e      	cmp	r3, #46	@ 0x2e
 8004468:	d10a      	bne.n	8004480 <_svfiprintf_r+0x130>
 800446a:	7863      	ldrb	r3, [r4, #1]
 800446c:	2b2a      	cmp	r3, #42	@ 0x2a
 800446e:	d132      	bne.n	80044d6 <_svfiprintf_r+0x186>
 8004470:	9b03      	ldr	r3, [sp, #12]
 8004472:	1d1a      	adds	r2, r3, #4
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	9203      	str	r2, [sp, #12]
 8004478:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800447c:	3402      	adds	r4, #2
 800447e:	9305      	str	r3, [sp, #20]
 8004480:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004544 <_svfiprintf_r+0x1f4>
 8004484:	7821      	ldrb	r1, [r4, #0]
 8004486:	2203      	movs	r2, #3
 8004488:	4650      	mov	r0, sl
 800448a:	f7fb fec9 	bl	8000220 <memchr>
 800448e:	b138      	cbz	r0, 80044a0 <_svfiprintf_r+0x150>
 8004490:	9b04      	ldr	r3, [sp, #16]
 8004492:	eba0 000a 	sub.w	r0, r0, sl
 8004496:	2240      	movs	r2, #64	@ 0x40
 8004498:	4082      	lsls	r2, r0
 800449a:	4313      	orrs	r3, r2
 800449c:	3401      	adds	r4, #1
 800449e:	9304      	str	r3, [sp, #16]
 80044a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044a4:	4824      	ldr	r0, [pc, #144]	@ (8004538 <_svfiprintf_r+0x1e8>)
 80044a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80044aa:	2206      	movs	r2, #6
 80044ac:	f7fb feb8 	bl	8000220 <memchr>
 80044b0:	2800      	cmp	r0, #0
 80044b2:	d036      	beq.n	8004522 <_svfiprintf_r+0x1d2>
 80044b4:	4b21      	ldr	r3, [pc, #132]	@ (800453c <_svfiprintf_r+0x1ec>)
 80044b6:	bb1b      	cbnz	r3, 8004500 <_svfiprintf_r+0x1b0>
 80044b8:	9b03      	ldr	r3, [sp, #12]
 80044ba:	3307      	adds	r3, #7
 80044bc:	f023 0307 	bic.w	r3, r3, #7
 80044c0:	3308      	adds	r3, #8
 80044c2:	9303      	str	r3, [sp, #12]
 80044c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044c6:	4433      	add	r3, r6
 80044c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80044ca:	e76a      	b.n	80043a2 <_svfiprintf_r+0x52>
 80044cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80044d0:	460c      	mov	r4, r1
 80044d2:	2001      	movs	r0, #1
 80044d4:	e7a8      	b.n	8004428 <_svfiprintf_r+0xd8>
 80044d6:	2300      	movs	r3, #0
 80044d8:	3401      	adds	r4, #1
 80044da:	9305      	str	r3, [sp, #20]
 80044dc:	4619      	mov	r1, r3
 80044de:	f04f 0c0a 	mov.w	ip, #10
 80044e2:	4620      	mov	r0, r4
 80044e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044e8:	3a30      	subs	r2, #48	@ 0x30
 80044ea:	2a09      	cmp	r2, #9
 80044ec:	d903      	bls.n	80044f6 <_svfiprintf_r+0x1a6>
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d0c6      	beq.n	8004480 <_svfiprintf_r+0x130>
 80044f2:	9105      	str	r1, [sp, #20]
 80044f4:	e7c4      	b.n	8004480 <_svfiprintf_r+0x130>
 80044f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80044fa:	4604      	mov	r4, r0
 80044fc:	2301      	movs	r3, #1
 80044fe:	e7f0      	b.n	80044e2 <_svfiprintf_r+0x192>
 8004500:	ab03      	add	r3, sp, #12
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	462a      	mov	r2, r5
 8004506:	4b0e      	ldr	r3, [pc, #56]	@ (8004540 <_svfiprintf_r+0x1f0>)
 8004508:	a904      	add	r1, sp, #16
 800450a:	4638      	mov	r0, r7
 800450c:	f3af 8000 	nop.w
 8004510:	1c42      	adds	r2, r0, #1
 8004512:	4606      	mov	r6, r0
 8004514:	d1d6      	bne.n	80044c4 <_svfiprintf_r+0x174>
 8004516:	89ab      	ldrh	r3, [r5, #12]
 8004518:	065b      	lsls	r3, r3, #25
 800451a:	f53f af2d 	bmi.w	8004378 <_svfiprintf_r+0x28>
 800451e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004520:	e72c      	b.n	800437c <_svfiprintf_r+0x2c>
 8004522:	ab03      	add	r3, sp, #12
 8004524:	9300      	str	r3, [sp, #0]
 8004526:	462a      	mov	r2, r5
 8004528:	4b05      	ldr	r3, [pc, #20]	@ (8004540 <_svfiprintf_r+0x1f0>)
 800452a:	a904      	add	r1, sp, #16
 800452c:	4638      	mov	r0, r7
 800452e:	f000 f879 	bl	8004624 <_printf_i>
 8004532:	e7ed      	b.n	8004510 <_svfiprintf_r+0x1c0>
 8004534:	080049c4 	.word	0x080049c4
 8004538:	080049ce 	.word	0x080049ce
 800453c:	00000000 	.word	0x00000000
 8004540:	08004299 	.word	0x08004299
 8004544:	080049ca 	.word	0x080049ca

08004548 <_printf_common>:
 8004548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800454c:	4616      	mov	r6, r2
 800454e:	4698      	mov	r8, r3
 8004550:	688a      	ldr	r2, [r1, #8]
 8004552:	690b      	ldr	r3, [r1, #16]
 8004554:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004558:	4293      	cmp	r3, r2
 800455a:	bfb8      	it	lt
 800455c:	4613      	movlt	r3, r2
 800455e:	6033      	str	r3, [r6, #0]
 8004560:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004564:	4607      	mov	r7, r0
 8004566:	460c      	mov	r4, r1
 8004568:	b10a      	cbz	r2, 800456e <_printf_common+0x26>
 800456a:	3301      	adds	r3, #1
 800456c:	6033      	str	r3, [r6, #0]
 800456e:	6823      	ldr	r3, [r4, #0]
 8004570:	0699      	lsls	r1, r3, #26
 8004572:	bf42      	ittt	mi
 8004574:	6833      	ldrmi	r3, [r6, #0]
 8004576:	3302      	addmi	r3, #2
 8004578:	6033      	strmi	r3, [r6, #0]
 800457a:	6825      	ldr	r5, [r4, #0]
 800457c:	f015 0506 	ands.w	r5, r5, #6
 8004580:	d106      	bne.n	8004590 <_printf_common+0x48>
 8004582:	f104 0a19 	add.w	sl, r4, #25
 8004586:	68e3      	ldr	r3, [r4, #12]
 8004588:	6832      	ldr	r2, [r6, #0]
 800458a:	1a9b      	subs	r3, r3, r2
 800458c:	42ab      	cmp	r3, r5
 800458e:	dc26      	bgt.n	80045de <_printf_common+0x96>
 8004590:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004594:	6822      	ldr	r2, [r4, #0]
 8004596:	3b00      	subs	r3, #0
 8004598:	bf18      	it	ne
 800459a:	2301      	movne	r3, #1
 800459c:	0692      	lsls	r2, r2, #26
 800459e:	d42b      	bmi.n	80045f8 <_printf_common+0xb0>
 80045a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80045a4:	4641      	mov	r1, r8
 80045a6:	4638      	mov	r0, r7
 80045a8:	47c8      	blx	r9
 80045aa:	3001      	adds	r0, #1
 80045ac:	d01e      	beq.n	80045ec <_printf_common+0xa4>
 80045ae:	6823      	ldr	r3, [r4, #0]
 80045b0:	6922      	ldr	r2, [r4, #16]
 80045b2:	f003 0306 	and.w	r3, r3, #6
 80045b6:	2b04      	cmp	r3, #4
 80045b8:	bf02      	ittt	eq
 80045ba:	68e5      	ldreq	r5, [r4, #12]
 80045bc:	6833      	ldreq	r3, [r6, #0]
 80045be:	1aed      	subeq	r5, r5, r3
 80045c0:	68a3      	ldr	r3, [r4, #8]
 80045c2:	bf0c      	ite	eq
 80045c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045c8:	2500      	movne	r5, #0
 80045ca:	4293      	cmp	r3, r2
 80045cc:	bfc4      	itt	gt
 80045ce:	1a9b      	subgt	r3, r3, r2
 80045d0:	18ed      	addgt	r5, r5, r3
 80045d2:	2600      	movs	r6, #0
 80045d4:	341a      	adds	r4, #26
 80045d6:	42b5      	cmp	r5, r6
 80045d8:	d11a      	bne.n	8004610 <_printf_common+0xc8>
 80045da:	2000      	movs	r0, #0
 80045dc:	e008      	b.n	80045f0 <_printf_common+0xa8>
 80045de:	2301      	movs	r3, #1
 80045e0:	4652      	mov	r2, sl
 80045e2:	4641      	mov	r1, r8
 80045e4:	4638      	mov	r0, r7
 80045e6:	47c8      	blx	r9
 80045e8:	3001      	adds	r0, #1
 80045ea:	d103      	bne.n	80045f4 <_printf_common+0xac>
 80045ec:	f04f 30ff 	mov.w	r0, #4294967295
 80045f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045f4:	3501      	adds	r5, #1
 80045f6:	e7c6      	b.n	8004586 <_printf_common+0x3e>
 80045f8:	18e1      	adds	r1, r4, r3
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	2030      	movs	r0, #48	@ 0x30
 80045fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004602:	4422      	add	r2, r4
 8004604:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004608:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800460c:	3302      	adds	r3, #2
 800460e:	e7c7      	b.n	80045a0 <_printf_common+0x58>
 8004610:	2301      	movs	r3, #1
 8004612:	4622      	mov	r2, r4
 8004614:	4641      	mov	r1, r8
 8004616:	4638      	mov	r0, r7
 8004618:	47c8      	blx	r9
 800461a:	3001      	adds	r0, #1
 800461c:	d0e6      	beq.n	80045ec <_printf_common+0xa4>
 800461e:	3601      	adds	r6, #1
 8004620:	e7d9      	b.n	80045d6 <_printf_common+0x8e>
	...

08004624 <_printf_i>:
 8004624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004628:	7e0f      	ldrb	r7, [r1, #24]
 800462a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800462c:	2f78      	cmp	r7, #120	@ 0x78
 800462e:	4691      	mov	r9, r2
 8004630:	4680      	mov	r8, r0
 8004632:	460c      	mov	r4, r1
 8004634:	469a      	mov	sl, r3
 8004636:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800463a:	d807      	bhi.n	800464c <_printf_i+0x28>
 800463c:	2f62      	cmp	r7, #98	@ 0x62
 800463e:	d80a      	bhi.n	8004656 <_printf_i+0x32>
 8004640:	2f00      	cmp	r7, #0
 8004642:	f000 80d2 	beq.w	80047ea <_printf_i+0x1c6>
 8004646:	2f58      	cmp	r7, #88	@ 0x58
 8004648:	f000 80b9 	beq.w	80047be <_printf_i+0x19a>
 800464c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004650:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004654:	e03a      	b.n	80046cc <_printf_i+0xa8>
 8004656:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800465a:	2b15      	cmp	r3, #21
 800465c:	d8f6      	bhi.n	800464c <_printf_i+0x28>
 800465e:	a101      	add	r1, pc, #4	@ (adr r1, 8004664 <_printf_i+0x40>)
 8004660:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004664:	080046bd 	.word	0x080046bd
 8004668:	080046d1 	.word	0x080046d1
 800466c:	0800464d 	.word	0x0800464d
 8004670:	0800464d 	.word	0x0800464d
 8004674:	0800464d 	.word	0x0800464d
 8004678:	0800464d 	.word	0x0800464d
 800467c:	080046d1 	.word	0x080046d1
 8004680:	0800464d 	.word	0x0800464d
 8004684:	0800464d 	.word	0x0800464d
 8004688:	0800464d 	.word	0x0800464d
 800468c:	0800464d 	.word	0x0800464d
 8004690:	080047d1 	.word	0x080047d1
 8004694:	080046fb 	.word	0x080046fb
 8004698:	0800478b 	.word	0x0800478b
 800469c:	0800464d 	.word	0x0800464d
 80046a0:	0800464d 	.word	0x0800464d
 80046a4:	080047f3 	.word	0x080047f3
 80046a8:	0800464d 	.word	0x0800464d
 80046ac:	080046fb 	.word	0x080046fb
 80046b0:	0800464d 	.word	0x0800464d
 80046b4:	0800464d 	.word	0x0800464d
 80046b8:	08004793 	.word	0x08004793
 80046bc:	6833      	ldr	r3, [r6, #0]
 80046be:	1d1a      	adds	r2, r3, #4
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6032      	str	r2, [r6, #0]
 80046c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80046cc:	2301      	movs	r3, #1
 80046ce:	e09d      	b.n	800480c <_printf_i+0x1e8>
 80046d0:	6833      	ldr	r3, [r6, #0]
 80046d2:	6820      	ldr	r0, [r4, #0]
 80046d4:	1d19      	adds	r1, r3, #4
 80046d6:	6031      	str	r1, [r6, #0]
 80046d8:	0606      	lsls	r6, r0, #24
 80046da:	d501      	bpl.n	80046e0 <_printf_i+0xbc>
 80046dc:	681d      	ldr	r5, [r3, #0]
 80046de:	e003      	b.n	80046e8 <_printf_i+0xc4>
 80046e0:	0645      	lsls	r5, r0, #25
 80046e2:	d5fb      	bpl.n	80046dc <_printf_i+0xb8>
 80046e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80046e8:	2d00      	cmp	r5, #0
 80046ea:	da03      	bge.n	80046f4 <_printf_i+0xd0>
 80046ec:	232d      	movs	r3, #45	@ 0x2d
 80046ee:	426d      	negs	r5, r5
 80046f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046f4:	4859      	ldr	r0, [pc, #356]	@ (800485c <_printf_i+0x238>)
 80046f6:	230a      	movs	r3, #10
 80046f8:	e011      	b.n	800471e <_printf_i+0xfa>
 80046fa:	6821      	ldr	r1, [r4, #0]
 80046fc:	6833      	ldr	r3, [r6, #0]
 80046fe:	0608      	lsls	r0, r1, #24
 8004700:	f853 5b04 	ldr.w	r5, [r3], #4
 8004704:	d402      	bmi.n	800470c <_printf_i+0xe8>
 8004706:	0649      	lsls	r1, r1, #25
 8004708:	bf48      	it	mi
 800470a:	b2ad      	uxthmi	r5, r5
 800470c:	2f6f      	cmp	r7, #111	@ 0x6f
 800470e:	4853      	ldr	r0, [pc, #332]	@ (800485c <_printf_i+0x238>)
 8004710:	6033      	str	r3, [r6, #0]
 8004712:	bf14      	ite	ne
 8004714:	230a      	movne	r3, #10
 8004716:	2308      	moveq	r3, #8
 8004718:	2100      	movs	r1, #0
 800471a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800471e:	6866      	ldr	r6, [r4, #4]
 8004720:	60a6      	str	r6, [r4, #8]
 8004722:	2e00      	cmp	r6, #0
 8004724:	bfa2      	ittt	ge
 8004726:	6821      	ldrge	r1, [r4, #0]
 8004728:	f021 0104 	bicge.w	r1, r1, #4
 800472c:	6021      	strge	r1, [r4, #0]
 800472e:	b90d      	cbnz	r5, 8004734 <_printf_i+0x110>
 8004730:	2e00      	cmp	r6, #0
 8004732:	d04b      	beq.n	80047cc <_printf_i+0x1a8>
 8004734:	4616      	mov	r6, r2
 8004736:	fbb5 f1f3 	udiv	r1, r5, r3
 800473a:	fb03 5711 	mls	r7, r3, r1, r5
 800473e:	5dc7      	ldrb	r7, [r0, r7]
 8004740:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004744:	462f      	mov	r7, r5
 8004746:	42bb      	cmp	r3, r7
 8004748:	460d      	mov	r5, r1
 800474a:	d9f4      	bls.n	8004736 <_printf_i+0x112>
 800474c:	2b08      	cmp	r3, #8
 800474e:	d10b      	bne.n	8004768 <_printf_i+0x144>
 8004750:	6823      	ldr	r3, [r4, #0]
 8004752:	07df      	lsls	r7, r3, #31
 8004754:	d508      	bpl.n	8004768 <_printf_i+0x144>
 8004756:	6923      	ldr	r3, [r4, #16]
 8004758:	6861      	ldr	r1, [r4, #4]
 800475a:	4299      	cmp	r1, r3
 800475c:	bfde      	ittt	le
 800475e:	2330      	movle	r3, #48	@ 0x30
 8004760:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004764:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004768:	1b92      	subs	r2, r2, r6
 800476a:	6122      	str	r2, [r4, #16]
 800476c:	f8cd a000 	str.w	sl, [sp]
 8004770:	464b      	mov	r3, r9
 8004772:	aa03      	add	r2, sp, #12
 8004774:	4621      	mov	r1, r4
 8004776:	4640      	mov	r0, r8
 8004778:	f7ff fee6 	bl	8004548 <_printf_common>
 800477c:	3001      	adds	r0, #1
 800477e:	d14a      	bne.n	8004816 <_printf_i+0x1f2>
 8004780:	f04f 30ff 	mov.w	r0, #4294967295
 8004784:	b004      	add	sp, #16
 8004786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800478a:	6823      	ldr	r3, [r4, #0]
 800478c:	f043 0320 	orr.w	r3, r3, #32
 8004790:	6023      	str	r3, [r4, #0]
 8004792:	4833      	ldr	r0, [pc, #204]	@ (8004860 <_printf_i+0x23c>)
 8004794:	2778      	movs	r7, #120	@ 0x78
 8004796:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800479a:	6823      	ldr	r3, [r4, #0]
 800479c:	6831      	ldr	r1, [r6, #0]
 800479e:	061f      	lsls	r7, r3, #24
 80047a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80047a4:	d402      	bmi.n	80047ac <_printf_i+0x188>
 80047a6:	065f      	lsls	r7, r3, #25
 80047a8:	bf48      	it	mi
 80047aa:	b2ad      	uxthmi	r5, r5
 80047ac:	6031      	str	r1, [r6, #0]
 80047ae:	07d9      	lsls	r1, r3, #31
 80047b0:	bf44      	itt	mi
 80047b2:	f043 0320 	orrmi.w	r3, r3, #32
 80047b6:	6023      	strmi	r3, [r4, #0]
 80047b8:	b11d      	cbz	r5, 80047c2 <_printf_i+0x19e>
 80047ba:	2310      	movs	r3, #16
 80047bc:	e7ac      	b.n	8004718 <_printf_i+0xf4>
 80047be:	4827      	ldr	r0, [pc, #156]	@ (800485c <_printf_i+0x238>)
 80047c0:	e7e9      	b.n	8004796 <_printf_i+0x172>
 80047c2:	6823      	ldr	r3, [r4, #0]
 80047c4:	f023 0320 	bic.w	r3, r3, #32
 80047c8:	6023      	str	r3, [r4, #0]
 80047ca:	e7f6      	b.n	80047ba <_printf_i+0x196>
 80047cc:	4616      	mov	r6, r2
 80047ce:	e7bd      	b.n	800474c <_printf_i+0x128>
 80047d0:	6833      	ldr	r3, [r6, #0]
 80047d2:	6825      	ldr	r5, [r4, #0]
 80047d4:	6961      	ldr	r1, [r4, #20]
 80047d6:	1d18      	adds	r0, r3, #4
 80047d8:	6030      	str	r0, [r6, #0]
 80047da:	062e      	lsls	r6, r5, #24
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	d501      	bpl.n	80047e4 <_printf_i+0x1c0>
 80047e0:	6019      	str	r1, [r3, #0]
 80047e2:	e002      	b.n	80047ea <_printf_i+0x1c6>
 80047e4:	0668      	lsls	r0, r5, #25
 80047e6:	d5fb      	bpl.n	80047e0 <_printf_i+0x1bc>
 80047e8:	8019      	strh	r1, [r3, #0]
 80047ea:	2300      	movs	r3, #0
 80047ec:	6123      	str	r3, [r4, #16]
 80047ee:	4616      	mov	r6, r2
 80047f0:	e7bc      	b.n	800476c <_printf_i+0x148>
 80047f2:	6833      	ldr	r3, [r6, #0]
 80047f4:	1d1a      	adds	r2, r3, #4
 80047f6:	6032      	str	r2, [r6, #0]
 80047f8:	681e      	ldr	r6, [r3, #0]
 80047fa:	6862      	ldr	r2, [r4, #4]
 80047fc:	2100      	movs	r1, #0
 80047fe:	4630      	mov	r0, r6
 8004800:	f7fb fd0e 	bl	8000220 <memchr>
 8004804:	b108      	cbz	r0, 800480a <_printf_i+0x1e6>
 8004806:	1b80      	subs	r0, r0, r6
 8004808:	6060      	str	r0, [r4, #4]
 800480a:	6863      	ldr	r3, [r4, #4]
 800480c:	6123      	str	r3, [r4, #16]
 800480e:	2300      	movs	r3, #0
 8004810:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004814:	e7aa      	b.n	800476c <_printf_i+0x148>
 8004816:	6923      	ldr	r3, [r4, #16]
 8004818:	4632      	mov	r2, r6
 800481a:	4649      	mov	r1, r9
 800481c:	4640      	mov	r0, r8
 800481e:	47d0      	blx	sl
 8004820:	3001      	adds	r0, #1
 8004822:	d0ad      	beq.n	8004780 <_printf_i+0x15c>
 8004824:	6823      	ldr	r3, [r4, #0]
 8004826:	079b      	lsls	r3, r3, #30
 8004828:	d413      	bmi.n	8004852 <_printf_i+0x22e>
 800482a:	68e0      	ldr	r0, [r4, #12]
 800482c:	9b03      	ldr	r3, [sp, #12]
 800482e:	4298      	cmp	r0, r3
 8004830:	bfb8      	it	lt
 8004832:	4618      	movlt	r0, r3
 8004834:	e7a6      	b.n	8004784 <_printf_i+0x160>
 8004836:	2301      	movs	r3, #1
 8004838:	4632      	mov	r2, r6
 800483a:	4649      	mov	r1, r9
 800483c:	4640      	mov	r0, r8
 800483e:	47d0      	blx	sl
 8004840:	3001      	adds	r0, #1
 8004842:	d09d      	beq.n	8004780 <_printf_i+0x15c>
 8004844:	3501      	adds	r5, #1
 8004846:	68e3      	ldr	r3, [r4, #12]
 8004848:	9903      	ldr	r1, [sp, #12]
 800484a:	1a5b      	subs	r3, r3, r1
 800484c:	42ab      	cmp	r3, r5
 800484e:	dcf2      	bgt.n	8004836 <_printf_i+0x212>
 8004850:	e7eb      	b.n	800482a <_printf_i+0x206>
 8004852:	2500      	movs	r5, #0
 8004854:	f104 0619 	add.w	r6, r4, #25
 8004858:	e7f5      	b.n	8004846 <_printf_i+0x222>
 800485a:	bf00      	nop
 800485c:	080049d5 	.word	0x080049d5
 8004860:	080049e6 	.word	0x080049e6

08004864 <memmove>:
 8004864:	4288      	cmp	r0, r1
 8004866:	b510      	push	{r4, lr}
 8004868:	eb01 0402 	add.w	r4, r1, r2
 800486c:	d902      	bls.n	8004874 <memmove+0x10>
 800486e:	4284      	cmp	r4, r0
 8004870:	4623      	mov	r3, r4
 8004872:	d807      	bhi.n	8004884 <memmove+0x20>
 8004874:	1e43      	subs	r3, r0, #1
 8004876:	42a1      	cmp	r1, r4
 8004878:	d008      	beq.n	800488c <memmove+0x28>
 800487a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800487e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004882:	e7f8      	b.n	8004876 <memmove+0x12>
 8004884:	4402      	add	r2, r0
 8004886:	4601      	mov	r1, r0
 8004888:	428a      	cmp	r2, r1
 800488a:	d100      	bne.n	800488e <memmove+0x2a>
 800488c:	bd10      	pop	{r4, pc}
 800488e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004892:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004896:	e7f7      	b.n	8004888 <memmove+0x24>

08004898 <_sbrk_r>:
 8004898:	b538      	push	{r3, r4, r5, lr}
 800489a:	4d06      	ldr	r5, [pc, #24]	@ (80048b4 <_sbrk_r+0x1c>)
 800489c:	2300      	movs	r3, #0
 800489e:	4604      	mov	r4, r0
 80048a0:	4608      	mov	r0, r1
 80048a2:	602b      	str	r3, [r5, #0]
 80048a4:	f7fc fa48 	bl	8000d38 <_sbrk>
 80048a8:	1c43      	adds	r3, r0, #1
 80048aa:	d102      	bne.n	80048b2 <_sbrk_r+0x1a>
 80048ac:	682b      	ldr	r3, [r5, #0]
 80048ae:	b103      	cbz	r3, 80048b2 <_sbrk_r+0x1a>
 80048b0:	6023      	str	r3, [r4, #0]
 80048b2:	bd38      	pop	{r3, r4, r5, pc}
 80048b4:	20009f1c 	.word	0x20009f1c

080048b8 <memcpy>:
 80048b8:	440a      	add	r2, r1
 80048ba:	4291      	cmp	r1, r2
 80048bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80048c0:	d100      	bne.n	80048c4 <memcpy+0xc>
 80048c2:	4770      	bx	lr
 80048c4:	b510      	push	{r4, lr}
 80048c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048ce:	4291      	cmp	r1, r2
 80048d0:	d1f9      	bne.n	80048c6 <memcpy+0xe>
 80048d2:	bd10      	pop	{r4, pc}

080048d4 <_realloc_r>:
 80048d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048d8:	4680      	mov	r8, r0
 80048da:	4615      	mov	r5, r2
 80048dc:	460c      	mov	r4, r1
 80048de:	b921      	cbnz	r1, 80048ea <_realloc_r+0x16>
 80048e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048e4:	4611      	mov	r1, r2
 80048e6:	f7ff bc4b 	b.w	8004180 <_malloc_r>
 80048ea:	b92a      	cbnz	r2, 80048f8 <_realloc_r+0x24>
 80048ec:	f7ff fbdc 	bl	80040a8 <_free_r>
 80048f0:	2400      	movs	r4, #0
 80048f2:	4620      	mov	r0, r4
 80048f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048f8:	f000 f81a 	bl	8004930 <_malloc_usable_size_r>
 80048fc:	4285      	cmp	r5, r0
 80048fe:	4606      	mov	r6, r0
 8004900:	d802      	bhi.n	8004908 <_realloc_r+0x34>
 8004902:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004906:	d8f4      	bhi.n	80048f2 <_realloc_r+0x1e>
 8004908:	4629      	mov	r1, r5
 800490a:	4640      	mov	r0, r8
 800490c:	f7ff fc38 	bl	8004180 <_malloc_r>
 8004910:	4607      	mov	r7, r0
 8004912:	2800      	cmp	r0, #0
 8004914:	d0ec      	beq.n	80048f0 <_realloc_r+0x1c>
 8004916:	42b5      	cmp	r5, r6
 8004918:	462a      	mov	r2, r5
 800491a:	4621      	mov	r1, r4
 800491c:	bf28      	it	cs
 800491e:	4632      	movcs	r2, r6
 8004920:	f7ff ffca 	bl	80048b8 <memcpy>
 8004924:	4621      	mov	r1, r4
 8004926:	4640      	mov	r0, r8
 8004928:	f7ff fbbe 	bl	80040a8 <_free_r>
 800492c:	463c      	mov	r4, r7
 800492e:	e7e0      	b.n	80048f2 <_realloc_r+0x1e>

08004930 <_malloc_usable_size_r>:
 8004930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004934:	1f18      	subs	r0, r3, #4
 8004936:	2b00      	cmp	r3, #0
 8004938:	bfbc      	itt	lt
 800493a:	580b      	ldrlt	r3, [r1, r0]
 800493c:	18c0      	addlt	r0, r0, r3
 800493e:	4770      	bx	lr

08004940 <_init>:
 8004940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004942:	bf00      	nop
 8004944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004946:	bc08      	pop	{r3}
 8004948:	469e      	mov	lr, r3
 800494a:	4770      	bx	lr

0800494c <_fini>:
 800494c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800494e:	bf00      	nop
 8004950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004952:	bc08      	pop	{r3}
 8004954:	469e      	mov	lr, r3
 8004956:	4770      	bx	lr
