
tachometer2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004754  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08004924  08004924  00005924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049c8  080049c8  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  080049c8  080049c8  000059c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049d0  080049d0  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049d0  080049d0  000059d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080049d4  080049d4  000059d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080049d8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000029a4  2000005c  08004a34  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002a00  08004a34  00006a00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0b4  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000246a  00000000  00000000  00014140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  000165b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a4c  00000000  00000000  000172f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021cb4  00000000  00000000  00017d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d32  00000000  00000000  000399f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf4bb  00000000  00000000  0004a72a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00119be5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b7c  00000000  00000000  00119c28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0011d7a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800490c 	.word	0x0800490c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	0800490c 	.word	0x0800490c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <tachometer_init>:
static uint32_t time2;
static uint32_t last_sample_time;
char message[100];
char byte_received;
void tachometer_init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	disable_tim_interrupts();
 80005b4:	f000 fd48 	bl	8001048 <disable_tim_interrupts>
	disable_gpio_interrupts();
 80005b8:	f000 fa11 	bl	80009de <disable_gpio_interrupts>
	current_state = TAC_POLLING_TRIGGER;
 80005bc:	4b0b      	ldr	r3, [pc, #44]	@ (80005ec <tachometer_init+0x3c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
	tachometer_entry_action(TAC_POLLING_TRIGGER);
 80005c2:	2000      	movs	r0, #0
 80005c4:	f000 f8e0 	bl	8000788 <tachometer_entry_action>
	evento = TRIGGER_OFF;
 80005c8:	4b09      	ldr	r3, [pc, #36]	@ (80005f0 <tachometer_init+0x40>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	701a      	strb	r2, [r3, #0]
	time_elapsed = 0;
 80005ce:	4b09      	ldr	r3, [pc, #36]	@ (80005f4 <tachometer_init+0x44>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
	time1 = 0;
 80005d4:	4b08      	ldr	r3, [pc, #32]	@ (80005f8 <tachometer_init+0x48>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
	time2= 0;
 80005da:	4b08      	ldr	r3, [pc, #32]	@ (80005fc <tachometer_init+0x4c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
	byte_received = '0';
 80005e0:	4b07      	ldr	r3, [pc, #28]	@ (8000600 <tachometer_init+0x50>)
 80005e2:	2230      	movs	r2, #48	@ 0x30
 80005e4:	701a      	strb	r2, [r3, #0]

}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	2000278c 	.word	0x2000278c
 80005f0:	2000278d 	.word	0x2000278d
 80005f4:	20002790 	.word	0x20002790
 80005f8:	20002794 	.word	0x20002794
 80005fc:	20002798 	.word	0x20002798
 8000600:	20002804 	.word	0x20002804

08000604 <tachometer_state_machine>:

void tachometer_state_machine(tachometer_event_t event)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
	tachometer_state_t prev_state;
	prev_state = current_state;
 800060e:	4b54      	ldr	r3, [pc, #336]	@ (8000760 <tachometer_state_machine+0x15c>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	73fb      	strb	r3, [r7, #15]
	switch (current_state) {
 8000614:	4b52      	ldr	r3, [pc, #328]	@ (8000760 <tachometer_state_machine+0x15c>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b03      	cmp	r3, #3
 800061a:	f200 8092 	bhi.w	8000742 <tachometer_state_machine+0x13e>
 800061e:	a201      	add	r2, pc, #4	@ (adr r2, 8000624 <tachometer_state_machine+0x20>)
 8000620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000624:	08000635 	.word	0x08000635
 8000628:	08000647 	.word	0x08000647
 800062c:	080006b7 	.word	0x080006b7
 8000630:	080006ef 	.word	0x080006ef
		case TAC_POLLING_TRIGGER:
			switch (event) {
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	2b01      	cmp	r3, #1
 8000638:	d103      	bne.n	8000642 <tachometer_state_machine+0x3e>
				case TRIGGER_ON:
					current_state = TAC_MEASURE;
 800063a:	4b49      	ldr	r3, [pc, #292]	@ (8000760 <tachometer_state_machine+0x15c>)
 800063c:	2201      	movs	r2, #1
 800063e:	701a      	strb	r2, [r3, #0]
					break;
 8000640:	e000      	b.n	8000644 <tachometer_state_machine+0x40>
				default:
					break;
 8000642:	bf00      	nop
			}
			break;
 8000644:	e07e      	b.n	8000744 <tachometer_state_machine+0x140>
		case TAC_MEASURE:
			switch (event) {
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d005      	beq.n	8000658 <tachometer_state_machine+0x54>
 800064c:	2b02      	cmp	r3, #2
 800064e:	d12e      	bne.n	80006ae <tachometer_state_machine+0xaa>
				case FULL_BUFFER:
					current_state = TAC_WAIT_TRANSMIT;
 8000650:	4b43      	ldr	r3, [pc, #268]	@ (8000760 <tachometer_state_machine+0x15c>)
 8000652:	2202      	movs	r2, #2
 8000654:	701a      	strb	r2, [r3, #0]
					break;
 8000656:	e02d      	b.n	80006b4 <tachometer_state_machine+0xb0>
				case TRIGGER_ON:
					if (HAL_GetTick() - last_sample_time >= MUESTREO_MS)
 8000658:	f000 fe62 	bl	8001320 <HAL_GetTick>
 800065c:	4602      	mov	r2, r0
 800065e:	4b41      	ldr	r3, [pc, #260]	@ (8000764 <tachometer_state_machine+0x160>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	1ad3      	subs	r3, r2, r3
 8000664:	2b01      	cmp	r3, #1
 8000666:	d924      	bls.n	80006b2 <tachometer_state_machine+0xae>
					{
						if (! enqueue(&buffer, get_frequency()))
 8000668:	f000 fce2 	bl	8001030 <get_frequency>
 800066c:	4603      	mov	r3, r0
 800066e:	b2db      	uxtb	r3, r3
 8000670:	4619      	mov	r1, r3
 8000672:	483d      	ldr	r0, [pc, #244]	@ (8000768 <tachometer_state_machine+0x164>)
 8000674:	f000 fa8c 	bl	8000b90 <enqueue>
 8000678:	4603      	mov	r3, r0
 800067a:	f083 0301 	eor.w	r3, r3, #1
 800067e:	b2db      	uxtb	r3, r3
 8000680:	2b00      	cmp	r3, #0
 8000682:	d007      	beq.n	8000694 <tachometer_state_machine+0x90>
						{
							evento = FULL_BUFFER;
 8000684:	4b39      	ldr	r3, [pc, #228]	@ (800076c <tachometer_state_machine+0x168>)
 8000686:	2202      	movs	r2, #2
 8000688:	701a      	strb	r2, [r3, #0]
							time2 = HAL_GetTick();
 800068a:	f000 fe49 	bl	8001320 <HAL_GetTick>
 800068e:	4603      	mov	r3, r0
 8000690:	4a37      	ldr	r2, [pc, #220]	@ (8000770 <tachometer_state_machine+0x16c>)
 8000692:	6013      	str	r3, [r2, #0]
						}
						time_elapsed = time2 - time1;
 8000694:	4b36      	ldr	r3, [pc, #216]	@ (8000770 <tachometer_state_machine+0x16c>)
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	4b36      	ldr	r3, [pc, #216]	@ (8000774 <tachometer_state_machine+0x170>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	4a36      	ldr	r2, [pc, #216]	@ (8000778 <tachometer_state_machine+0x174>)
 80006a0:	6013      	str	r3, [r2, #0]
						last_sample_time = HAL_GetTick();
 80006a2:	f000 fe3d 	bl	8001320 <HAL_GetTick>
 80006a6:	4603      	mov	r3, r0
 80006a8:	4a2e      	ldr	r2, [pc, #184]	@ (8000764 <tachometer_state_machine+0x160>)
 80006aa:	6013      	str	r3, [r2, #0]
//					}
//					time_elapsed = time2 - time1;
//					HAL_Delay(MUESTREO_MS);


					break;
 80006ac:	e001      	b.n	80006b2 <tachometer_state_machine+0xae>
				default:
					break;
 80006ae:	bf00      	nop
 80006b0:	e048      	b.n	8000744 <tachometer_state_machine+0x140>
					break;
 80006b2:	bf00      	nop
			}
			break;
 80006b4:	e046      	b.n	8000744 <tachometer_state_machine+0x140>
		case TAC_WAIT_TRANSMIT:
			switch (event) {
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b02      	cmp	r3, #2
 80006ba:	d005      	beq.n	80006c8 <tachometer_state_machine+0xc4>
 80006bc:	2b03      	cmp	r3, #3
 80006be:	d114      	bne.n	80006ea <tachometer_state_machine+0xe6>
				case SERIAL_RECEIVED:
					current_state = TAC_TRANSMIT;
 80006c0:	4b27      	ldr	r3, [pc, #156]	@ (8000760 <tachometer_state_machine+0x15c>)
 80006c2:	2203      	movs	r2, #3
 80006c4:	701a      	strb	r2, [r3, #0]
					break;
 80006c6:	e011      	b.n	80006ec <tachometer_state_machine+0xe8>
				case FULL_BUFFER:
					byte_received = receive_byte();
 80006c8:	f000 fd4c 	bl	8001164 <receive_byte>
 80006cc:	4603      	mov	r3, r0
 80006ce:	461a      	mov	r2, r3
 80006d0:	4b2a      	ldr	r3, [pc, #168]	@ (800077c <tachometer_state_machine+0x178>)
 80006d2:	701a      	strb	r2, [r3, #0]
					if (byte_received == 'x' || byte_received == 'X' )
 80006d4:	4b29      	ldr	r3, [pc, #164]	@ (800077c <tachometer_state_machine+0x178>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b78      	cmp	r3, #120	@ 0x78
 80006da:	d003      	beq.n	80006e4 <tachometer_state_machine+0xe0>
 80006dc:	4b27      	ldr	r3, [pc, #156]	@ (800077c <tachometer_state_machine+0x178>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b58      	cmp	r3, #88	@ 0x58
 80006e2:	d102      	bne.n	80006ea <tachometer_state_machine+0xe6>
					{
						evento = SERIAL_RECEIVED;
 80006e4:	4b21      	ldr	r3, [pc, #132]	@ (800076c <tachometer_state_machine+0x168>)
 80006e6:	2203      	movs	r2, #3
 80006e8:	701a      	strb	r2, [r3, #0]

					}
				default:
					break;
 80006ea:	bf00      	nop
			}
			break;
 80006ec:	e02a      	b.n	8000744 <tachometer_state_machine+0x140>
		case TAC_TRANSMIT:
			switch (event) {
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	2b03      	cmp	r3, #3
 80006f2:	d004      	beq.n	80006fe <tachometer_state_machine+0xfa>
 80006f4:	2b04      	cmp	r3, #4
 80006f6:	d120      	bne.n	800073a <tachometer_state_machine+0x136>
				case EMPTY_BUFFER:
					current_state = TAC_POLLING_TRIGGER;
 80006f8:	4b19      	ldr	r3, [pc, #100]	@ (8000760 <tachometer_state_machine+0x15c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
				case SERIAL_RECEIVED:
					send_value(buffer.data[buffer.head]);
 80006fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000768 <tachometer_state_machine+0x164>)
 8000700:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000704:	f8b3 3710 	ldrh.w	r3, [r3, #1808]	@ 0x710
 8000708:	461a      	mov	r2, r3
 800070a:	4b17      	ldr	r3, [pc, #92]	@ (8000768 <tachometer_state_machine+0x164>)
 800070c:	5c9b      	ldrb	r3, [r3, r2]
 800070e:	4618      	mov	r0, r3
 8000710:	f000 fd64 	bl	80011dc <send_value>
					if(!dequeue(&buffer))
 8000714:	4814      	ldr	r0, [pc, #80]	@ (8000768 <tachometer_state_machine+0x164>)
 8000716:	f000 fa7d 	bl	8000c14 <dequeue>
 800071a:	4603      	mov	r3, r0
 800071c:	f083 0301 	eor.w	r3, r3, #1
 8000720:	b2db      	uxtb	r3, r3
 8000722:	2b00      	cmp	r3, #0
 8000724:	d00b      	beq.n	800073e <tachometer_state_machine+0x13a>
					{
						evento = EMPTY_BUFFER;
 8000726:	4b11      	ldr	r3, [pc, #68]	@ (800076c <tachometer_state_machine+0x168>)
 8000728:	2204      	movs	r2, #4
 800072a:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*)"\n",1, 100);
 800072c:	2364      	movs	r3, #100	@ 0x64
 800072e:	2201      	movs	r2, #1
 8000730:	4913      	ldr	r1, [pc, #76]	@ (8000780 <tachometer_state_machine+0x17c>)
 8000732:	4814      	ldr	r0, [pc, #80]	@ (8000784 <tachometer_state_machine+0x180>)
 8000734:	f002 fff8 	bl	8003728 <HAL_UART_Transmit>
					}

					break;
 8000738:	e001      	b.n	800073e <tachometer_state_machine+0x13a>
				default:
					break;
 800073a:	bf00      	nop
 800073c:	e002      	b.n	8000744 <tachometer_state_machine+0x140>
					break;
 800073e:	bf00      	nop
			}
			break;
 8000740:	e000      	b.n	8000744 <tachometer_state_machine+0x140>
		default:
			break;
 8000742:	bf00      	nop
	}

	if(prev_state != current_state)
 8000744:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <tachometer_state_machine+0x15c>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	7bfa      	ldrb	r2, [r7, #15]
 800074a:	429a      	cmp	r2, r3
 800074c:	d004      	beq.n	8000758 <tachometer_state_machine+0x154>
	{
		tachometer_entry_action(current_state);
 800074e:	4b04      	ldr	r3, [pc, #16]	@ (8000760 <tachometer_state_machine+0x15c>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	4618      	mov	r0, r3
 8000754:	f000 f818 	bl	8000788 <tachometer_entry_action>
	}

}
 8000758:	bf00      	nop
 800075a:	3710      	adds	r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	2000278c 	.word	0x2000278c
 8000764:	2000279c 	.word	0x2000279c
 8000768:	20000078 	.word	0x20000078
 800076c:	2000278d 	.word	0x2000278d
 8000770:	20002798 	.word	0x20002798
 8000774:	20002794 	.word	0x20002794
 8000778:	20002790 	.word	0x20002790
 800077c:	20002804 	.word	0x20002804
 8000780:	08004924 	.word	0x08004924
 8000784:	2000286c 	.word	0x2000286c

08000788 <tachometer_entry_action>:

void tachometer_entry_action(tachometer_state_t state)
{
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
	switch (state) {
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	2b03      	cmp	r3, #3
 8000796:	d827      	bhi.n	80007e8 <tachometer_entry_action+0x60>
 8000798:	a201      	add	r2, pc, #4	@ (adr r2, 80007a0 <tachometer_entry_action+0x18>)
 800079a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800079e:	bf00      	nop
 80007a0:	080007b1 	.word	0x080007b1
 80007a4:	080007c3 	.word	0x080007c3
 80007a8:	080007d3 	.word	0x080007d3
 80007ac:	080007e9 	.word	0x080007e9
		case TAC_POLLING_TRIGGER:
			init_ring_buffer(&buffer);
 80007b0:	4810      	ldr	r0, [pc, #64]	@ (80007f4 <tachometer_entry_action+0x6c>)
 80007b2:	f000 f9ad 	bl	8000b10 <init_ring_buffer>
			enable_gpio_interrupts();
 80007b6:	f000 f90b 	bl	80009d0 <enable_gpio_interrupts>
			evento = TRIGGER_OFF;
 80007ba:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <tachometer_entry_action+0x70>)
 80007bc:	2200      	movs	r2, #0
 80007be:	701a      	strb	r2, [r3, #0]

			break;
 80007c0:	e013      	b.n	80007ea <tachometer_entry_action+0x62>
		case TAC_MEASURE:
			enable_tim_interrupts();
 80007c2:	f000 fc4f 	bl	8001064 <enable_tim_interrupts>
			time1 = HAL_GetTick();
 80007c6:	f000 fdab 	bl	8001320 <HAL_GetTick>
 80007ca:	4603      	mov	r3, r0
 80007cc:	4a0b      	ldr	r2, [pc, #44]	@ (80007fc <tachometer_entry_action+0x74>)
 80007ce:	6013      	str	r3, [r2, #0]
			break;
 80007d0:	e00b      	b.n	80007ea <tachometer_entry_action+0x62>
		case TAC_WAIT_TRANSMIT:
			data_ready(time_elapsed, (uint8_t) MUESTREO_MS, get_buffer_size(), message);
 80007d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000800 <tachometer_entry_action+0x78>)
 80007d4:	681c      	ldr	r4, [r3, #0]
 80007d6:	f000 fa53 	bl	8000c80 <get_buffer_size>
 80007da:	4602      	mov	r2, r0
 80007dc:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <tachometer_entry_action+0x7c>)
 80007de:	2102      	movs	r1, #2
 80007e0:	4620      	mov	r0, r4
 80007e2:	f000 fcd7 	bl	8001194 <data_ready>

			break;
 80007e6:	e000      	b.n	80007ea <tachometer_entry_action+0x62>
		case TAC_TRANSMIT:

			break;
		default:
			break;
 80007e8:	bf00      	nop
	}

}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd90      	pop	{r4, r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000078 	.word	0x20000078
 80007f8:	2000278d 	.word	0x2000278d
 80007fc:	20002794 	.word	0x20002794
 8000800:	20002790 	.word	0x20002790
 8000804:	200027a0 	.word	0x200027a0

08000808 <read_event>:

tachometer_event_t read_event(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
	return evento;
 800080c:	4b03      	ldr	r3, [pc, #12]	@ (800081c <read_event+0x14>)
 800080e:	781b      	ldrb	r3, [r3, #0]

}
 8000810:	4618      	mov	r0, r3
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	2000278d 	.word	0x2000278d

08000820 <modify_event>:

void modify_event(tachometer_event_t event)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
	evento = event;
 800082a:	4a04      	ldr	r2, [pc, #16]	@ (800083c <modify_event+0x1c>)
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	7013      	strb	r3, [r2, #0]
}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	2000278d 	.word	0x2000278d

08000840 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	@ 0x28
 8000844:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
 800085a:	4b52      	ldr	r3, [pc, #328]	@ (80009a4 <MX_GPIO_Init+0x164>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a51      	ldr	r2, [pc, #324]	@ (80009a4 <MX_GPIO_Init+0x164>)
 8000860:	f043 0304 	orr.w	r3, r3, #4
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b4f      	ldr	r3, [pc, #316]	@ (80009a4 <MX_GPIO_Init+0x164>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0304 	and.w	r3, r3, #4
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	4b4b      	ldr	r3, [pc, #300]	@ (80009a4 <MX_GPIO_Init+0x164>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	4a4a      	ldr	r2, [pc, #296]	@ (80009a4 <MX_GPIO_Init+0x164>)
 800087c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000880:	6313      	str	r3, [r2, #48]	@ 0x30
 8000882:	4b48      	ldr	r3, [pc, #288]	@ (80009a4 <MX_GPIO_Init+0x164>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	4b44      	ldr	r3, [pc, #272]	@ (80009a4 <MX_GPIO_Init+0x164>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a43      	ldr	r2, [pc, #268]	@ (80009a4 <MX_GPIO_Init+0x164>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b41      	ldr	r3, [pc, #260]	@ (80009a4 <MX_GPIO_Init+0x164>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4b3d      	ldr	r3, [pc, #244]	@ (80009a4 <MX_GPIO_Init+0x164>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a3c      	ldr	r2, [pc, #240]	@ (80009a4 <MX_GPIO_Init+0x164>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b3a      	ldr	r3, [pc, #232]	@ (80009a4 <MX_GPIO_Init+0x164>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	4b36      	ldr	r3, [pc, #216]	@ (80009a4 <MX_GPIO_Init+0x164>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a35      	ldr	r2, [pc, #212]	@ (80009a4 <MX_GPIO_Init+0x164>)
 80008d0:	f043 0308 	orr.w	r3, r3, #8
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b33      	ldr	r3, [pc, #204]	@ (80009a4 <MX_GPIO_Init+0x164>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0308 	and.w	r3, r3, #8
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2120      	movs	r1, #32
 80008e6:	4830      	ldr	r0, [pc, #192]	@ (80009a8 <MX_GPIO_Init+0x168>)
 80008e8:	f000 fffe 	bl	80018e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008f2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	482a      	ldr	r0, [pc, #168]	@ (80009ac <MX_GPIO_Init+0x16c>)
 8000904:	f000 fe5c 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000908:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800090c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800090e:	2303      	movs	r3, #3
 8000910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	4619      	mov	r1, r3
 800091c:	4823      	ldr	r0, [pc, #140]	@ (80009ac <MX_GPIO_Init+0x16c>)
 800091e:	f000 fe4f 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7
 8000922:	f649 73d2 	movw	r3, #40914	@ 0x9fd2
 8000926:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000928:	2303      	movs	r3, #3
 800092a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4619      	mov	r1, r3
 8000936:	481c      	ldr	r0, [pc, #112]	@ (80009a8 <MX_GPIO_Init+0x168>)
 8000938:	f000 fe42 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800093c:	2320      	movs	r3, #32
 800093e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000940:	2301      	movs	r3, #1
 8000942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	4619      	mov	r1, r3
 8000952:	4815      	ldr	r0, [pc, #84]	@ (80009a8 <MX_GPIO_Init+0x168>)
 8000954:	f000 fe34 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 PB15
                           PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000958:	f24f 73f7 	movw	r3, #63479	@ 0xf7f7
 800095c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800095e:	2303      	movs	r3, #3
 8000960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	4619      	mov	r1, r3
 800096c:	4810      	ldr	r0, [pc, #64]	@ (80009b0 <MX_GPIO_Init+0x170>)
 800096e:	f000 fe27 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000972:	2304      	movs	r3, #4
 8000974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000976:	2303      	movs	r3, #3
 8000978:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	4619      	mov	r1, r3
 8000984:	480b      	ldr	r0, [pc, #44]	@ (80009b4 <MX_GPIO_Init+0x174>)
 8000986:	f000 fe1b 	bl	80015c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	2100      	movs	r1, #0
 800098e:	2028      	movs	r0, #40	@ 0x28
 8000990:	f000 fdd1 	bl	8001536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000994:	2028      	movs	r0, #40	@ 0x28
 8000996:	f000 fdea 	bl	800156e <HAL_NVIC_EnableIRQ>

}
 800099a:	bf00      	nop
 800099c:	3728      	adds	r7, #40	@ 0x28
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020000 	.word	0x40020000
 80009ac:	40020800 	.word	0x40020800
 80009b0:	40020400 	.word	0x40020400
 80009b4:	40020c00 	.word	0x40020c00

080009b8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	80fb      	strh	r3, [r7, #6]
	modify_event(TRIGGER_ON);
 80009c2:	2001      	movs	r0, #1
 80009c4:	f7ff ff2c 	bl	8000820 <modify_event>
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <enable_gpio_interrupts>:

void enable_gpio_interrupts(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009d4:	2028      	movs	r0, #40	@ 0x28
 80009d6:	f000 fdca 	bl	800156e <HAL_NVIC_EnableIRQ>
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}

080009de <disable_gpio_interrupts>:

void disable_gpio_interrupts(void)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80009e2:	2028      	movs	r0, #40	@ 0x28
 80009e4:	f000 fdd1 	bl	800158a <HAL_NVIC_DisableIRQ>
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}

080009ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f0:	f000 fc30 	bl	8001254 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f4:	f000 f818 	bl	8000a28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009f8:	f7ff ff22 	bl	8000840 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009fc:	f000 fb40 	bl	8001080 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000a00:	f000 f9fa 	bl	8000df8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  tachometer_init();
 8000a04:	f7ff fdd4 	bl	80005b0 <tachometer_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  evento_actual = read_event();
 8000a08:	f7ff fefe 	bl	8000808 <read_event>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	461a      	mov	r2, r3
 8000a10:	4b04      	ldr	r3, [pc, #16]	@ (8000a24 <main+0x38>)
 8000a12:	701a      	strb	r2, [r3, #0]
	  tachometer_state_machine(evento_actual);
 8000a14:	4b03      	ldr	r3, [pc, #12]	@ (8000a24 <main+0x38>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fdf3 	bl	8000604 <tachometer_state_machine>
	  evento_actual = read_event();
 8000a1e:	bf00      	nop
 8000a20:	e7f2      	b.n	8000a08 <main+0x1c>
 8000a22:	bf00      	nop
 8000a24:	20002805 	.word	0x20002805

08000a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b094      	sub	sp, #80	@ 0x50
 8000a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	2234      	movs	r2, #52	@ 0x34
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f003 fae8 	bl	800400c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a3c:	f107 0308 	add.w	r3, r7, #8
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	4b2a      	ldr	r3, [pc, #168]	@ (8000afc <SystemClock_Config+0xd4>)
 8000a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a54:	4a29      	ldr	r2, [pc, #164]	@ (8000afc <SystemClock_Config+0xd4>)
 8000a56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a5c:	4b27      	ldr	r3, [pc, #156]	@ (8000afc <SystemClock_Config+0xd4>)
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a68:	2300      	movs	r3, #0
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	4b24      	ldr	r3, [pc, #144]	@ (8000b00 <SystemClock_Config+0xd8>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a74:	4a22      	ldr	r2, [pc, #136]	@ (8000b00 <SystemClock_Config+0xd8>)
 8000a76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a7a:	6013      	str	r3, [r2, #0]
 8000a7c:	4b20      	ldr	r3, [pc, #128]	@ (8000b00 <SystemClock_Config+0xd8>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a90:	2310      	movs	r3, #16
 8000a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a94:	2302      	movs	r3, #2
 8000a96:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a9c:	2310      	movs	r3, #16
 8000a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000aa0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000aa4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000aa6:	2304      	movs	r3, #4
 8000aa8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f001 fa92 	bl	8001fe0 <HAL_RCC_OscConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ac2:	f000 f81f 	bl	8000b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac6:	230f      	movs	r3, #15
 8000ac8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aca:	2302      	movs	r3, #2
 8000acc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ad2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ad6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000adc:	f107 0308 	add.w	r3, r7, #8
 8000ae0:	2102      	movs	r1, #2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 ff32 	bl	800194c <HAL_RCC_ClockConfig>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000aee:	f000 f809 	bl	8000b04 <Error_Handler>
  }
}
 8000af2:	bf00      	nop
 8000af4:	3750      	adds	r7, #80	@ 0x50
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40007000 	.word	0x40007000

08000b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b08:	b672      	cpsid	i
}
 8000b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <Error_Handler+0x8>

08000b10 <init_ring_buffer>:
 */

#include "ringbuffer.h"

void init_ring_buffer(Ring_buffer_t *buffer)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	buffer->count = 0;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f8a3 2712 	strh.w	r2, [r3, #1810]	@ 0x712
	buffer->head = 0;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f8a3 2710 	strh.w	r2, [r3, #1808]	@ 0x710
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <buffer_is_full>:

bool buffer_is_full(Ring_buffer_t *buffer)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	return buffer->count == BUFFER_SIZE;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000b4a:	f8b3 3712 	ldrh.w	r3, [r3, #1810]	@ 0x712
 8000b4e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000b52:	4293      	cmp	r3, r2
 8000b54:	bf0c      	ite	eq
 8000b56:	2301      	moveq	r3, #1
 8000b58:	2300      	movne	r3, #0
 8000b5a:	b2db      	uxtb	r3, r3

}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <buffer_is_empty>:

bool buffer_is_empty(Ring_buffer_t *buffer)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	return buffer->count == 0;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000b76:	f8b3 3712 	ldrh.w	r3, [r3, #1810]	@ 0x712
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	bf0c      	ite	eq
 8000b7e:	2301      	moveq	r3, #1
 8000b80:	2300      	movne	r3, #0
 8000b82:	b2db      	uxtb	r3, r3

}
 8000b84:	4618      	mov	r0, r3
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <enqueue>:

bool enqueue(Ring_buffer_t *buffer, uint8_t value)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	460b      	mov	r3, r1
 8000b9a:	70fb      	strb	r3, [r7, #3]
	if(buffer_is_full(buffer))
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff ffcd 	bl	8000b3c <buffer_is_full>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <enqueue+0x1c>
	{
		return false;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	e02c      	b.n	8000c06 <enqueue+0x76>
	}
	else
	{
		buffer->data[buffer->head] = value;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000bb2:	f8b3 3710 	ldrh.w	r3, [r3, #1808]	@ 0x710
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	78fa      	ldrb	r2, [r7, #3]
 8000bbc:	545a      	strb	r2, [r3, r1]
		buffer->head = (buffer->head + 1) % BUFFER_SIZE; // aumenta y se asegura volver a cero
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000bc4:	f8b3 3710 	ldrh.w	r3, [r3, #1808]	@ 0x710
 8000bc8:	3301      	adds	r3, #1
 8000bca:	4a11      	ldr	r2, [pc, #68]	@ (8000c10 <enqueue+0x80>)
 8000bcc:	fb82 1203 	smull	r1, r2, r2, r3
 8000bd0:	1311      	asrs	r1, r2, #12
 8000bd2:	17da      	asrs	r2, r3, #31
 8000bd4:	1a8a      	subs	r2, r1, r2
 8000bd6:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000bda:	fb01 f202 	mul.w	r2, r1, r2
 8000bde:	1a9a      	subs	r2, r3, r2
 8000be0:	b292      	uxth	r2, r2
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000be8:	f8a3 2710 	strh.w	r2, [r3, #1808]	@ 0x710
		buffer->count++;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000bf2:	f8b3 3712 	ldrh.w	r3, [r3, #1810]	@ 0x712
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000c00:	f8a3 2712 	strh.w	r2, [r3, #1810]	@ 0x712
		return true;
 8000c04:	2301      	movs	r3, #1

	}

}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	68db8bad 	.word	0x68db8bad

08000c14 <dequeue>:

bool dequeue(Ring_buffer_t *buffer)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	if (buffer_is_empty(buffer))
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff ffa3 	bl	8000b68 <buffer_is_empty>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <dequeue+0x18>
	{
		return false;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e023      	b.n	8000c74 <dequeue+0x60>
	}
	else
	{
		buffer->head = (buffer->head + 1) % BUFFER_SIZE;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000c32:	f8b3 3710 	ldrh.w	r3, [r3, #1808]	@ 0x710
 8000c36:	3301      	adds	r3, #1
 8000c38:	4a10      	ldr	r2, [pc, #64]	@ (8000c7c <dequeue+0x68>)
 8000c3a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c3e:	1311      	asrs	r1, r2, #12
 8000c40:	17da      	asrs	r2, r3, #31
 8000c42:	1a8a      	subs	r2, r1, r2
 8000c44:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000c48:	fb01 f202 	mul.w	r2, r1, r2
 8000c4c:	1a9a      	subs	r2, r3, r2
 8000c4e:	b292      	uxth	r2, r2
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000c56:	f8a3 2710 	strh.w	r2, [r3, #1808]	@ 0x710
		buffer->count--;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000c60:	f8b3 3712 	ldrh.w	r3, [r3, #1810]	@ 0x712
 8000c64:	3b01      	subs	r3, #1
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000c6e:	f8a3 2712 	strh.w	r2, [r3, #1810]	@ 0x712
		return true;
 8000c72:	2301      	movs	r3, #1
	}
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	68db8bad 	.word	0x68db8bad

08000c80 <get_buffer_size>:

uint32_t get_buffer_size(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
	return (uint32_t) BUFFER_SIZE;
 8000c84:	f242 7310 	movw	r3, #10000	@ 0x2710
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
	...

08000c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ce0 <HAL_MspInit+0x4c>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca2:	4a0f      	ldr	r2, [pc, #60]	@ (8000ce0 <HAL_MspInit+0x4c>)
 8000ca4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ca8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000caa:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce0 <HAL_MspInit+0x4c>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	603b      	str	r3, [r7, #0]
 8000cba:	4b09      	ldr	r3, [pc, #36]	@ (8000ce0 <HAL_MspInit+0x4c>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cbe:	4a08      	ldr	r2, [pc, #32]	@ (8000ce0 <HAL_MspInit+0x4c>)
 8000cc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cc6:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <HAL_MspInit+0x4c>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cd2:	2007      	movs	r0, #7
 8000cd4:	f000 fc24 	bl	8001520 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40023800 	.word	0x40023800

08000ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <NMI_Handler+0x4>

08000cec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <BusFault_Handler+0x4>

08000d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <UsageFault_Handler+0x4>

08000d0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d3a:	f000 fadd 	bl	80012f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d48:	4802      	ldr	r0, [pc, #8]	@ (8000d54 <TIM2_IRQHandler+0x10>)
 8000d4a:	f001 ff05 	bl	8002b58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20002824 	.word	0x20002824

08000d58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d5c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d60:	f000 fddc 	bl	800191c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d70:	4a14      	ldr	r2, [pc, #80]	@ (8000dc4 <_sbrk+0x5c>)
 8000d72:	4b15      	ldr	r3, [pc, #84]	@ (8000dc8 <_sbrk+0x60>)
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d7c:	4b13      	ldr	r3, [pc, #76]	@ (8000dcc <_sbrk+0x64>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d102      	bne.n	8000d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d84:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <_sbrk+0x64>)
 8000d86:	4a12      	ldr	r2, [pc, #72]	@ (8000dd0 <_sbrk+0x68>)
 8000d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d8a:	4b10      	ldr	r3, [pc, #64]	@ (8000dcc <_sbrk+0x64>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d207      	bcs.n	8000da8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d98:	f003 f940 	bl	800401c <__errno>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	220c      	movs	r2, #12
 8000da0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000da2:	f04f 33ff 	mov.w	r3, #4294967295
 8000da6:	e009      	b.n	8000dbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da8:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <_sbrk+0x64>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dae:	4b07      	ldr	r3, [pc, #28]	@ (8000dcc <_sbrk+0x64>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	4a05      	ldr	r2, [pc, #20]	@ (8000dcc <_sbrk+0x64>)
 8000db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dba:	68fb      	ldr	r3, [r7, #12]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20020000 	.word	0x20020000
 8000dc8:	00000400 	.word	0x00000400
 8000dcc:	20002808 	.word	0x20002808
 8000dd0:	20002a00 	.word	0x20002a00

08000dd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd8:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <SystemInit+0x20>)
 8000dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dde:	4a05      	ldr	r2, [pc, #20]	@ (8000df4 <SystemInit+0x20>)
 8000de0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000de4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	@ 0x28
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dfe:	f107 0318 	add.w	r3, r7, #24
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e16:	463b      	mov	r3, r7
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e22:	4b2c      	ldr	r3, [pc, #176]	@ (8000ed4 <MX_TIM2_Init+0xdc>)
 8000e24:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e28:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed4 <MX_TIM2_Init+0xdc>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e30:	4b28      	ldr	r3, [pc, #160]	@ (8000ed4 <MX_TIM2_Init+0xdc>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000e36:	4b27      	ldr	r3, [pc, #156]	@ (8000ed4 <MX_TIM2_Init+0xdc>)
 8000e38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e3c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e3e:	4b25      	ldr	r3, [pc, #148]	@ (8000ed4 <MX_TIM2_Init+0xdc>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e44:	4b23      	ldr	r3, [pc, #140]	@ (8000ed4 <MX_TIM2_Init+0xdc>)
 8000e46:	2280      	movs	r2, #128	@ 0x80
 8000e48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e4a:	4822      	ldr	r0, [pc, #136]	@ (8000ed4 <MX_TIM2_Init+0xdc>)
 8000e4c:	f001 fb66 	bl	800251c <HAL_TIM_Base_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000e56:	f7ff fe55 	bl	8000b04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e5e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e60:	f107 0318 	add.w	r3, r7, #24
 8000e64:	4619      	mov	r1, r3
 8000e66:	481b      	ldr	r0, [pc, #108]	@ (8000ed4 <MX_TIM2_Init+0xdc>)
 8000e68:	f002 f802 	bl	8002e70 <HAL_TIM_ConfigClockSource>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000e72:	f7ff fe47 	bl	8000b04 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000e76:	4817      	ldr	r0, [pc, #92]	@ (8000ed4 <MX_TIM2_Init+0xdc>)
 8000e78:	f001 fc3f 	bl	80026fa <HAL_TIM_IC_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e82:	f7ff fe3f 	bl	8000b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e8e:	f107 0310 	add.w	r3, r7, #16
 8000e92:	4619      	mov	r1, r3
 8000e94:	480f      	ldr	r0, [pc, #60]	@ (8000ed4 <MX_TIM2_Init+0xdc>)
 8000e96:	f002 fb67 	bl	8003568 <HAL_TIMEx_MasterConfigSynchronization>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000ea0:	f7ff fe30 	bl	8000b04 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4806      	ldr	r0, [pc, #24]	@ (8000ed4 <MX_TIM2_Init+0xdc>)
 8000ebc:	f001 ff3c 	bl	8002d38 <HAL_TIM_IC_ConfigChannel>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000ec6:	f7ff fe1d 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	3728      	adds	r7, #40	@ 0x28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20002824 	.word	0x20002824

08000ed8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	@ 0x28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ef8:	d133      	bne.n	8000f62 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	4b1b      	ldr	r3, [pc, #108]	@ (8000f6c <HAL_TIM_Base_MspInit+0x94>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f02:	4a1a      	ldr	r2, [pc, #104]	@ (8000f6c <HAL_TIM_Base_MspInit+0x94>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f0a:	4b18      	ldr	r3, [pc, #96]	@ (8000f6c <HAL_TIM_Base_MspInit+0x94>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	4b14      	ldr	r3, [pc, #80]	@ (8000f6c <HAL_TIM_Base_MspInit+0x94>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	4a13      	ldr	r2, [pc, #76]	@ (8000f6c <HAL_TIM_Base_MspInit+0x94>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f26:	4b11      	ldr	r3, [pc, #68]	@ (8000f6c <HAL_TIM_Base_MspInit+0x94>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f32:	2301      	movs	r3, #1
 8000f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f42:	2301      	movs	r3, #1
 8000f44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4808      	ldr	r0, [pc, #32]	@ (8000f70 <HAL_TIM_Base_MspInit+0x98>)
 8000f4e:	f000 fb37 	bl	80015c0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2100      	movs	r1, #0
 8000f56:	201c      	movs	r0, #28
 8000f58:	f000 faed 	bl	8001536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f5c:	201c      	movs	r0, #28
 8000f5e:	f000 fb06 	bl	800156e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000f62:	bf00      	nop
 8000f64:	3728      	adds	r7, #40	@ 0x28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020000 	.word	0x40020000

08000f74 <HAL_TIM_IC_CaptureCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
    if(gu8_State == IDLE)
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fec <HAL_TIM_IC_CaptureCallback+0x78>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d10b      	bne.n	8000f9e <HAL_TIM_IC_CaptureCallback+0x2a>
    {
        gu32_T1 = TIM2->CCR1;
 8000f86:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f8c:	4a18      	ldr	r2, [pc, #96]	@ (8000ff0 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000f8e:	6013      	str	r3, [r2, #0]
        gu16_TIM2_OVC = 0;
 8000f90:	4b18      	ldr	r3, [pc, #96]	@ (8000ff4 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	801a      	strh	r2, [r3, #0]
        gu8_State = DONE;
 8000f96:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <HAL_TIM_IC_CaptureCallback+0x78>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	701a      	strb	r2, [r3, #0]
        gu32_Ticks = (gu32_T2 + (gu16_TIM2_OVC * 65536)) - gu32_T1;
        gu32_Freq = (uint32_t)(F_CLK/gu32_Ticks);
        gu8_State = IDLE;

    }
}
 8000f9c:	e020      	b.n	8000fe0 <HAL_TIM_IC_CaptureCallback+0x6c>
    else if(gu8_State == DONE)
 8000f9e:	4b13      	ldr	r3, [pc, #76]	@ (8000fec <HAL_TIM_IC_CaptureCallback+0x78>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d11b      	bne.n	8000fe0 <HAL_TIM_IC_CaptureCallback+0x6c>
        gu32_T2 = TIM2->CCR1;
 8000fa8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fae:	4a12      	ldr	r2, [pc, #72]	@ (8000ff8 <HAL_TIM_IC_CaptureCallback+0x84>)
 8000fb0:	6013      	str	r3, [r2, #0]
        gu32_Ticks = (gu32_T2 + (gu16_TIM2_OVC * 65536)) - gu32_T1;
 8000fb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ff4 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	041b      	lsls	r3, r3, #16
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <HAL_TIM_IC_CaptureCallback+0x84>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	441a      	add	r2, r3
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff0 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	4a0c      	ldr	r2, [pc, #48]	@ (8000ffc <HAL_TIM_IC_CaptureCallback+0x88>)
 8000fca:	6013      	str	r3, [r2, #0]
        gu32_Freq = (uint32_t)(F_CLK/gu32_Ticks);
 8000fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000ffc <HAL_TIM_IC_CaptureCallback+0x88>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0b      	ldr	r2, [pc, #44]	@ (8001000 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd6:	4a0b      	ldr	r2, [pc, #44]	@ (8001004 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000fd8:	6013      	str	r3, [r2, #0]
        gu8_State = IDLE;
 8000fda:	4b04      	ldr	r3, [pc, #16]	@ (8000fec <HAL_TIM_IC_CaptureCallback+0x78>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	2000280c 	.word	0x2000280c
 8000ff0:	20002810 	.word	0x20002810
 8000ff4:	2000281c 	.word	0x2000281c
 8000ff8:	20002814 	.word	0x20002814
 8000ffc:	20002818 	.word	0x20002818
 8001000:	0501bd00 	.word	0x0501bd00
 8001004:	20002820 	.word	0x20002820

08001008 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
    gu16_TIM2_OVC++;
 8001010:	4b06      	ldr	r3, [pc, #24]	@ (800102c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001012:	881b      	ldrh	r3, [r3, #0]
 8001014:	b29b      	uxth	r3, r3
 8001016:	3301      	adds	r3, #1
 8001018:	b29a      	uxth	r2, r3
 800101a:	4b04      	ldr	r3, [pc, #16]	@ (800102c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800101c:	801a      	strh	r2, [r3, #0]
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	2000281c 	.word	0x2000281c

08001030 <get_frequency>:

uint32_t get_frequency(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
	return gu32_Freq;
 8001034:	4b03      	ldr	r3, [pc, #12]	@ (8001044 <get_frequency+0x14>)
 8001036:	681b      	ldr	r3, [r3, #0]
}
 8001038:	4618      	mov	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	20002820 	.word	0x20002820

08001048 <disable_tim_interrupts>:

void disable_tim_interrupts(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim2);
 800104c:	4804      	ldr	r0, [pc, #16]	@ (8001060 <disable_tim_interrupts+0x18>)
 800104e:	f001 fb25 	bl	800269c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);
 8001052:	2100      	movs	r1, #0
 8001054:	4802      	ldr	r0, [pc, #8]	@ (8001060 <disable_tim_interrupts+0x18>)
 8001056:	f001 fcd1 	bl	80029fc <HAL_TIM_IC_Stop_IT>

}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20002824 	.word	0x20002824

08001064 <enable_tim_interrupts>:

void enable_tim_interrupts(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001068:	4804      	ldr	r0, [pc, #16]	@ (800107c <enable_tim_interrupts+0x18>)
 800106a:	f001 faa7 	bl	80025bc <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800106e:	2100      	movs	r1, #0
 8001070:	4802      	ldr	r0, [pc, #8]	@ (800107c <enable_tim_interrupts+0x18>)
 8001072:	f001 fb9b 	bl	80027ac <HAL_TIM_IC_Start_IT>
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20002824 	.word	0x20002824

08001080 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001084:	4b11      	ldr	r3, [pc, #68]	@ (80010cc <MX_USART2_UART_Init+0x4c>)
 8001086:	4a12      	ldr	r2, [pc, #72]	@ (80010d0 <MX_USART2_UART_Init+0x50>)
 8001088:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800108a:	4b10      	ldr	r3, [pc, #64]	@ (80010cc <MX_USART2_UART_Init+0x4c>)
 800108c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001090:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001092:	4b0e      	ldr	r3, [pc, #56]	@ (80010cc <MX_USART2_UART_Init+0x4c>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001098:	4b0c      	ldr	r3, [pc, #48]	@ (80010cc <MX_USART2_UART_Init+0x4c>)
 800109a:	2200      	movs	r2, #0
 800109c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800109e:	4b0b      	ldr	r3, [pc, #44]	@ (80010cc <MX_USART2_UART_Init+0x4c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010a4:	4b09      	ldr	r3, [pc, #36]	@ (80010cc <MX_USART2_UART_Init+0x4c>)
 80010a6:	220c      	movs	r2, #12
 80010a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010aa:	4b08      	ldr	r3, [pc, #32]	@ (80010cc <MX_USART2_UART_Init+0x4c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b0:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <MX_USART2_UART_Init+0x4c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010b6:	4805      	ldr	r0, [pc, #20]	@ (80010cc <MX_USART2_UART_Init+0x4c>)
 80010b8:	f002 fae6 	bl	8003688 <HAL_UART_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010c2:	f7ff fd1f 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	2000286c 	.word	0x2000286c
 80010d0:	40004400 	.word	0x40004400

080010d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	@ 0x28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a19      	ldr	r2, [pc, #100]	@ (8001158 <HAL_UART_MspInit+0x84>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d12b      	bne.n	800114e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	4b18      	ldr	r3, [pc, #96]	@ (800115c <HAL_UART_MspInit+0x88>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fe:	4a17      	ldr	r2, [pc, #92]	@ (800115c <HAL_UART_MspInit+0x88>)
 8001100:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001104:	6413      	str	r3, [r2, #64]	@ 0x40
 8001106:	4b15      	ldr	r3, [pc, #84]	@ (800115c <HAL_UART_MspInit+0x88>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	4b11      	ldr	r3, [pc, #68]	@ (800115c <HAL_UART_MspInit+0x88>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	4a10      	ldr	r2, [pc, #64]	@ (800115c <HAL_UART_MspInit+0x88>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6313      	str	r3, [r2, #48]	@ 0x30
 8001122:	4b0e      	ldr	r3, [pc, #56]	@ (800115c <HAL_UART_MspInit+0x88>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800112e:	230c      	movs	r3, #12
 8001130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113a:	2303      	movs	r3, #3
 800113c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800113e:	2307      	movs	r3, #7
 8001140:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	4619      	mov	r1, r3
 8001148:	4805      	ldr	r0, [pc, #20]	@ (8001160 <HAL_UART_MspInit+0x8c>)
 800114a:	f000 fa39 	bl	80015c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800114e:	bf00      	nop
 8001150:	3728      	adds	r7, #40	@ 0x28
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40004400 	.word	0x40004400
 800115c:	40023800 	.word	0x40023800
 8001160:	40020000 	.word	0x40020000

08001164 <receive_byte>:
}

/* USER CODE BEGIN 1 */

char receive_byte(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
    char byte_received;
    HAL_StatusTypeDef status;

    status = HAL_UART_Receive(&huart2, (uint8_t*)&byte_received, sizeof(byte_received), 100);
 800116a:	1db9      	adds	r1, r7, #6
 800116c:	2364      	movs	r3, #100	@ 0x64
 800116e:	2201      	movs	r2, #1
 8001170:	4807      	ldr	r0, [pc, #28]	@ (8001190 <receive_byte+0x2c>)
 8001172:	f002 fb64 	bl	800383e <HAL_UART_Receive>
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]

    if (status == HAL_OK) {
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d101      	bne.n	8001184 <receive_byte+0x20>
        return byte_received;
 8001180:	79bb      	ldrb	r3, [r7, #6]
 8001182:	e000      	b.n	8001186 <receive_byte+0x22>
    } else {

        return -1;
 8001184:	23ff      	movs	r3, #255	@ 0xff

    }
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	2000286c 	.word	0x2000286c

08001194 <data_ready>:

void data_ready(uint32_t time_elapsed, uint8_t muestreo, uint32_t buffer_size, char *pMsg)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af02      	add	r7, sp, #8
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	607a      	str	r2, [r7, #4]
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	460b      	mov	r3, r1
 80011a2:	72fb      	strb	r3, [r7, #11]
    sprintf(pMsg, "Datos listos. Tiempo transcurrido = %lu ms, Muestreo= %u ms, Data Length = %lu.\r\n",
 80011a4:	7afa      	ldrb	r2, [r7, #11]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	4613      	mov	r3, r2
 80011ac:	68fa      	ldr	r2, [r7, #12]
 80011ae:	4909      	ldr	r1, [pc, #36]	@ (80011d4 <data_ready+0x40>)
 80011b0:	6838      	ldr	r0, [r7, #0]
 80011b2:	f002 ff0b 	bl	8003fcc <siprintf>
            time_elapsed, muestreo, buffer_size);

    uint16_t message_length = strlen(pMsg);
 80011b6:	6838      	ldr	r0, [r7, #0]
 80011b8:	f7ff f82a 	bl	8000210 <strlen>
 80011bc:	4603      	mov	r3, r0
 80011be:	82fb      	strh	r3, [r7, #22]

    HAL_UART_Transmit(&huart2, (uint8_t*)pMsg, message_length, 100);
 80011c0:	8afa      	ldrh	r2, [r7, #22]
 80011c2:	2364      	movs	r3, #100	@ 0x64
 80011c4:	6839      	ldr	r1, [r7, #0]
 80011c6:	4804      	ldr	r0, [pc, #16]	@ (80011d8 <data_ready+0x44>)
 80011c8:	f002 faae 	bl	8003728 <HAL_UART_Transmit>
}
 80011cc:	bf00      	nop
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	08004928 	.word	0x08004928
 80011d8:	2000286c 	.word	0x2000286c

080011dc <send_value>:

void send_value(uint8_t value)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
//    uint8_t data[4];
//    data[0] = (value >> 24) & 0xFF;  // Byte más significativo
//    data[1] = (value >> 16) & 0xFF;
//    data[2] = (value >> 8) & 0xFF;
//    data[3] = value & 0xFF;          // Byte menos significativo
	HAL_UART_Transmit(&huart2, &value, sizeof(value), 100);
 80011e6:	1df9      	adds	r1, r7, #7
 80011e8:	2364      	movs	r3, #100	@ 0x64
 80011ea:	2201      	movs	r2, #1
 80011ec:	4803      	ldr	r0, [pc, #12]	@ (80011fc <send_value+0x20>)
 80011ee:	f002 fa9b 	bl	8003728 <HAL_UART_Transmit>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	2000286c 	.word	0x2000286c

08001200 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001200:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001238 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001204:	f7ff fde6 	bl	8000dd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001208:	480c      	ldr	r0, [pc, #48]	@ (800123c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800120a:	490d      	ldr	r1, [pc, #52]	@ (8001240 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800120c:	4a0d      	ldr	r2, [pc, #52]	@ (8001244 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001210:	e002      	b.n	8001218 <LoopCopyDataInit>

08001212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001216:	3304      	adds	r3, #4

08001218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800121c:	d3f9      	bcc.n	8001212 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121e:	4a0a      	ldr	r2, [pc, #40]	@ (8001248 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001220:	4c0a      	ldr	r4, [pc, #40]	@ (800124c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001224:	e001      	b.n	800122a <LoopFillZerobss>

08001226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001228:	3204      	adds	r2, #4

0800122a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800122c:	d3fb      	bcc.n	8001226 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800122e:	f002 fefb 	bl	8004028 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001232:	f7ff fbdb 	bl	80009ec <main>
  bx  lr    
 8001236:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001238:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800123c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001240:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001244:	080049d8 	.word	0x080049d8
  ldr r2, =_sbss
 8001248:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800124c:	20002a00 	.word	0x20002a00

08001250 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001250:	e7fe      	b.n	8001250 <ADC_IRQHandler>
	...

08001254 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001258:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <HAL_Init+0x40>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0d      	ldr	r2, [pc, #52]	@ (8001294 <HAL_Init+0x40>)
 800125e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001262:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001264:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <HAL_Init+0x40>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a0a      	ldr	r2, [pc, #40]	@ (8001294 <HAL_Init+0x40>)
 800126a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800126e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001270:	4b08      	ldr	r3, [pc, #32]	@ (8001294 <HAL_Init+0x40>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a07      	ldr	r2, [pc, #28]	@ (8001294 <HAL_Init+0x40>)
 8001276:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800127a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800127c:	2003      	movs	r0, #3
 800127e:	f000 f94f 	bl	8001520 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001282:	2000      	movs	r0, #0
 8001284:	f000 f808 	bl	8001298 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001288:	f7ff fd04 	bl	8000c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40023c00 	.word	0x40023c00

08001298 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a0:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <HAL_InitTick+0x54>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <HAL_InitTick+0x58>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	4619      	mov	r1, r3
 80012aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 f975 	bl	80015a6 <HAL_SYSTICK_Config>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e00e      	b.n	80012e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b0f      	cmp	r3, #15
 80012ca:	d80a      	bhi.n	80012e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012cc:	2200      	movs	r2, #0
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295
 80012d4:	f000 f92f 	bl	8001536 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d8:	4a06      	ldr	r2, [pc, #24]	@ (80012f4 <HAL_InitTick+0x5c>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012de:	2300      	movs	r3, #0
 80012e0:	e000      	b.n	80012e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000000 	.word	0x20000000
 80012f0:	20000008 	.word	0x20000008
 80012f4:	20000004 	.word	0x20000004

080012f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012fc:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <HAL_IncTick+0x20>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	4b06      	ldr	r3, [pc, #24]	@ (800131c <HAL_IncTick+0x24>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4413      	add	r3, r2
 8001308:	4a04      	ldr	r2, [pc, #16]	@ (800131c <HAL_IncTick+0x24>)
 800130a:	6013      	str	r3, [r2, #0]
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	20000008 	.word	0x20000008
 800131c:	200028b4 	.word	0x200028b4

08001320 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return uwTick;
 8001324:	4b03      	ldr	r3, [pc, #12]	@ (8001334 <HAL_GetTick+0x14>)
 8001326:	681b      	ldr	r3, [r3, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	200028b4 	.word	0x200028b4

08001338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001348:	4b0c      	ldr	r3, [pc, #48]	@ (800137c <__NVIC_SetPriorityGrouping+0x44>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001354:	4013      	ands	r3, r2
 8001356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001360:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001364:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800136a:	4a04      	ldr	r2, [pc, #16]	@ (800137c <__NVIC_SetPriorityGrouping+0x44>)
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	60d3      	str	r3, [r2, #12]
}
 8001370:	bf00      	nop
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001384:	4b04      	ldr	r3, [pc, #16]	@ (8001398 <__NVIC_GetPriorityGrouping+0x18>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	0a1b      	lsrs	r3, r3, #8
 800138a:	f003 0307 	and.w	r3, r3, #7
}
 800138e:	4618      	mov	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	db0b      	blt.n	80013c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	f003 021f 	and.w	r2, r3, #31
 80013b4:	4907      	ldr	r1, [pc, #28]	@ (80013d4 <__NVIC_EnableIRQ+0x38>)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	095b      	lsrs	r3, r3, #5
 80013bc:	2001      	movs	r0, #1
 80013be:	fa00 f202 	lsl.w	r2, r0, r2
 80013c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000e100 	.word	0xe000e100

080013d8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	db12      	blt.n	8001410 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	f003 021f 	and.w	r2, r3, #31
 80013f0:	490a      	ldr	r1, [pc, #40]	@ (800141c <__NVIC_DisableIRQ+0x44>)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	095b      	lsrs	r3, r3, #5
 80013f8:	2001      	movs	r0, #1
 80013fa:	fa00 f202 	lsl.w	r2, r0, r2
 80013fe:	3320      	adds	r3, #32
 8001400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001404:	f3bf 8f4f 	dsb	sy
}
 8001408:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800140a:	f3bf 8f6f 	isb	sy
}
 800140e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000e100 	.word	0xe000e100

08001420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	6039      	str	r1, [r7, #0]
 800142a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800142c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001430:	2b00      	cmp	r3, #0
 8001432:	db0a      	blt.n	800144a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	b2da      	uxtb	r2, r3
 8001438:	490c      	ldr	r1, [pc, #48]	@ (800146c <__NVIC_SetPriority+0x4c>)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	0112      	lsls	r2, r2, #4
 8001440:	b2d2      	uxtb	r2, r2
 8001442:	440b      	add	r3, r1
 8001444:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001448:	e00a      	b.n	8001460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	b2da      	uxtb	r2, r3
 800144e:	4908      	ldr	r1, [pc, #32]	@ (8001470 <__NVIC_SetPriority+0x50>)
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	f003 030f 	and.w	r3, r3, #15
 8001456:	3b04      	subs	r3, #4
 8001458:	0112      	lsls	r2, r2, #4
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	440b      	add	r3, r1
 800145e:	761a      	strb	r2, [r3, #24]
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000e100 	.word	0xe000e100
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001474:	b480      	push	{r7}
 8001476:	b089      	sub	sp, #36	@ 0x24
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f1c3 0307 	rsb	r3, r3, #7
 800148e:	2b04      	cmp	r3, #4
 8001490:	bf28      	it	cs
 8001492:	2304      	movcs	r3, #4
 8001494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3304      	adds	r3, #4
 800149a:	2b06      	cmp	r3, #6
 800149c:	d902      	bls.n	80014a4 <NVIC_EncodePriority+0x30>
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3b03      	subs	r3, #3
 80014a2:	e000      	b.n	80014a6 <NVIC_EncodePriority+0x32>
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a8:	f04f 32ff 	mov.w	r2, #4294967295
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43da      	mvns	r2, r3
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	401a      	ands	r2, r3
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014bc:	f04f 31ff 	mov.w	r1, #4294967295
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	fa01 f303 	lsl.w	r3, r1, r3
 80014c6:	43d9      	mvns	r1, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014cc:	4313      	orrs	r3, r2
         );
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3724      	adds	r7, #36	@ 0x24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014ec:	d301      	bcc.n	80014f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ee:	2301      	movs	r3, #1
 80014f0:	e00f      	b.n	8001512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f2:	4a0a      	ldr	r2, [pc, #40]	@ (800151c <SysTick_Config+0x40>)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014fa:	210f      	movs	r1, #15
 80014fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001500:	f7ff ff8e 	bl	8001420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001504:	4b05      	ldr	r3, [pc, #20]	@ (800151c <SysTick_Config+0x40>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800150a:	4b04      	ldr	r3, [pc, #16]	@ (800151c <SysTick_Config+0x40>)
 800150c:	2207      	movs	r2, #7
 800150e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	e000e010 	.word	0xe000e010

08001520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff ff05 	bl	8001338 <__NVIC_SetPriorityGrouping>
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001536:	b580      	push	{r7, lr}
 8001538:	b086      	sub	sp, #24
 800153a:	af00      	add	r7, sp, #0
 800153c:	4603      	mov	r3, r0
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	607a      	str	r2, [r7, #4]
 8001542:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001548:	f7ff ff1a 	bl	8001380 <__NVIC_GetPriorityGrouping>
 800154c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	68b9      	ldr	r1, [r7, #8]
 8001552:	6978      	ldr	r0, [r7, #20]
 8001554:	f7ff ff8e 	bl	8001474 <NVIC_EncodePriority>
 8001558:	4602      	mov	r2, r0
 800155a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800155e:	4611      	mov	r1, r2
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff5d 	bl	8001420 <__NVIC_SetPriority>
}
 8001566:	bf00      	nop
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	4603      	mov	r3, r0
 8001576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff0d 	bl	800139c <__NVIC_EnableIRQ>
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	4603      	mov	r3, r0
 8001592:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff1d 	bl	80013d8 <__NVIC_DisableIRQ>
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff ff94 	bl	80014dc <SysTick_Config>
 80015b4:	4603      	mov	r3, r0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b089      	sub	sp, #36	@ 0x24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
 80015da:	e165      	b.n	80018a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015dc:	2201      	movs	r2, #1
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	4013      	ands	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	f040 8154 	bne.w	80018a2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f003 0303 	and.w	r3, r3, #3
 8001602:	2b01      	cmp	r3, #1
 8001604:	d005      	beq.n	8001612 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800160e:	2b02      	cmp	r3, #2
 8001610:	d130      	bne.n	8001674 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	2203      	movs	r2, #3
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4013      	ands	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	68da      	ldr	r2, [r3, #12]
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4313      	orrs	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001648:	2201      	movs	r2, #1
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	091b      	lsrs	r3, r3, #4
 800165e:	f003 0201 	and.w	r2, r3, #1
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	2b03      	cmp	r3, #3
 800167e:	d017      	beq.n	80016b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	2203      	movs	r2, #3
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d123      	bne.n	8001704 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	08da      	lsrs	r2, r3, #3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3208      	adds	r2, #8
 80016c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	f003 0307 	and.w	r3, r3, #7
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	220f      	movs	r2, #15
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	691a      	ldr	r2, [r3, #16]
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	08da      	lsrs	r2, r3, #3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3208      	adds	r2, #8
 80016fe:	69b9      	ldr	r1, [r7, #24]
 8001700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	2203      	movs	r2, #3
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4013      	ands	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 0203 	and.w	r2, r3, #3
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 80ae 	beq.w	80018a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	4b5d      	ldr	r3, [pc, #372]	@ (80018c0 <HAL_GPIO_Init+0x300>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174e:	4a5c      	ldr	r2, [pc, #368]	@ (80018c0 <HAL_GPIO_Init+0x300>)
 8001750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001754:	6453      	str	r3, [r2, #68]	@ 0x44
 8001756:	4b5a      	ldr	r3, [pc, #360]	@ (80018c0 <HAL_GPIO_Init+0x300>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800175a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001762:	4a58      	ldr	r2, [pc, #352]	@ (80018c4 <HAL_GPIO_Init+0x304>)
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	089b      	lsrs	r3, r3, #2
 8001768:	3302      	adds	r3, #2
 800176a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	220f      	movs	r2, #15
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4013      	ands	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a4f      	ldr	r2, [pc, #316]	@ (80018c8 <HAL_GPIO_Init+0x308>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d025      	beq.n	80017da <HAL_GPIO_Init+0x21a>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a4e      	ldr	r2, [pc, #312]	@ (80018cc <HAL_GPIO_Init+0x30c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d01f      	beq.n	80017d6 <HAL_GPIO_Init+0x216>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a4d      	ldr	r2, [pc, #308]	@ (80018d0 <HAL_GPIO_Init+0x310>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d019      	beq.n	80017d2 <HAL_GPIO_Init+0x212>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a4c      	ldr	r2, [pc, #304]	@ (80018d4 <HAL_GPIO_Init+0x314>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d013      	beq.n	80017ce <HAL_GPIO_Init+0x20e>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a4b      	ldr	r2, [pc, #300]	@ (80018d8 <HAL_GPIO_Init+0x318>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d00d      	beq.n	80017ca <HAL_GPIO_Init+0x20a>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a4a      	ldr	r2, [pc, #296]	@ (80018dc <HAL_GPIO_Init+0x31c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d007      	beq.n	80017c6 <HAL_GPIO_Init+0x206>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a49      	ldr	r2, [pc, #292]	@ (80018e0 <HAL_GPIO_Init+0x320>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d101      	bne.n	80017c2 <HAL_GPIO_Init+0x202>
 80017be:	2306      	movs	r3, #6
 80017c0:	e00c      	b.n	80017dc <HAL_GPIO_Init+0x21c>
 80017c2:	2307      	movs	r3, #7
 80017c4:	e00a      	b.n	80017dc <HAL_GPIO_Init+0x21c>
 80017c6:	2305      	movs	r3, #5
 80017c8:	e008      	b.n	80017dc <HAL_GPIO_Init+0x21c>
 80017ca:	2304      	movs	r3, #4
 80017cc:	e006      	b.n	80017dc <HAL_GPIO_Init+0x21c>
 80017ce:	2303      	movs	r3, #3
 80017d0:	e004      	b.n	80017dc <HAL_GPIO_Init+0x21c>
 80017d2:	2302      	movs	r3, #2
 80017d4:	e002      	b.n	80017dc <HAL_GPIO_Init+0x21c>
 80017d6:	2301      	movs	r3, #1
 80017d8:	e000      	b.n	80017dc <HAL_GPIO_Init+0x21c>
 80017da:	2300      	movs	r3, #0
 80017dc:	69fa      	ldr	r2, [r7, #28]
 80017de:	f002 0203 	and.w	r2, r2, #3
 80017e2:	0092      	lsls	r2, r2, #2
 80017e4:	4093      	lsls	r3, r2
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017ec:	4935      	ldr	r1, [pc, #212]	@ (80018c4 <HAL_GPIO_Init+0x304>)
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	089b      	lsrs	r3, r3, #2
 80017f2:	3302      	adds	r3, #2
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017fa:	4b3a      	ldr	r3, [pc, #232]	@ (80018e4 <HAL_GPIO_Init+0x324>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	43db      	mvns	r3, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4013      	ands	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800181e:	4a31      	ldr	r2, [pc, #196]	@ (80018e4 <HAL_GPIO_Init+0x324>)
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001824:	4b2f      	ldr	r3, [pc, #188]	@ (80018e4 <HAL_GPIO_Init+0x324>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001848:	4a26      	ldr	r2, [pc, #152]	@ (80018e4 <HAL_GPIO_Init+0x324>)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800184e:	4b25      	ldr	r3, [pc, #148]	@ (80018e4 <HAL_GPIO_Init+0x324>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	43db      	mvns	r3, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4013      	ands	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	4313      	orrs	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001872:	4a1c      	ldr	r2, [pc, #112]	@ (80018e4 <HAL_GPIO_Init+0x324>)
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001878:	4b1a      	ldr	r3, [pc, #104]	@ (80018e4 <HAL_GPIO_Init+0x324>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800189c:	4a11      	ldr	r2, [pc, #68]	@ (80018e4 <HAL_GPIO_Init+0x324>)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3301      	adds	r3, #1
 80018a6:	61fb      	str	r3, [r7, #28]
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	2b0f      	cmp	r3, #15
 80018ac:	f67f ae96 	bls.w	80015dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018b0:	bf00      	nop
 80018b2:	bf00      	nop
 80018b4:	3724      	adds	r7, #36	@ 0x24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40013800 	.word	0x40013800
 80018c8:	40020000 	.word	0x40020000
 80018cc:	40020400 	.word	0x40020400
 80018d0:	40020800 	.word	0x40020800
 80018d4:	40020c00 	.word	0x40020c00
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40021400 	.word	0x40021400
 80018e0:	40021800 	.word	0x40021800
 80018e4:	40013c00 	.word	0x40013c00

080018e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	807b      	strh	r3, [r7, #2]
 80018f4:	4613      	mov	r3, r2
 80018f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018f8:	787b      	ldrb	r3, [r7, #1]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018fe:	887a      	ldrh	r2, [r7, #2]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001904:	e003      	b.n	800190e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001906:	887b      	ldrh	r3, [r7, #2]
 8001908:	041a      	lsls	r2, r3, #16
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	619a      	str	r2, [r3, #24]
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
	...

0800191c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001926:	4b08      	ldr	r3, [pc, #32]	@ (8001948 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001928:	695a      	ldr	r2, [r3, #20]
 800192a:	88fb      	ldrh	r3, [r7, #6]
 800192c:	4013      	ands	r3, r2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d006      	beq.n	8001940 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001932:	4a05      	ldr	r2, [pc, #20]	@ (8001948 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001934:	88fb      	ldrh	r3, [r7, #6]
 8001936:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff f83c 	bl	80009b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001940:	bf00      	nop
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40013c00 	.word	0x40013c00

0800194c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e0cc      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001960:	4b68      	ldr	r3, [pc, #416]	@ (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 030f 	and.w	r3, r3, #15
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d90c      	bls.n	8001988 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196e:	4b65      	ldr	r3, [pc, #404]	@ (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001976:	4b63      	ldr	r3, [pc, #396]	@ (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	d001      	beq.n	8001988 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e0b8      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d020      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	d005      	beq.n	80019ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019a0:	4b59      	ldr	r3, [pc, #356]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	4a58      	ldr	r2, [pc, #352]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80019aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0308 	and.w	r3, r3, #8
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d005      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019b8:	4b53      	ldr	r3, [pc, #332]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	4a52      	ldr	r2, [pc, #328]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80019c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c4:	4b50      	ldr	r3, [pc, #320]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	494d      	ldr	r1, [pc, #308]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d044      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d107      	bne.n	80019fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ea:	4b47      	ldr	r3, [pc, #284]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d119      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e07f      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d003      	beq.n	8001a0a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	d107      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a0a:	4b3f      	ldr	r3, [pc, #252]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d109      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e06f      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e067      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a2a:	4b37      	ldr	r3, [pc, #220]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f023 0203 	bic.w	r2, r3, #3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	4934      	ldr	r1, [pc, #208]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a3c:	f7ff fc70 	bl	8001320 <HAL_GetTick>
 8001a40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a42:	e00a      	b.n	8001a5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a44:	f7ff fc6c 	bl	8001320 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e04f      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5a:	4b2b      	ldr	r3, [pc, #172]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 020c 	and.w	r2, r3, #12
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d1eb      	bne.n	8001a44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a6c:	4b25      	ldr	r3, [pc, #148]	@ (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 030f 	and.w	r3, r3, #15
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d20c      	bcs.n	8001a94 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7a:	4b22      	ldr	r3, [pc, #136]	@ (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a82:	4b20      	ldr	r3, [pc, #128]	@ (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d001      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e032      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d008      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa0:	4b19      	ldr	r3, [pc, #100]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	4916      	ldr	r1, [pc, #88]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d009      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001abe:	4b12      	ldr	r3, [pc, #72]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	490e      	ldr	r1, [pc, #56]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ad2:	f000 f855 	bl	8001b80 <HAL_RCC_GetSysClockFreq>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	091b      	lsrs	r3, r3, #4
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	490a      	ldr	r1, [pc, #40]	@ (8001b0c <HAL_RCC_ClockConfig+0x1c0>)
 8001ae4:	5ccb      	ldrb	r3, [r1, r3]
 8001ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aea:	4a09      	ldr	r2, [pc, #36]	@ (8001b10 <HAL_RCC_ClockConfig+0x1c4>)
 8001aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001aee:	4b09      	ldr	r3, [pc, #36]	@ (8001b14 <HAL_RCC_ClockConfig+0x1c8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fbd0 	bl	8001298 <HAL_InitTick>

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40023c00 	.word	0x40023c00
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	0800497c 	.word	0x0800497c
 8001b10:	20000000 	.word	0x20000000
 8001b14:	20000004 	.word	0x20000004

08001b18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b1c:	4b03      	ldr	r3, [pc, #12]	@ (8001b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000000 	.word	0x20000000

08001b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b34:	f7ff fff0 	bl	8001b18 <HAL_RCC_GetHCLKFreq>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	4b05      	ldr	r3, [pc, #20]	@ (8001b50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	0a9b      	lsrs	r3, r3, #10
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	4903      	ldr	r1, [pc, #12]	@ (8001b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b46:	5ccb      	ldrb	r3, [r1, r3]
 8001b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40023800 	.word	0x40023800
 8001b54:	0800498c 	.word	0x0800498c

08001b58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b5c:	f7ff ffdc 	bl	8001b18 <HAL_RCC_GetHCLKFreq>
 8001b60:	4602      	mov	r2, r0
 8001b62:	4b05      	ldr	r3, [pc, #20]	@ (8001b78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	0b5b      	lsrs	r3, r3, #13
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	4903      	ldr	r1, [pc, #12]	@ (8001b7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b6e:	5ccb      	ldrb	r3, [r1, r3]
 8001b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	0800498c 	.word	0x0800498c

08001b80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b84:	b0ae      	sub	sp, #184	@ 0xb8
 8001b86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ba6:	4bcb      	ldr	r3, [pc, #812]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 030c 	and.w	r3, r3, #12
 8001bae:	2b0c      	cmp	r3, #12
 8001bb0:	f200 8206 	bhi.w	8001fc0 <HAL_RCC_GetSysClockFreq+0x440>
 8001bb4:	a201      	add	r2, pc, #4	@ (adr r2, 8001bbc <HAL_RCC_GetSysClockFreq+0x3c>)
 8001bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bba:	bf00      	nop
 8001bbc:	08001bf1 	.word	0x08001bf1
 8001bc0:	08001fc1 	.word	0x08001fc1
 8001bc4:	08001fc1 	.word	0x08001fc1
 8001bc8:	08001fc1 	.word	0x08001fc1
 8001bcc:	08001bf9 	.word	0x08001bf9
 8001bd0:	08001fc1 	.word	0x08001fc1
 8001bd4:	08001fc1 	.word	0x08001fc1
 8001bd8:	08001fc1 	.word	0x08001fc1
 8001bdc:	08001c01 	.word	0x08001c01
 8001be0:	08001fc1 	.word	0x08001fc1
 8001be4:	08001fc1 	.word	0x08001fc1
 8001be8:	08001fc1 	.word	0x08001fc1
 8001bec:	08001df1 	.word	0x08001df1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bf0:	4bb9      	ldr	r3, [pc, #740]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001bf2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001bf6:	e1e7      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bf8:	4bb8      	ldr	r3, [pc, #736]	@ (8001edc <HAL_RCC_GetSysClockFreq+0x35c>)
 8001bfa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001bfe:	e1e3      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c00:	4bb4      	ldr	r3, [pc, #720]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c0c:	4bb1      	ldr	r3, [pc, #708]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d071      	beq.n	8001cfc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c18:	4bae      	ldr	r3, [pc, #696]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	099b      	lsrs	r3, r3, #6
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001c24:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001c28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c30:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001c34:	2300      	movs	r3, #0
 8001c36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001c3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001c3e:	4622      	mov	r2, r4
 8001c40:	462b      	mov	r3, r5
 8001c42:	f04f 0000 	mov.w	r0, #0
 8001c46:	f04f 0100 	mov.w	r1, #0
 8001c4a:	0159      	lsls	r1, r3, #5
 8001c4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c50:	0150      	lsls	r0, r2, #5
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4621      	mov	r1, r4
 8001c58:	1a51      	subs	r1, r2, r1
 8001c5a:	6439      	str	r1, [r7, #64]	@ 0x40
 8001c5c:	4629      	mov	r1, r5
 8001c5e:	eb63 0301 	sbc.w	r3, r3, r1
 8001c62:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	f04f 0300 	mov.w	r3, #0
 8001c6c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001c70:	4649      	mov	r1, r9
 8001c72:	018b      	lsls	r3, r1, #6
 8001c74:	4641      	mov	r1, r8
 8001c76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c7a:	4641      	mov	r1, r8
 8001c7c:	018a      	lsls	r2, r1, #6
 8001c7e:	4641      	mov	r1, r8
 8001c80:	1a51      	subs	r1, r2, r1
 8001c82:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001c84:	4649      	mov	r1, r9
 8001c86:	eb63 0301 	sbc.w	r3, r3, r1
 8001c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	f04f 0300 	mov.w	r3, #0
 8001c94:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001c98:	4649      	mov	r1, r9
 8001c9a:	00cb      	lsls	r3, r1, #3
 8001c9c:	4641      	mov	r1, r8
 8001c9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ca2:	4641      	mov	r1, r8
 8001ca4:	00ca      	lsls	r2, r1, #3
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4603      	mov	r3, r0
 8001cac:	4622      	mov	r2, r4
 8001cae:	189b      	adds	r3, r3, r2
 8001cb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001cb2:	462b      	mov	r3, r5
 8001cb4:	460a      	mov	r2, r1
 8001cb6:	eb42 0303 	adc.w	r3, r2, r3
 8001cba:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	f04f 0300 	mov.w	r3, #0
 8001cc4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001cc8:	4629      	mov	r1, r5
 8001cca:	024b      	lsls	r3, r1, #9
 8001ccc:	4621      	mov	r1, r4
 8001cce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cd2:	4621      	mov	r1, r4
 8001cd4:	024a      	lsls	r2, r1, #9
 8001cd6:	4610      	mov	r0, r2
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001ce4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001ce8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001cec:	f7fe fae8 	bl	80002c0 <__aeabi_uldivmod>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001cfa:	e067      	b.n	8001dcc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cfc:	4b75      	ldr	r3, [pc, #468]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	099b      	lsrs	r3, r3, #6
 8001d02:	2200      	movs	r2, #0
 8001d04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001d08:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001d0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001d16:	2300      	movs	r3, #0
 8001d18:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001d1a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001d1e:	4622      	mov	r2, r4
 8001d20:	462b      	mov	r3, r5
 8001d22:	f04f 0000 	mov.w	r0, #0
 8001d26:	f04f 0100 	mov.w	r1, #0
 8001d2a:	0159      	lsls	r1, r3, #5
 8001d2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d30:	0150      	lsls	r0, r2, #5
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	4621      	mov	r1, r4
 8001d38:	1a51      	subs	r1, r2, r1
 8001d3a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001d3c:	4629      	mov	r1, r5
 8001d3e:	eb63 0301 	sbc.w	r3, r3, r1
 8001d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d44:	f04f 0200 	mov.w	r2, #0
 8001d48:	f04f 0300 	mov.w	r3, #0
 8001d4c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001d50:	4649      	mov	r1, r9
 8001d52:	018b      	lsls	r3, r1, #6
 8001d54:	4641      	mov	r1, r8
 8001d56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d5a:	4641      	mov	r1, r8
 8001d5c:	018a      	lsls	r2, r1, #6
 8001d5e:	4641      	mov	r1, r8
 8001d60:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d64:	4649      	mov	r1, r9
 8001d66:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d76:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d7e:	4692      	mov	sl, r2
 8001d80:	469b      	mov	fp, r3
 8001d82:	4623      	mov	r3, r4
 8001d84:	eb1a 0303 	adds.w	r3, sl, r3
 8001d88:	623b      	str	r3, [r7, #32]
 8001d8a:	462b      	mov	r3, r5
 8001d8c:	eb4b 0303 	adc.w	r3, fp, r3
 8001d90:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d92:	f04f 0200 	mov.w	r2, #0
 8001d96:	f04f 0300 	mov.w	r3, #0
 8001d9a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001d9e:	4629      	mov	r1, r5
 8001da0:	028b      	lsls	r3, r1, #10
 8001da2:	4621      	mov	r1, r4
 8001da4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001da8:	4621      	mov	r1, r4
 8001daa:	028a      	lsls	r2, r1, #10
 8001dac:	4610      	mov	r0, r2
 8001dae:	4619      	mov	r1, r3
 8001db0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001db4:	2200      	movs	r2, #0
 8001db6:	673b      	str	r3, [r7, #112]	@ 0x70
 8001db8:	677a      	str	r2, [r7, #116]	@ 0x74
 8001dba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001dbe:	f7fe fa7f 	bl	80002c0 <__aeabi_uldivmod>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001dcc:	4b41      	ldr	r3, [pc, #260]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	0c1b      	lsrs	r3, r3, #16
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001dde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001de2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001dee:	e0eb      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001df0:	4b38      	ldr	r3, [pc, #224]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001df8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dfc:	4b35      	ldr	r3, [pc, #212]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d06b      	beq.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e08:	4b32      	ldr	r3, [pc, #200]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	099b      	lsrs	r3, r3, #6
 8001e0e:	2200      	movs	r2, #0
 8001e10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001e12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001e14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e1a:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001e20:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001e24:	4622      	mov	r2, r4
 8001e26:	462b      	mov	r3, r5
 8001e28:	f04f 0000 	mov.w	r0, #0
 8001e2c:	f04f 0100 	mov.w	r1, #0
 8001e30:	0159      	lsls	r1, r3, #5
 8001e32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e36:	0150      	lsls	r0, r2, #5
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4621      	mov	r1, r4
 8001e3e:	1a51      	subs	r1, r2, r1
 8001e40:	61b9      	str	r1, [r7, #24]
 8001e42:	4629      	mov	r1, r5
 8001e44:	eb63 0301 	sbc.w	r3, r3, r1
 8001e48:	61fb      	str	r3, [r7, #28]
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	f04f 0300 	mov.w	r3, #0
 8001e52:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001e56:	4659      	mov	r1, fp
 8001e58:	018b      	lsls	r3, r1, #6
 8001e5a:	4651      	mov	r1, sl
 8001e5c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e60:	4651      	mov	r1, sl
 8001e62:	018a      	lsls	r2, r1, #6
 8001e64:	4651      	mov	r1, sl
 8001e66:	ebb2 0801 	subs.w	r8, r2, r1
 8001e6a:	4659      	mov	r1, fp
 8001e6c:	eb63 0901 	sbc.w	r9, r3, r1
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	f04f 0300 	mov.w	r3, #0
 8001e78:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e7c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e80:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e84:	4690      	mov	r8, r2
 8001e86:	4699      	mov	r9, r3
 8001e88:	4623      	mov	r3, r4
 8001e8a:	eb18 0303 	adds.w	r3, r8, r3
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	462b      	mov	r3, r5
 8001e92:	eb49 0303 	adc.w	r3, r9, r3
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	f04f 0300 	mov.w	r3, #0
 8001ea0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001ea4:	4629      	mov	r1, r5
 8001ea6:	024b      	lsls	r3, r1, #9
 8001ea8:	4621      	mov	r1, r4
 8001eaa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001eae:	4621      	mov	r1, r4
 8001eb0:	024a      	lsls	r2, r1, #9
 8001eb2:	4610      	mov	r0, r2
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001eba:	2200      	movs	r2, #0
 8001ebc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001ebe:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001ec0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001ec4:	f7fe f9fc 	bl	80002c0 <__aeabi_uldivmod>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4613      	mov	r3, r2
 8001ece:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001ed2:	e065      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x420>
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	00f42400 	.word	0x00f42400
 8001edc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ee0:	4b3d      	ldr	r3, [pc, #244]	@ (8001fd8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	099b      	lsrs	r3, r3, #6
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	4611      	mov	r1, r2
 8001eec:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ef0:	653b      	str	r3, [r7, #80]	@ 0x50
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	657b      	str	r3, [r7, #84]	@ 0x54
 8001ef6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001efa:	4642      	mov	r2, r8
 8001efc:	464b      	mov	r3, r9
 8001efe:	f04f 0000 	mov.w	r0, #0
 8001f02:	f04f 0100 	mov.w	r1, #0
 8001f06:	0159      	lsls	r1, r3, #5
 8001f08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f0c:	0150      	lsls	r0, r2, #5
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4641      	mov	r1, r8
 8001f14:	1a51      	subs	r1, r2, r1
 8001f16:	60b9      	str	r1, [r7, #8]
 8001f18:	4649      	mov	r1, r9
 8001f1a:	eb63 0301 	sbc.w	r3, r3, r1
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	f04f 0200 	mov.w	r2, #0
 8001f24:	f04f 0300 	mov.w	r3, #0
 8001f28:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001f2c:	4659      	mov	r1, fp
 8001f2e:	018b      	lsls	r3, r1, #6
 8001f30:	4651      	mov	r1, sl
 8001f32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f36:	4651      	mov	r1, sl
 8001f38:	018a      	lsls	r2, r1, #6
 8001f3a:	4651      	mov	r1, sl
 8001f3c:	1a54      	subs	r4, r2, r1
 8001f3e:	4659      	mov	r1, fp
 8001f40:	eb63 0501 	sbc.w	r5, r3, r1
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	f04f 0300 	mov.w	r3, #0
 8001f4c:	00eb      	lsls	r3, r5, #3
 8001f4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f52:	00e2      	lsls	r2, r4, #3
 8001f54:	4614      	mov	r4, r2
 8001f56:	461d      	mov	r5, r3
 8001f58:	4643      	mov	r3, r8
 8001f5a:	18e3      	adds	r3, r4, r3
 8001f5c:	603b      	str	r3, [r7, #0]
 8001f5e:	464b      	mov	r3, r9
 8001f60:	eb45 0303 	adc.w	r3, r5, r3
 8001f64:	607b      	str	r3, [r7, #4]
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	f04f 0300 	mov.w	r3, #0
 8001f6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f72:	4629      	mov	r1, r5
 8001f74:	028b      	lsls	r3, r1, #10
 8001f76:	4621      	mov	r1, r4
 8001f78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f7c:	4621      	mov	r1, r4
 8001f7e:	028a      	lsls	r2, r1, #10
 8001f80:	4610      	mov	r0, r2
 8001f82:	4619      	mov	r1, r3
 8001f84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f88:	2200      	movs	r2, #0
 8001f8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f8c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001f8e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001f92:	f7fe f995 	bl	80002c0 <__aeabi_uldivmod>
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	0f1b      	lsrs	r3, r3, #28
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001fae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001fb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001fbe:	e003      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fc0:	4b06      	ldr	r3, [pc, #24]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0x45c>)
 8001fc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001fc6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fc8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	37b8      	adds	r7, #184	@ 0xb8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	00f42400 	.word	0x00f42400

08001fe0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e28d      	b.n	800250e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 8083 	beq.w	8002106 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002000:	4b94      	ldr	r3, [pc, #592]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 030c 	and.w	r3, r3, #12
 8002008:	2b04      	cmp	r3, #4
 800200a:	d019      	beq.n	8002040 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800200c:	4b91      	ldr	r3, [pc, #580]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 030c 	and.w	r3, r3, #12
        || \
 8002014:	2b08      	cmp	r3, #8
 8002016:	d106      	bne.n	8002026 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002018:	4b8e      	ldr	r3, [pc, #568]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002020:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002024:	d00c      	beq.n	8002040 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002026:	4b8b      	ldr	r3, [pc, #556]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800202e:	2b0c      	cmp	r3, #12
 8002030:	d112      	bne.n	8002058 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002032:	4b88      	ldr	r3, [pc, #544]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800203a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800203e:	d10b      	bne.n	8002058 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002040:	4b84      	ldr	r3, [pc, #528]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d05b      	beq.n	8002104 <HAL_RCC_OscConfig+0x124>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d157      	bne.n	8002104 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e25a      	b.n	800250e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002060:	d106      	bne.n	8002070 <HAL_RCC_OscConfig+0x90>
 8002062:	4b7c      	ldr	r3, [pc, #496]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a7b      	ldr	r2, [pc, #492]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 8002068:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	e01d      	b.n	80020ac <HAL_RCC_OscConfig+0xcc>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002078:	d10c      	bne.n	8002094 <HAL_RCC_OscConfig+0xb4>
 800207a:	4b76      	ldr	r3, [pc, #472]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a75      	ldr	r2, [pc, #468]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 8002080:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	4b73      	ldr	r3, [pc, #460]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a72      	ldr	r2, [pc, #456]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 800208c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	e00b      	b.n	80020ac <HAL_RCC_OscConfig+0xcc>
 8002094:	4b6f      	ldr	r3, [pc, #444]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a6e      	ldr	r2, [pc, #440]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 800209a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800209e:	6013      	str	r3, [r2, #0]
 80020a0:	4b6c      	ldr	r3, [pc, #432]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a6b      	ldr	r2, [pc, #428]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 80020a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d013      	beq.n	80020dc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b4:	f7ff f934 	bl	8001320 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020bc:	f7ff f930 	bl	8001320 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b64      	cmp	r3, #100	@ 0x64
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e21f      	b.n	800250e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ce:	4b61      	ldr	r3, [pc, #388]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d0f0      	beq.n	80020bc <HAL_RCC_OscConfig+0xdc>
 80020da:	e014      	b.n	8002106 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020dc:	f7ff f920 	bl	8001320 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e4:	f7ff f91c 	bl	8001320 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b64      	cmp	r3, #100	@ 0x64
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e20b      	b.n	800250e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020f6:	4b57      	ldr	r3, [pc, #348]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f0      	bne.n	80020e4 <HAL_RCC_OscConfig+0x104>
 8002102:	e000      	b.n	8002106 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002104:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d06f      	beq.n	80021f2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002112:	4b50      	ldr	r3, [pc, #320]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 030c 	and.w	r3, r3, #12
 800211a:	2b00      	cmp	r3, #0
 800211c:	d017      	beq.n	800214e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800211e:	4b4d      	ldr	r3, [pc, #308]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 030c 	and.w	r3, r3, #12
        || \
 8002126:	2b08      	cmp	r3, #8
 8002128:	d105      	bne.n	8002136 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800212a:	4b4a      	ldr	r3, [pc, #296]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00b      	beq.n	800214e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002136:	4b47      	ldr	r3, [pc, #284]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800213e:	2b0c      	cmp	r3, #12
 8002140:	d11c      	bne.n	800217c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002142:	4b44      	ldr	r3, [pc, #272]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d116      	bne.n	800217c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800214e:	4b41      	ldr	r3, [pc, #260]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d005      	beq.n	8002166 <HAL_RCC_OscConfig+0x186>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d001      	beq.n	8002166 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e1d3      	b.n	800250e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002166:	4b3b      	ldr	r3, [pc, #236]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4937      	ldr	r1, [pc, #220]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 8002176:	4313      	orrs	r3, r2
 8002178:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800217a:	e03a      	b.n	80021f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d020      	beq.n	80021c6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002184:	4b34      	ldr	r3, [pc, #208]	@ (8002258 <HAL_RCC_OscConfig+0x278>)
 8002186:	2201      	movs	r2, #1
 8002188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218a:	f7ff f8c9 	bl	8001320 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002192:	f7ff f8c5 	bl	8001320 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e1b4      	b.n	800250e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0f0      	beq.n	8002192 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b0:	4b28      	ldr	r3, [pc, #160]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	4925      	ldr	r1, [pc, #148]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	600b      	str	r3, [r1, #0]
 80021c4:	e015      	b.n	80021f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021c6:	4b24      	ldr	r3, [pc, #144]	@ (8002258 <HAL_RCC_OscConfig+0x278>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021cc:	f7ff f8a8 	bl	8001320 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021d4:	f7ff f8a4 	bl	8001320 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e193      	b.n	800250e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1f0      	bne.n	80021d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d036      	beq.n	800226c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d016      	beq.n	8002234 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002206:	4b15      	ldr	r3, [pc, #84]	@ (800225c <HAL_RCC_OscConfig+0x27c>)
 8002208:	2201      	movs	r2, #1
 800220a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800220c:	f7ff f888 	bl	8001320 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002214:	f7ff f884 	bl	8001320 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e173      	b.n	800250e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002226:	4b0b      	ldr	r3, [pc, #44]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 8002228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f0      	beq.n	8002214 <HAL_RCC_OscConfig+0x234>
 8002232:	e01b      	b.n	800226c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002234:	4b09      	ldr	r3, [pc, #36]	@ (800225c <HAL_RCC_OscConfig+0x27c>)
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800223a:	f7ff f871 	bl	8001320 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002240:	e00e      	b.n	8002260 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002242:	f7ff f86d 	bl	8001320 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d907      	bls.n	8002260 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e15c      	b.n	800250e <HAL_RCC_OscConfig+0x52e>
 8002254:	40023800 	.word	0x40023800
 8002258:	42470000 	.word	0x42470000
 800225c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002260:	4b8a      	ldr	r3, [pc, #552]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 8002262:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1ea      	bne.n	8002242 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 8097 	beq.w	80023a8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800227a:	2300      	movs	r3, #0
 800227c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800227e:	4b83      	ldr	r3, [pc, #524]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10f      	bne.n	80022aa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	4b7f      	ldr	r3, [pc, #508]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002292:	4a7e      	ldr	r2, [pc, #504]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 8002294:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002298:	6413      	str	r3, [r2, #64]	@ 0x40
 800229a:	4b7c      	ldr	r3, [pc, #496]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022a2:	60bb      	str	r3, [r7, #8]
 80022a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022a6:	2301      	movs	r3, #1
 80022a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022aa:	4b79      	ldr	r3, [pc, #484]	@ (8002490 <HAL_RCC_OscConfig+0x4b0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d118      	bne.n	80022e8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022b6:	4b76      	ldr	r3, [pc, #472]	@ (8002490 <HAL_RCC_OscConfig+0x4b0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a75      	ldr	r2, [pc, #468]	@ (8002490 <HAL_RCC_OscConfig+0x4b0>)
 80022bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022c2:	f7ff f82d 	bl	8001320 <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ca:	f7ff f829 	bl	8001320 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e118      	b.n	800250e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022dc:	4b6c      	ldr	r3, [pc, #432]	@ (8002490 <HAL_RCC_OscConfig+0x4b0>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0f0      	beq.n	80022ca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d106      	bne.n	80022fe <HAL_RCC_OscConfig+0x31e>
 80022f0:	4b66      	ldr	r3, [pc, #408]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 80022f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022f4:	4a65      	ldr	r2, [pc, #404]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 80022f6:	f043 0301 	orr.w	r3, r3, #1
 80022fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80022fc:	e01c      	b.n	8002338 <HAL_RCC_OscConfig+0x358>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	2b05      	cmp	r3, #5
 8002304:	d10c      	bne.n	8002320 <HAL_RCC_OscConfig+0x340>
 8002306:	4b61      	ldr	r3, [pc, #388]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 8002308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800230a:	4a60      	ldr	r2, [pc, #384]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 800230c:	f043 0304 	orr.w	r3, r3, #4
 8002310:	6713      	str	r3, [r2, #112]	@ 0x70
 8002312:	4b5e      	ldr	r3, [pc, #376]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 8002314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002316:	4a5d      	ldr	r2, [pc, #372]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6713      	str	r3, [r2, #112]	@ 0x70
 800231e:	e00b      	b.n	8002338 <HAL_RCC_OscConfig+0x358>
 8002320:	4b5a      	ldr	r3, [pc, #360]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 8002322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002324:	4a59      	ldr	r2, [pc, #356]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 8002326:	f023 0301 	bic.w	r3, r3, #1
 800232a:	6713      	str	r3, [r2, #112]	@ 0x70
 800232c:	4b57      	ldr	r3, [pc, #348]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 800232e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002330:	4a56      	ldr	r2, [pc, #344]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 8002332:	f023 0304 	bic.w	r3, r3, #4
 8002336:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d015      	beq.n	800236c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002340:	f7fe ffee 	bl	8001320 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002346:	e00a      	b.n	800235e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002348:	f7fe ffea 	bl	8001320 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002356:	4293      	cmp	r3, r2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e0d7      	b.n	800250e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800235e:	4b4b      	ldr	r3, [pc, #300]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 8002360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0ee      	beq.n	8002348 <HAL_RCC_OscConfig+0x368>
 800236a:	e014      	b.n	8002396 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800236c:	f7fe ffd8 	bl	8001320 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002372:	e00a      	b.n	800238a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002374:	f7fe ffd4 	bl	8001320 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002382:	4293      	cmp	r3, r2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e0c1      	b.n	800250e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800238a:	4b40      	ldr	r3, [pc, #256]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 800238c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1ee      	bne.n	8002374 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002396:	7dfb      	ldrb	r3, [r7, #23]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d105      	bne.n	80023a8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800239c:	4b3b      	ldr	r3, [pc, #236]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 800239e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a0:	4a3a      	ldr	r2, [pc, #232]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 80023a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 80ad 	beq.w	800250c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023b2:	4b36      	ldr	r3, [pc, #216]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 030c 	and.w	r3, r3, #12
 80023ba:	2b08      	cmp	r3, #8
 80023bc:	d060      	beq.n	8002480 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d145      	bne.n	8002452 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c6:	4b33      	ldr	r3, [pc, #204]	@ (8002494 <HAL_RCC_OscConfig+0x4b4>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023cc:	f7fe ffa8 	bl	8001320 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d4:	f7fe ffa4 	bl	8001320 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e093      	b.n	800250e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e6:	4b29      	ldr	r3, [pc, #164]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f0      	bne.n	80023d4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69da      	ldr	r2, [r3, #28]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002400:	019b      	lsls	r3, r3, #6
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002408:	085b      	lsrs	r3, r3, #1
 800240a:	3b01      	subs	r3, #1
 800240c:	041b      	lsls	r3, r3, #16
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002414:	061b      	lsls	r3, r3, #24
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241c:	071b      	lsls	r3, r3, #28
 800241e:	491b      	ldr	r1, [pc, #108]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 8002420:	4313      	orrs	r3, r2
 8002422:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002424:	4b1b      	ldr	r3, [pc, #108]	@ (8002494 <HAL_RCC_OscConfig+0x4b4>)
 8002426:	2201      	movs	r2, #1
 8002428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242a:	f7fe ff79 	bl	8001320 <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002432:	f7fe ff75 	bl	8001320 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e064      	b.n	800250e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002444:	4b11      	ldr	r3, [pc, #68]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0f0      	beq.n	8002432 <HAL_RCC_OscConfig+0x452>
 8002450:	e05c      	b.n	800250c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002452:	4b10      	ldr	r3, [pc, #64]	@ (8002494 <HAL_RCC_OscConfig+0x4b4>)
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002458:	f7fe ff62 	bl	8001320 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002460:	f7fe ff5e 	bl	8001320 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e04d      	b.n	800250e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002472:	4b06      	ldr	r3, [pc, #24]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f0      	bne.n	8002460 <HAL_RCC_OscConfig+0x480>
 800247e:	e045      	b.n	800250c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d107      	bne.n	8002498 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e040      	b.n	800250e <HAL_RCC_OscConfig+0x52e>
 800248c:	40023800 	.word	0x40023800
 8002490:	40007000 	.word	0x40007000
 8002494:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002498:	4b1f      	ldr	r3, [pc, #124]	@ (8002518 <HAL_RCC_OscConfig+0x538>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d030      	beq.n	8002508 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d129      	bne.n	8002508 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024be:	429a      	cmp	r2, r3
 80024c0:	d122      	bne.n	8002508 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80024c8:	4013      	ands	r3, r2
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d119      	bne.n	8002508 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024de:	085b      	lsrs	r3, r3, #1
 80024e0:	3b01      	subs	r3, #1
 80024e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d10f      	bne.n	8002508 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d107      	bne.n	8002508 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002502:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002504:	429a      	cmp	r2, r3
 8002506:	d001      	beq.n	800250c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e000      	b.n	800250e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40023800 	.word	0x40023800

0800251c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e041      	b.n	80025b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d106      	bne.n	8002548 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7fe fcc8 	bl	8000ed8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2202      	movs	r2, #2
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3304      	adds	r3, #4
 8002558:	4619      	mov	r1, r3
 800255a:	4610      	mov	r0, r2
 800255c:	f000 fd6e 	bl	800303c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
	...

080025bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d001      	beq.n	80025d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e04e      	b.n	8002672 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2202      	movs	r2, #2
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 0201 	orr.w	r2, r2, #1
 80025ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a23      	ldr	r2, [pc, #140]	@ (8002680 <HAL_TIM_Base_Start_IT+0xc4>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d022      	beq.n	800263c <HAL_TIM_Base_Start_IT+0x80>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025fe:	d01d      	beq.n	800263c <HAL_TIM_Base_Start_IT+0x80>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a1f      	ldr	r2, [pc, #124]	@ (8002684 <HAL_TIM_Base_Start_IT+0xc8>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d018      	beq.n	800263c <HAL_TIM_Base_Start_IT+0x80>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a1e      	ldr	r2, [pc, #120]	@ (8002688 <HAL_TIM_Base_Start_IT+0xcc>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d013      	beq.n	800263c <HAL_TIM_Base_Start_IT+0x80>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a1c      	ldr	r2, [pc, #112]	@ (800268c <HAL_TIM_Base_Start_IT+0xd0>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d00e      	beq.n	800263c <HAL_TIM_Base_Start_IT+0x80>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a1b      	ldr	r2, [pc, #108]	@ (8002690 <HAL_TIM_Base_Start_IT+0xd4>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d009      	beq.n	800263c <HAL_TIM_Base_Start_IT+0x80>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a19      	ldr	r2, [pc, #100]	@ (8002694 <HAL_TIM_Base_Start_IT+0xd8>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d004      	beq.n	800263c <HAL_TIM_Base_Start_IT+0x80>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a18      	ldr	r2, [pc, #96]	@ (8002698 <HAL_TIM_Base_Start_IT+0xdc>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d111      	bne.n	8002660 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b06      	cmp	r3, #6
 800264c:	d010      	beq.n	8002670 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f042 0201 	orr.w	r2, r2, #1
 800265c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800265e:	e007      	b.n	8002670 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f042 0201 	orr.w	r2, r2, #1
 800266e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	40010000 	.word	0x40010000
 8002684:	40000400 	.word	0x40000400
 8002688:	40000800 	.word	0x40000800
 800268c:	40000c00 	.word	0x40000c00
 8002690:	40010400 	.word	0x40010400
 8002694:	40014000 	.word	0x40014000
 8002698:	40001800 	.word	0x40001800

0800269c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0201 	bic.w	r2, r2, #1
 80026b2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6a1a      	ldr	r2, [r3, #32]
 80026ba:	f241 1311 	movw	r3, #4369	@ 0x1111
 80026be:	4013      	ands	r3, r2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10f      	bne.n	80026e4 <HAL_TIM_Base_Stop_IT+0x48>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6a1a      	ldr	r2, [r3, #32]
 80026ca:	f240 4344 	movw	r3, #1092	@ 0x444
 80026ce:	4013      	ands	r3, r2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d107      	bne.n	80026e4 <HAL_TIM_Base_Stop_IT+0x48>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0201 	bic.w	r2, r2, #1
 80026e2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e041      	b.n	8002790 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	d106      	bne.n	8002726 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 f839 	bl	8002798 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2202      	movs	r2, #2
 800272a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	3304      	adds	r3, #4
 8002736:	4619      	mov	r1, r3
 8002738:	4610      	mov	r0, r2
 800273a:	f000 fc7f 	bl	800303c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027b6:	2300      	movs	r3, #0
 80027b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d104      	bne.n	80027ca <HAL_TIM_IC_Start_IT+0x1e>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	e013      	b.n	80027f2 <HAL_TIM_IC_Start_IT+0x46>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	2b04      	cmp	r3, #4
 80027ce:	d104      	bne.n	80027da <HAL_TIM_IC_Start_IT+0x2e>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	e00b      	b.n	80027f2 <HAL_TIM_IC_Start_IT+0x46>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d104      	bne.n	80027ea <HAL_TIM_IC_Start_IT+0x3e>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	e003      	b.n	80027f2 <HAL_TIM_IC_Start_IT+0x46>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d104      	bne.n	8002804 <HAL_TIM_IC_Start_IT+0x58>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002800:	b2db      	uxtb	r3, r3
 8002802:	e013      	b.n	800282c <HAL_TIM_IC_Start_IT+0x80>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	2b04      	cmp	r3, #4
 8002808:	d104      	bne.n	8002814 <HAL_TIM_IC_Start_IT+0x68>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002810:	b2db      	uxtb	r3, r3
 8002812:	e00b      	b.n	800282c <HAL_TIM_IC_Start_IT+0x80>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	2b08      	cmp	r3, #8
 8002818:	d104      	bne.n	8002824 <HAL_TIM_IC_Start_IT+0x78>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002820:	b2db      	uxtb	r3, r3
 8002822:	e003      	b.n	800282c <HAL_TIM_IC_Start_IT+0x80>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800282a:	b2db      	uxtb	r3, r3
 800282c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800282e:	7bbb      	ldrb	r3, [r7, #14]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d102      	bne.n	800283a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002834:	7b7b      	ldrb	r3, [r7, #13]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d001      	beq.n	800283e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e0cc      	b.n	80029d8 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d104      	bne.n	800284e <HAL_TIM_IC_Start_IT+0xa2>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2202      	movs	r2, #2
 8002848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800284c:	e013      	b.n	8002876 <HAL_TIM_IC_Start_IT+0xca>
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	2b04      	cmp	r3, #4
 8002852:	d104      	bne.n	800285e <HAL_TIM_IC_Start_IT+0xb2>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2202      	movs	r2, #2
 8002858:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800285c:	e00b      	b.n	8002876 <HAL_TIM_IC_Start_IT+0xca>
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	2b08      	cmp	r3, #8
 8002862:	d104      	bne.n	800286e <HAL_TIM_IC_Start_IT+0xc2>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2202      	movs	r2, #2
 8002868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800286c:	e003      	b.n	8002876 <HAL_TIM_IC_Start_IT+0xca>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2202      	movs	r2, #2
 8002872:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d104      	bne.n	8002886 <HAL_TIM_IC_Start_IT+0xda>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2202      	movs	r2, #2
 8002880:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002884:	e013      	b.n	80028ae <HAL_TIM_IC_Start_IT+0x102>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	2b04      	cmp	r3, #4
 800288a:	d104      	bne.n	8002896 <HAL_TIM_IC_Start_IT+0xea>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002894:	e00b      	b.n	80028ae <HAL_TIM_IC_Start_IT+0x102>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	2b08      	cmp	r3, #8
 800289a:	d104      	bne.n	80028a6 <HAL_TIM_IC_Start_IT+0xfa>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2202      	movs	r2, #2
 80028a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028a4:	e003      	b.n	80028ae <HAL_TIM_IC_Start_IT+0x102>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2202      	movs	r2, #2
 80028aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	2b0c      	cmp	r3, #12
 80028b2:	d841      	bhi.n	8002938 <HAL_TIM_IC_Start_IT+0x18c>
 80028b4:	a201      	add	r2, pc, #4	@ (adr r2, 80028bc <HAL_TIM_IC_Start_IT+0x110>)
 80028b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ba:	bf00      	nop
 80028bc:	080028f1 	.word	0x080028f1
 80028c0:	08002939 	.word	0x08002939
 80028c4:	08002939 	.word	0x08002939
 80028c8:	08002939 	.word	0x08002939
 80028cc:	08002903 	.word	0x08002903
 80028d0:	08002939 	.word	0x08002939
 80028d4:	08002939 	.word	0x08002939
 80028d8:	08002939 	.word	0x08002939
 80028dc:	08002915 	.word	0x08002915
 80028e0:	08002939 	.word	0x08002939
 80028e4:	08002939 	.word	0x08002939
 80028e8:	08002939 	.word	0x08002939
 80028ec:	08002927 	.word	0x08002927
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0202 	orr.w	r2, r2, #2
 80028fe:	60da      	str	r2, [r3, #12]
      break;
 8002900:	e01d      	b.n	800293e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68da      	ldr	r2, [r3, #12]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f042 0204 	orr.w	r2, r2, #4
 8002910:	60da      	str	r2, [r3, #12]
      break;
 8002912:	e014      	b.n	800293e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0208 	orr.w	r2, r2, #8
 8002922:	60da      	str	r2, [r3, #12]
      break;
 8002924:	e00b      	b.n	800293e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68da      	ldr	r2, [r3, #12]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f042 0210 	orr.w	r2, r2, #16
 8002934:	60da      	str	r2, [r3, #12]
      break;
 8002936:	e002      	b.n	800293e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	73fb      	strb	r3, [r7, #15]
      break;
 800293c:	bf00      	nop
  }

  if (status == HAL_OK)
 800293e:	7bfb      	ldrb	r3, [r7, #15]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d148      	bne.n	80029d6 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2201      	movs	r2, #1
 800294a:	6839      	ldr	r1, [r7, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f000 fde5 	bl	800351c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a22      	ldr	r2, [pc, #136]	@ (80029e0 <HAL_TIM_IC_Start_IT+0x234>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d022      	beq.n	80029a2 <HAL_TIM_IC_Start_IT+0x1f6>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002964:	d01d      	beq.n	80029a2 <HAL_TIM_IC_Start_IT+0x1f6>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a1e      	ldr	r2, [pc, #120]	@ (80029e4 <HAL_TIM_IC_Start_IT+0x238>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d018      	beq.n	80029a2 <HAL_TIM_IC_Start_IT+0x1f6>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a1c      	ldr	r2, [pc, #112]	@ (80029e8 <HAL_TIM_IC_Start_IT+0x23c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d013      	beq.n	80029a2 <HAL_TIM_IC_Start_IT+0x1f6>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a1b      	ldr	r2, [pc, #108]	@ (80029ec <HAL_TIM_IC_Start_IT+0x240>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d00e      	beq.n	80029a2 <HAL_TIM_IC_Start_IT+0x1f6>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a19      	ldr	r2, [pc, #100]	@ (80029f0 <HAL_TIM_IC_Start_IT+0x244>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d009      	beq.n	80029a2 <HAL_TIM_IC_Start_IT+0x1f6>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a18      	ldr	r2, [pc, #96]	@ (80029f4 <HAL_TIM_IC_Start_IT+0x248>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d004      	beq.n	80029a2 <HAL_TIM_IC_Start_IT+0x1f6>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a16      	ldr	r2, [pc, #88]	@ (80029f8 <HAL_TIM_IC_Start_IT+0x24c>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d111      	bne.n	80029c6 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2b06      	cmp	r3, #6
 80029b2:	d010      	beq.n	80029d6 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0201 	orr.w	r2, r2, #1
 80029c2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c4:	e007      	b.n	80029d6 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f042 0201 	orr.w	r2, r2, #1
 80029d4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80029d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40010000 	.word	0x40010000
 80029e4:	40000400 	.word	0x40000400
 80029e8:	40000800 	.word	0x40000800
 80029ec:	40000c00 	.word	0x40000c00
 80029f0:	40010400 	.word	0x40010400
 80029f4:	40014000 	.word	0x40014000
 80029f8:	40001800 	.word	0x40001800

080029fc <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a06:	2300      	movs	r3, #0
 8002a08:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b0c      	cmp	r3, #12
 8002a0e:	d841      	bhi.n	8002a94 <HAL_TIM_IC_Stop_IT+0x98>
 8002a10:	a201      	add	r2, pc, #4	@ (adr r2, 8002a18 <HAL_TIM_IC_Stop_IT+0x1c>)
 8002a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a16:	bf00      	nop
 8002a18:	08002a4d 	.word	0x08002a4d
 8002a1c:	08002a95 	.word	0x08002a95
 8002a20:	08002a95 	.word	0x08002a95
 8002a24:	08002a95 	.word	0x08002a95
 8002a28:	08002a5f 	.word	0x08002a5f
 8002a2c:	08002a95 	.word	0x08002a95
 8002a30:	08002a95 	.word	0x08002a95
 8002a34:	08002a95 	.word	0x08002a95
 8002a38:	08002a71 	.word	0x08002a71
 8002a3c:	08002a95 	.word	0x08002a95
 8002a40:	08002a95 	.word	0x08002a95
 8002a44:	08002a95 	.word	0x08002a95
 8002a48:	08002a83 	.word	0x08002a83
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0202 	bic.w	r2, r2, #2
 8002a5a:	60da      	str	r2, [r3, #12]
      break;
 8002a5c:	e01d      	b.n	8002a9a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0204 	bic.w	r2, r2, #4
 8002a6c:	60da      	str	r2, [r3, #12]
      break;
 8002a6e:	e014      	b.n	8002a9a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0208 	bic.w	r2, r2, #8
 8002a7e:	60da      	str	r2, [r3, #12]
      break;
 8002a80:	e00b      	b.n	8002a9a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68da      	ldr	r2, [r3, #12]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0210 	bic.w	r2, r2, #16
 8002a90:	60da      	str	r2, [r3, #12]
      break;
 8002a92:	e002      	b.n	8002a9a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	73fb      	strb	r3, [r7, #15]
      break;
 8002a98:	bf00      	nop
  }

  if (status == HAL_OK)
 8002a9a:	7bfb      	ldrb	r3, [r7, #15]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d156      	bne.n	8002b4e <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	6839      	ldr	r1, [r7, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 fd37 	bl	800351c <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6a1a      	ldr	r2, [r3, #32]
 8002ab4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002ab8:	4013      	ands	r3, r2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10f      	bne.n	8002ade <HAL_TIM_IC_Stop_IT+0xe2>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6a1a      	ldr	r2, [r3, #32]
 8002ac4:	f240 4344 	movw	r3, #1092	@ 0x444
 8002ac8:	4013      	ands	r3, r2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d107      	bne.n	8002ade <HAL_TIM_IC_Stop_IT+0xe2>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0201 	bic.w	r2, r2, #1
 8002adc:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d104      	bne.n	8002aee <HAL_TIM_IC_Stop_IT+0xf2>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002aec:	e013      	b.n	8002b16 <HAL_TIM_IC_Stop_IT+0x11a>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d104      	bne.n	8002afe <HAL_TIM_IC_Stop_IT+0x102>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002afc:	e00b      	b.n	8002b16 <HAL_TIM_IC_Stop_IT+0x11a>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d104      	bne.n	8002b0e <HAL_TIM_IC_Stop_IT+0x112>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b0c:	e003      	b.n	8002b16 <HAL_TIM_IC_Stop_IT+0x11a>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d104      	bne.n	8002b26 <HAL_TIM_IC_Stop_IT+0x12a>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b24:	e013      	b.n	8002b4e <HAL_TIM_IC_Stop_IT+0x152>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	2b04      	cmp	r3, #4
 8002b2a:	d104      	bne.n	8002b36 <HAL_TIM_IC_Stop_IT+0x13a>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b34:	e00b      	b.n	8002b4e <HAL_TIM_IC_Stop_IT+0x152>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d104      	bne.n	8002b46 <HAL_TIM_IC_Stop_IT+0x14a>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b44:	e003      	b.n	8002b4e <HAL_TIM_IC_Stop_IT+0x152>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d020      	beq.n	8002bbc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d01b      	beq.n	8002bbc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0202 	mvn.w	r2, #2
 8002b8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7fe f9e6 	bl	8000f74 <HAL_TIM_IC_CaptureCallback>
 8002ba8:	e005      	b.n	8002bb6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 fa27 	bl	8002ffe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 fa2e 	bl	8003012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d020      	beq.n	8002c08 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d01b      	beq.n	8002c08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f06f 0204 	mvn.w	r2, #4
 8002bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2202      	movs	r2, #2
 8002bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7fe f9c0 	bl	8000f74 <HAL_TIM_IC_CaptureCallback>
 8002bf4:	e005      	b.n	8002c02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 fa01 	bl	8002ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 fa08 	bl	8003012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d020      	beq.n	8002c54 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f003 0308 	and.w	r3, r3, #8
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d01b      	beq.n	8002c54 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f06f 0208 	mvn.w	r2, #8
 8002c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2204      	movs	r2, #4
 8002c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7fe f99a 	bl	8000f74 <HAL_TIM_IC_CaptureCallback>
 8002c40:	e005      	b.n	8002c4e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f9db 	bl	8002ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f9e2 	bl	8003012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	f003 0310 	and.w	r3, r3, #16
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d020      	beq.n	8002ca0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f003 0310 	and.w	r3, r3, #16
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d01b      	beq.n	8002ca0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f06f 0210 	mvn.w	r2, #16
 8002c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2208      	movs	r2, #8
 8002c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7fe f974 	bl	8000f74 <HAL_TIM_IC_CaptureCallback>
 8002c8c:	e005      	b.n	8002c9a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f9b5 	bl	8002ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 f9bc 	bl	8003012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00c      	beq.n	8002cc4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d007      	beq.n	8002cc4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f06f 0201 	mvn.w	r2, #1
 8002cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7fe f9a2 	bl	8001008 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00c      	beq.n	8002ce8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d007      	beq.n	8002ce8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 fcc6 	bl	8003674 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00c      	beq.n	8002d0c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d007      	beq.n	8002d0c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f98d 	bl	8003026 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f003 0320 	and.w	r3, r3, #32
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00c      	beq.n	8002d30 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f003 0320 	and.w	r3, r3, #32
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d007      	beq.n	8002d30 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f06f 0220 	mvn.w	r2, #32
 8002d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 fc98 	bl	8003660 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d30:	bf00      	nop
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d44:	2300      	movs	r3, #0
 8002d46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d101      	bne.n	8002d56 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002d52:	2302      	movs	r3, #2
 8002d54:	e088      	b.n	8002e68 <HAL_TIM_IC_ConfigChannel+0x130>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d11b      	bne.n	8002d9c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002d74:	f000 fa0e 	bl	8003194 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	699a      	ldr	r2, [r3, #24]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 020c 	bic.w	r2, r2, #12
 8002d86:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6999      	ldr	r1, [r3, #24]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	619a      	str	r2, [r3, #24]
 8002d9a:	e060      	b.n	8002e5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d11c      	bne.n	8002ddc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002db2:	f000 fa92 	bl	80032da <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	699a      	ldr	r2, [r3, #24]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002dc4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6999      	ldr	r1, [r3, #24]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	021a      	lsls	r2, r3, #8
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	619a      	str	r2, [r3, #24]
 8002dda:	e040      	b.n	8002e5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b08      	cmp	r3, #8
 8002de0:	d11b      	bne.n	8002e1a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002df2:	f000 fadf 	bl	80033b4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	69da      	ldr	r2, [r3, #28]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 020c 	bic.w	r2, r2, #12
 8002e04:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	69d9      	ldr	r1, [r3, #28]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	61da      	str	r2, [r3, #28]
 8002e18:	e021      	b.n	8002e5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b0c      	cmp	r3, #12
 8002e1e:	d11c      	bne.n	8002e5a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002e30:	f000 fafc 	bl	800342c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	69da      	ldr	r2, [r3, #28]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002e42:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	69d9      	ldr	r1, [r3, #28]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	021a      	lsls	r2, r3, #8
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	61da      	str	r2, [r3, #28]
 8002e58:	e001      	b.n	8002e5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d101      	bne.n	8002e8c <HAL_TIM_ConfigClockSource+0x1c>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	e0b4      	b.n	8002ff6 <HAL_TIM_ConfigClockSource+0x186>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002eaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002eb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ec4:	d03e      	beq.n	8002f44 <HAL_TIM_ConfigClockSource+0xd4>
 8002ec6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002eca:	f200 8087 	bhi.w	8002fdc <HAL_TIM_ConfigClockSource+0x16c>
 8002ece:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ed2:	f000 8086 	beq.w	8002fe2 <HAL_TIM_ConfigClockSource+0x172>
 8002ed6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002eda:	d87f      	bhi.n	8002fdc <HAL_TIM_ConfigClockSource+0x16c>
 8002edc:	2b70      	cmp	r3, #112	@ 0x70
 8002ede:	d01a      	beq.n	8002f16 <HAL_TIM_ConfigClockSource+0xa6>
 8002ee0:	2b70      	cmp	r3, #112	@ 0x70
 8002ee2:	d87b      	bhi.n	8002fdc <HAL_TIM_ConfigClockSource+0x16c>
 8002ee4:	2b60      	cmp	r3, #96	@ 0x60
 8002ee6:	d050      	beq.n	8002f8a <HAL_TIM_ConfigClockSource+0x11a>
 8002ee8:	2b60      	cmp	r3, #96	@ 0x60
 8002eea:	d877      	bhi.n	8002fdc <HAL_TIM_ConfigClockSource+0x16c>
 8002eec:	2b50      	cmp	r3, #80	@ 0x50
 8002eee:	d03c      	beq.n	8002f6a <HAL_TIM_ConfigClockSource+0xfa>
 8002ef0:	2b50      	cmp	r3, #80	@ 0x50
 8002ef2:	d873      	bhi.n	8002fdc <HAL_TIM_ConfigClockSource+0x16c>
 8002ef4:	2b40      	cmp	r3, #64	@ 0x40
 8002ef6:	d058      	beq.n	8002faa <HAL_TIM_ConfigClockSource+0x13a>
 8002ef8:	2b40      	cmp	r3, #64	@ 0x40
 8002efa:	d86f      	bhi.n	8002fdc <HAL_TIM_ConfigClockSource+0x16c>
 8002efc:	2b30      	cmp	r3, #48	@ 0x30
 8002efe:	d064      	beq.n	8002fca <HAL_TIM_ConfigClockSource+0x15a>
 8002f00:	2b30      	cmp	r3, #48	@ 0x30
 8002f02:	d86b      	bhi.n	8002fdc <HAL_TIM_ConfigClockSource+0x16c>
 8002f04:	2b20      	cmp	r3, #32
 8002f06:	d060      	beq.n	8002fca <HAL_TIM_ConfigClockSource+0x15a>
 8002f08:	2b20      	cmp	r3, #32
 8002f0a:	d867      	bhi.n	8002fdc <HAL_TIM_ConfigClockSource+0x16c>
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d05c      	beq.n	8002fca <HAL_TIM_ConfigClockSource+0x15a>
 8002f10:	2b10      	cmp	r3, #16
 8002f12:	d05a      	beq.n	8002fca <HAL_TIM_ConfigClockSource+0x15a>
 8002f14:	e062      	b.n	8002fdc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f26:	f000 fad9 	bl	80034dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002f38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	609a      	str	r2, [r3, #8]
      break;
 8002f42:	e04f      	b.n	8002fe4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f54:	f000 fac2 	bl	80034dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f66:	609a      	str	r2, [r3, #8]
      break;
 8002f68:	e03c      	b.n	8002fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f76:	461a      	mov	r2, r3
 8002f78:	f000 f980 	bl	800327c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2150      	movs	r1, #80	@ 0x50
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 fa8f 	bl	80034a6 <TIM_ITRx_SetConfig>
      break;
 8002f88:	e02c      	b.n	8002fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f96:	461a      	mov	r2, r3
 8002f98:	f000 f9dc 	bl	8003354 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2160      	movs	r1, #96	@ 0x60
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 fa7f 	bl	80034a6 <TIM_ITRx_SetConfig>
      break;
 8002fa8:	e01c      	b.n	8002fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	f000 f960 	bl	800327c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2140      	movs	r1, #64	@ 0x40
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 fa6f 	bl	80034a6 <TIM_ITRx_SetConfig>
      break;
 8002fc8:	e00c      	b.n	8002fe4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	f000 fa66 	bl	80034a6 <TIM_ITRx_SetConfig>
      break;
 8002fda:	e003      	b.n	8002fe4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	73fb      	strb	r3, [r7, #15]
      break;
 8002fe0:	e000      	b.n	8002fe4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002fe2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003026:	b480      	push	{r7}
 8003028:	b083      	sub	sp, #12
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
	...

0800303c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a46      	ldr	r2, [pc, #280]	@ (8003168 <TIM_Base_SetConfig+0x12c>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d013      	beq.n	800307c <TIM_Base_SetConfig+0x40>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800305a:	d00f      	beq.n	800307c <TIM_Base_SetConfig+0x40>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a43      	ldr	r2, [pc, #268]	@ (800316c <TIM_Base_SetConfig+0x130>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d00b      	beq.n	800307c <TIM_Base_SetConfig+0x40>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a42      	ldr	r2, [pc, #264]	@ (8003170 <TIM_Base_SetConfig+0x134>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d007      	beq.n	800307c <TIM_Base_SetConfig+0x40>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a41      	ldr	r2, [pc, #260]	@ (8003174 <TIM_Base_SetConfig+0x138>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d003      	beq.n	800307c <TIM_Base_SetConfig+0x40>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a40      	ldr	r2, [pc, #256]	@ (8003178 <TIM_Base_SetConfig+0x13c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d108      	bne.n	800308e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003082:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	4313      	orrs	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a35      	ldr	r2, [pc, #212]	@ (8003168 <TIM_Base_SetConfig+0x12c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d02b      	beq.n	80030ee <TIM_Base_SetConfig+0xb2>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800309c:	d027      	beq.n	80030ee <TIM_Base_SetConfig+0xb2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a32      	ldr	r2, [pc, #200]	@ (800316c <TIM_Base_SetConfig+0x130>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d023      	beq.n	80030ee <TIM_Base_SetConfig+0xb2>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a31      	ldr	r2, [pc, #196]	@ (8003170 <TIM_Base_SetConfig+0x134>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d01f      	beq.n	80030ee <TIM_Base_SetConfig+0xb2>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a30      	ldr	r2, [pc, #192]	@ (8003174 <TIM_Base_SetConfig+0x138>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d01b      	beq.n	80030ee <TIM_Base_SetConfig+0xb2>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a2f      	ldr	r2, [pc, #188]	@ (8003178 <TIM_Base_SetConfig+0x13c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d017      	beq.n	80030ee <TIM_Base_SetConfig+0xb2>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a2e      	ldr	r2, [pc, #184]	@ (800317c <TIM_Base_SetConfig+0x140>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d013      	beq.n	80030ee <TIM_Base_SetConfig+0xb2>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a2d      	ldr	r2, [pc, #180]	@ (8003180 <TIM_Base_SetConfig+0x144>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d00f      	beq.n	80030ee <TIM_Base_SetConfig+0xb2>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a2c      	ldr	r2, [pc, #176]	@ (8003184 <TIM_Base_SetConfig+0x148>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d00b      	beq.n	80030ee <TIM_Base_SetConfig+0xb2>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a2b      	ldr	r2, [pc, #172]	@ (8003188 <TIM_Base_SetConfig+0x14c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d007      	beq.n	80030ee <TIM_Base_SetConfig+0xb2>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a2a      	ldr	r2, [pc, #168]	@ (800318c <TIM_Base_SetConfig+0x150>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d003      	beq.n	80030ee <TIM_Base_SetConfig+0xb2>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a29      	ldr	r2, [pc, #164]	@ (8003190 <TIM_Base_SetConfig+0x154>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d108      	bne.n	8003100 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	4313      	orrs	r3, r2
 800310c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a10      	ldr	r2, [pc, #64]	@ (8003168 <TIM_Base_SetConfig+0x12c>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d003      	beq.n	8003134 <TIM_Base_SetConfig+0xf8>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a12      	ldr	r2, [pc, #72]	@ (8003178 <TIM_Base_SetConfig+0x13c>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d103      	bne.n	800313c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	691a      	ldr	r2, [r3, #16]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b01      	cmp	r3, #1
 800314c:	d105      	bne.n	800315a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	f023 0201 	bic.w	r2, r3, #1
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	611a      	str	r2, [r3, #16]
  }
}
 800315a:	bf00      	nop
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40010000 	.word	0x40010000
 800316c:	40000400 	.word	0x40000400
 8003170:	40000800 	.word	0x40000800
 8003174:	40000c00 	.word	0x40000c00
 8003178:	40010400 	.word	0x40010400
 800317c:	40014000 	.word	0x40014000
 8003180:	40014400 	.word	0x40014400
 8003184:	40014800 	.word	0x40014800
 8003188:	40001800 	.word	0x40001800
 800318c:	40001c00 	.word	0x40001c00
 8003190:	40002000 	.word	0x40002000

08003194 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003194:	b480      	push	{r7}
 8003196:	b087      	sub	sp, #28
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
 80031a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	f023 0201 	bic.w	r2, r3, #1
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	4a28      	ldr	r2, [pc, #160]	@ (8003260 <TIM_TI1_SetConfig+0xcc>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d01b      	beq.n	80031fa <TIM_TI1_SetConfig+0x66>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031c8:	d017      	beq.n	80031fa <TIM_TI1_SetConfig+0x66>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4a25      	ldr	r2, [pc, #148]	@ (8003264 <TIM_TI1_SetConfig+0xd0>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d013      	beq.n	80031fa <TIM_TI1_SetConfig+0x66>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	4a24      	ldr	r2, [pc, #144]	@ (8003268 <TIM_TI1_SetConfig+0xd4>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d00f      	beq.n	80031fa <TIM_TI1_SetConfig+0x66>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	4a23      	ldr	r2, [pc, #140]	@ (800326c <TIM_TI1_SetConfig+0xd8>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d00b      	beq.n	80031fa <TIM_TI1_SetConfig+0x66>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	4a22      	ldr	r2, [pc, #136]	@ (8003270 <TIM_TI1_SetConfig+0xdc>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d007      	beq.n	80031fa <TIM_TI1_SetConfig+0x66>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	4a21      	ldr	r2, [pc, #132]	@ (8003274 <TIM_TI1_SetConfig+0xe0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d003      	beq.n	80031fa <TIM_TI1_SetConfig+0x66>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	4a20      	ldr	r2, [pc, #128]	@ (8003278 <TIM_TI1_SetConfig+0xe4>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d101      	bne.n	80031fe <TIM_TI1_SetConfig+0x6a>
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <TIM_TI1_SetConfig+0x6c>
 80031fe:	2300      	movs	r3, #0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d008      	beq.n	8003216 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	f023 0303 	bic.w	r3, r3, #3
 800320a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4313      	orrs	r3, r2
 8003212:	617b      	str	r3, [r7, #20]
 8003214:	e003      	b.n	800321e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	f043 0301 	orr.w	r3, r3, #1
 800321c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003224:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	011b      	lsls	r3, r3, #4
 800322a:	b2db      	uxtb	r3, r3
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	4313      	orrs	r3, r2
 8003230:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	f023 030a 	bic.w	r3, r3, #10
 8003238:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	f003 030a 	and.w	r3, r3, #10
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	621a      	str	r2, [r3, #32]
}
 8003252:	bf00      	nop
 8003254:	371c      	adds	r7, #28
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	40010000 	.word	0x40010000
 8003264:	40000400 	.word	0x40000400
 8003268:	40000800 	.word	0x40000800
 800326c:	40000c00 	.word	0x40000c00
 8003270:	40010400 	.word	0x40010400
 8003274:	40014000 	.word	0x40014000
 8003278:	40001800 	.word	0x40001800

0800327c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800327c:	b480      	push	{r7}
 800327e:	b087      	sub	sp, #28
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	f023 0201 	bic.w	r2, r3, #1
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f023 030a 	bic.w	r3, r3, #10
 80032b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	4313      	orrs	r3, r2
 80032c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	621a      	str	r2, [r3, #32]
}
 80032ce:	bf00      	nop
 80032d0:	371c      	adds	r7, #28
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80032da:	b480      	push	{r7}
 80032dc:	b087      	sub	sp, #28
 80032de:	af00      	add	r7, sp, #0
 80032e0:	60f8      	str	r0, [r7, #12]
 80032e2:	60b9      	str	r1, [r7, #8]
 80032e4:	607a      	str	r2, [r7, #4]
 80032e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	f023 0210 	bic.w	r2, r3, #16
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003306:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	021b      	lsls	r3, r3, #8
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	4313      	orrs	r3, r2
 8003310:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003318:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	031b      	lsls	r3, r3, #12
 800331e:	b29b      	uxth	r3, r3
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	4313      	orrs	r3, r2
 8003324:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800332c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	4313      	orrs	r3, r2
 800333a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	621a      	str	r2, [r3, #32]
}
 8003348:	bf00      	nop
 800334a:	371c      	adds	r7, #28
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003354:	b480      	push	{r7}
 8003356:	b087      	sub	sp, #28
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	f023 0210 	bic.w	r2, r3, #16
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800337e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	031b      	lsls	r3, r3, #12
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003390:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	4313      	orrs	r3, r2
 800339a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	621a      	str	r2, [r3, #32]
}
 80033a8:	bf00      	nop
 80033aa:	371c      	adds	r7, #28
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
 80033c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	f023 0303 	bic.w	r3, r3, #3
 80033e0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033f0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003404:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	021b      	lsls	r3, r3, #8
 800340a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	4313      	orrs	r3, r2
 8003412:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	621a      	str	r2, [r3, #32]
}
 8003420:	bf00      	nop
 8003422:	371c      	adds	r7, #28
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800342c:	b480      	push	{r7}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
 8003438:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	69db      	ldr	r3, [r3, #28]
 8003450:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003458:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	021b      	lsls	r3, r3, #8
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	4313      	orrs	r3, r2
 8003462:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800346a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	031b      	lsls	r3, r3, #12
 8003470:	b29b      	uxth	r3, r3
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800347e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	031b      	lsls	r3, r3, #12
 8003484:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	4313      	orrs	r3, r2
 800348c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	621a      	str	r2, [r3, #32]
}
 800349a:	bf00      	nop
 800349c:	371c      	adds	r7, #28
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b085      	sub	sp, #20
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
 80034ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	f043 0307 	orr.w	r3, r3, #7
 80034c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	609a      	str	r2, [r3, #8]
}
 80034d0:	bf00      	nop
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034dc:	b480      	push	{r7}
 80034de:	b087      	sub	sp, #28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
 80034e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	021a      	lsls	r2, r3, #8
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	431a      	orrs	r2, r3
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	4313      	orrs	r3, r2
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	4313      	orrs	r3, r2
 8003508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	609a      	str	r2, [r3, #8]
}
 8003510:	bf00      	nop
 8003512:	371c      	adds	r7, #28
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800351c:	b480      	push	{r7}
 800351e:	b087      	sub	sp, #28
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	f003 031f 	and.w	r3, r3, #31
 800352e:	2201      	movs	r2, #1
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a1a      	ldr	r2, [r3, #32]
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	43db      	mvns	r3, r3
 800353e:	401a      	ands	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a1a      	ldr	r2, [r3, #32]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f003 031f 	and.w	r3, r3, #31
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	fa01 f303 	lsl.w	r3, r1, r3
 8003554:	431a      	orrs	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	621a      	str	r2, [r3, #32]
}
 800355a:	bf00      	nop
 800355c:	371c      	adds	r7, #28
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
	...

08003568 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003578:	2b01      	cmp	r3, #1
 800357a:	d101      	bne.n	8003580 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800357c:	2302      	movs	r3, #2
 800357e:	e05a      	b.n	8003636 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a21      	ldr	r2, [pc, #132]	@ (8003644 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d022      	beq.n	800360a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035cc:	d01d      	beq.n	800360a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a1d      	ldr	r2, [pc, #116]	@ (8003648 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d018      	beq.n	800360a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a1b      	ldr	r2, [pc, #108]	@ (800364c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d013      	beq.n	800360a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a1a      	ldr	r2, [pc, #104]	@ (8003650 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d00e      	beq.n	800360a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a18      	ldr	r2, [pc, #96]	@ (8003654 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d009      	beq.n	800360a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a17      	ldr	r2, [pc, #92]	@ (8003658 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d004      	beq.n	800360a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a15      	ldr	r2, [pc, #84]	@ (800365c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d10c      	bne.n	8003624 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003610:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	4313      	orrs	r3, r2
 800361a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	40010000 	.word	0x40010000
 8003648:	40000400 	.word	0x40000400
 800364c:	40000800 	.word	0x40000800
 8003650:	40000c00 	.word	0x40000c00
 8003654:	40010400 	.word	0x40010400
 8003658:	40014000 	.word	0x40014000
 800365c:	40001800 	.word	0x40001800

08003660 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e042      	b.n	8003720 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d106      	bne.n	80036b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7fd fd10 	bl	80010d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2224      	movs	r2, #36	@ 0x24
 80036b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 fa09 	bl	8003ae4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	691a      	ldr	r2, [r3, #16]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695a      	ldr	r2, [r3, #20]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003700:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b08a      	sub	sp, #40	@ 0x28
 800372c:	af02      	add	r7, sp, #8
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	603b      	str	r3, [r7, #0]
 8003734:	4613      	mov	r3, r2
 8003736:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003738:	2300      	movs	r3, #0
 800373a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b20      	cmp	r3, #32
 8003746:	d175      	bne.n	8003834 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <HAL_UART_Transmit+0x2c>
 800374e:	88fb      	ldrh	r3, [r7, #6]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e06e      	b.n	8003836 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2221      	movs	r2, #33	@ 0x21
 8003762:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003766:	f7fd fddb 	bl	8001320 <HAL_GetTick>
 800376a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	88fa      	ldrh	r2, [r7, #6]
 8003770:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	88fa      	ldrh	r2, [r7, #6]
 8003776:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003780:	d108      	bne.n	8003794 <HAL_UART_Transmit+0x6c>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d104      	bne.n	8003794 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800378a:	2300      	movs	r3, #0
 800378c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	61bb      	str	r3, [r7, #24]
 8003792:	e003      	b.n	800379c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003798:	2300      	movs	r3, #0
 800379a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800379c:	e02e      	b.n	80037fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	2200      	movs	r2, #0
 80037a6:	2180      	movs	r1, #128	@ 0x80
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 f8df 	bl	800396c <UART_WaitOnFlagUntilTimeout>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d005      	beq.n	80037c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e03a      	b.n	8003836 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10b      	bne.n	80037de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	881b      	ldrh	r3, [r3, #0]
 80037ca:	461a      	mov	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	3302      	adds	r3, #2
 80037da:	61bb      	str	r3, [r7, #24]
 80037dc:	e007      	b.n	80037ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	781a      	ldrb	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	3301      	adds	r3, #1
 80037ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003800:	b29b      	uxth	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1cb      	bne.n	800379e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	2200      	movs	r2, #0
 800380e:	2140      	movs	r1, #64	@ 0x40
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f000 f8ab 	bl	800396c <UART_WaitOnFlagUntilTimeout>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d005      	beq.n	8003828 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2220      	movs	r2, #32
 8003820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e006      	b.n	8003836 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003830:	2300      	movs	r3, #0
 8003832:	e000      	b.n	8003836 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003834:	2302      	movs	r3, #2
  }
}
 8003836:	4618      	mov	r0, r3
 8003838:	3720      	adds	r7, #32
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b08a      	sub	sp, #40	@ 0x28
 8003842:	af02      	add	r7, sp, #8
 8003844:	60f8      	str	r0, [r7, #12]
 8003846:	60b9      	str	r1, [r7, #8]
 8003848:	603b      	str	r3, [r7, #0]
 800384a:	4613      	mov	r3, r2
 800384c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800384e:	2300      	movs	r3, #0
 8003850:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b20      	cmp	r3, #32
 800385c:	f040 8081 	bne.w	8003962 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <HAL_UART_Receive+0x2e>
 8003866:	88fb      	ldrh	r3, [r7, #6]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e079      	b.n	8003964 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2222      	movs	r2, #34	@ 0x22
 800387a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003884:	f7fd fd4c 	bl	8001320 <HAL_GetTick>
 8003888:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	88fa      	ldrh	r2, [r7, #6]
 800388e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	88fa      	ldrh	r2, [r7, #6]
 8003894:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800389e:	d108      	bne.n	80038b2 <HAL_UART_Receive+0x74>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d104      	bne.n	80038b2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	61bb      	str	r3, [r7, #24]
 80038b0:	e003      	b.n	80038ba <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038b6:	2300      	movs	r3, #0
 80038b8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80038ba:	e047      	b.n	800394c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	2200      	movs	r2, #0
 80038c4:	2120      	movs	r1, #32
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 f850 	bl	800396c <UART_WaitOnFlagUntilTimeout>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d005      	beq.n	80038de <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2220      	movs	r2, #32
 80038d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e042      	b.n	8003964 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10c      	bne.n	80038fe <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	3302      	adds	r3, #2
 80038fa:	61bb      	str	r3, [r7, #24]
 80038fc:	e01f      	b.n	800393e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003906:	d007      	beq.n	8003918 <HAL_UART_Receive+0xda>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10a      	bne.n	8003926 <HAL_UART_Receive+0xe8>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d106      	bne.n	8003926 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	b2da      	uxtb	r2, r3
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	701a      	strb	r2, [r3, #0]
 8003924:	e008      	b.n	8003938 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	b2db      	uxtb	r3, r3
 800392e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003932:	b2da      	uxtb	r2, r3
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	3301      	adds	r3, #1
 800393c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003942:	b29b      	uxth	r3, r3
 8003944:	3b01      	subs	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003950:	b29b      	uxth	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1b2      	bne.n	80038bc <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2220      	movs	r2, #32
 800395a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800395e:	2300      	movs	r3, #0
 8003960:	e000      	b.n	8003964 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003962:	2302      	movs	r3, #2
  }
}
 8003964:	4618      	mov	r0, r3
 8003966:	3720      	adds	r7, #32
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	603b      	str	r3, [r7, #0]
 8003978:	4613      	mov	r3, r2
 800397a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800397c:	e03b      	b.n	80039f6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800397e:	6a3b      	ldr	r3, [r7, #32]
 8003980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003984:	d037      	beq.n	80039f6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003986:	f7fd fccb 	bl	8001320 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	6a3a      	ldr	r2, [r7, #32]
 8003992:	429a      	cmp	r2, r3
 8003994:	d302      	bcc.n	800399c <UART_WaitOnFlagUntilTimeout+0x30>
 8003996:	6a3b      	ldr	r3, [r7, #32]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e03a      	b.n	8003a16 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d023      	beq.n	80039f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	2b80      	cmp	r3, #128	@ 0x80
 80039b2:	d020      	beq.n	80039f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	2b40      	cmp	r3, #64	@ 0x40
 80039b8:	d01d      	beq.n	80039f6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0308 	and.w	r3, r3, #8
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d116      	bne.n	80039f6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80039c8:	2300      	movs	r3, #0
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	617b      	str	r3, [r7, #20]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	617b      	str	r3, [r7, #20]
 80039dc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 f81d 	bl	8003a1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2208      	movs	r2, #8
 80039e8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e00f      	b.n	8003a16 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	4013      	ands	r3, r2
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	bf0c      	ite	eq
 8003a06:	2301      	moveq	r3, #1
 8003a08:	2300      	movne	r3, #0
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	79fb      	ldrb	r3, [r7, #7]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d0b4      	beq.n	800397e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b095      	sub	sp, #84	@ 0x54
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	330c      	adds	r3, #12
 8003a2c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a30:	e853 3f00 	ldrex	r3, [r3]
 8003a34:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	330c      	adds	r3, #12
 8003a44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a46:	643a      	str	r2, [r7, #64]	@ 0x40
 8003a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a4c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a4e:	e841 2300 	strex	r3, r2, [r1]
 8003a52:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1e5      	bne.n	8003a26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	3314      	adds	r3, #20
 8003a60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	e853 3f00 	ldrex	r3, [r3]
 8003a68:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	f023 0301 	bic.w	r3, r3, #1
 8003a70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	3314      	adds	r3, #20
 8003a78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a82:	e841 2300 	strex	r3, r2, [r1]
 8003a86:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1e5      	bne.n	8003a5a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d119      	bne.n	8003aca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	330c      	adds	r3, #12
 8003a9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	e853 3f00 	ldrex	r3, [r3]
 8003aa4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	f023 0310 	bic.w	r3, r3, #16
 8003aac:	647b      	str	r3, [r7, #68]	@ 0x44
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	330c      	adds	r3, #12
 8003ab4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ab6:	61ba      	str	r2, [r7, #24]
 8003ab8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aba:	6979      	ldr	r1, [r7, #20]
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	e841 2300 	strex	r3, r2, [r1]
 8003ac2:	613b      	str	r3, [r7, #16]
   return(result);
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1e5      	bne.n	8003a96 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2220      	movs	r2, #32
 8003ace:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003ad8:	bf00      	nop
 8003ada:	3754      	adds	r7, #84	@ 0x54
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ae8:	b0c0      	sub	sp, #256	@ 0x100
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b00:	68d9      	ldr	r1, [r3, #12]
 8003b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	ea40 0301 	orr.w	r3, r0, r1
 8003b0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	431a      	orrs	r2, r3
 8003b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003b3c:	f021 010c 	bic.w	r1, r1, #12
 8003b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003b4a:	430b      	orrs	r3, r1
 8003b4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b5e:	6999      	ldr	r1, [r3, #24]
 8003b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	ea40 0301 	orr.w	r3, r0, r1
 8003b6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	4b8f      	ldr	r3, [pc, #572]	@ (8003db0 <UART_SetConfig+0x2cc>)
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d005      	beq.n	8003b84 <UART_SetConfig+0xa0>
 8003b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	4b8d      	ldr	r3, [pc, #564]	@ (8003db4 <UART_SetConfig+0x2d0>)
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d104      	bne.n	8003b8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b84:	f7fd ffe8 	bl	8001b58 <HAL_RCC_GetPCLK2Freq>
 8003b88:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003b8c:	e003      	b.n	8003b96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b8e:	f7fd ffcf 	bl	8001b30 <HAL_RCC_GetPCLK1Freq>
 8003b92:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ba0:	f040 810c 	bne.w	8003dbc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ba4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003bae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003bb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003bb6:	4622      	mov	r2, r4
 8003bb8:	462b      	mov	r3, r5
 8003bba:	1891      	adds	r1, r2, r2
 8003bbc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003bbe:	415b      	adcs	r3, r3
 8003bc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003bc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003bc6:	4621      	mov	r1, r4
 8003bc8:	eb12 0801 	adds.w	r8, r2, r1
 8003bcc:	4629      	mov	r1, r5
 8003bce:	eb43 0901 	adc.w	r9, r3, r1
 8003bd2:	f04f 0200 	mov.w	r2, #0
 8003bd6:	f04f 0300 	mov.w	r3, #0
 8003bda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003be2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003be6:	4690      	mov	r8, r2
 8003be8:	4699      	mov	r9, r3
 8003bea:	4623      	mov	r3, r4
 8003bec:	eb18 0303 	adds.w	r3, r8, r3
 8003bf0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003bf4:	462b      	mov	r3, r5
 8003bf6:	eb49 0303 	adc.w	r3, r9, r3
 8003bfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c0a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003c0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c12:	460b      	mov	r3, r1
 8003c14:	18db      	adds	r3, r3, r3
 8003c16:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c18:	4613      	mov	r3, r2
 8003c1a:	eb42 0303 	adc.w	r3, r2, r3
 8003c1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003c24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003c28:	f7fc fb4a 	bl	80002c0 <__aeabi_uldivmod>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	460b      	mov	r3, r1
 8003c30:	4b61      	ldr	r3, [pc, #388]	@ (8003db8 <UART_SetConfig+0x2d4>)
 8003c32:	fba3 2302 	umull	r2, r3, r3, r2
 8003c36:	095b      	lsrs	r3, r3, #5
 8003c38:	011c      	lsls	r4, r3, #4
 8003c3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c44:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003c48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003c4c:	4642      	mov	r2, r8
 8003c4e:	464b      	mov	r3, r9
 8003c50:	1891      	adds	r1, r2, r2
 8003c52:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003c54:	415b      	adcs	r3, r3
 8003c56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003c5c:	4641      	mov	r1, r8
 8003c5e:	eb12 0a01 	adds.w	sl, r2, r1
 8003c62:	4649      	mov	r1, r9
 8003c64:	eb43 0b01 	adc.w	fp, r3, r1
 8003c68:	f04f 0200 	mov.w	r2, #0
 8003c6c:	f04f 0300 	mov.w	r3, #0
 8003c70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c7c:	4692      	mov	sl, r2
 8003c7e:	469b      	mov	fp, r3
 8003c80:	4643      	mov	r3, r8
 8003c82:	eb1a 0303 	adds.w	r3, sl, r3
 8003c86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c8a:	464b      	mov	r3, r9
 8003c8c:	eb4b 0303 	adc.w	r3, fp, r3
 8003c90:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ca0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ca4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	18db      	adds	r3, r3, r3
 8003cac:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cae:	4613      	mov	r3, r2
 8003cb0:	eb42 0303 	adc.w	r3, r2, r3
 8003cb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003cba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003cbe:	f7fc faff 	bl	80002c0 <__aeabi_uldivmod>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	4611      	mov	r1, r2
 8003cc8:	4b3b      	ldr	r3, [pc, #236]	@ (8003db8 <UART_SetConfig+0x2d4>)
 8003cca:	fba3 2301 	umull	r2, r3, r3, r1
 8003cce:	095b      	lsrs	r3, r3, #5
 8003cd0:	2264      	movs	r2, #100	@ 0x64
 8003cd2:	fb02 f303 	mul.w	r3, r2, r3
 8003cd6:	1acb      	subs	r3, r1, r3
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003cde:	4b36      	ldr	r3, [pc, #216]	@ (8003db8 <UART_SetConfig+0x2d4>)
 8003ce0:	fba3 2302 	umull	r2, r3, r3, r2
 8003ce4:	095b      	lsrs	r3, r3, #5
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003cec:	441c      	add	r4, r3
 8003cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003cf8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003cfc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003d00:	4642      	mov	r2, r8
 8003d02:	464b      	mov	r3, r9
 8003d04:	1891      	adds	r1, r2, r2
 8003d06:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d08:	415b      	adcs	r3, r3
 8003d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003d10:	4641      	mov	r1, r8
 8003d12:	1851      	adds	r1, r2, r1
 8003d14:	6339      	str	r1, [r7, #48]	@ 0x30
 8003d16:	4649      	mov	r1, r9
 8003d18:	414b      	adcs	r3, r1
 8003d1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d1c:	f04f 0200 	mov.w	r2, #0
 8003d20:	f04f 0300 	mov.w	r3, #0
 8003d24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003d28:	4659      	mov	r1, fp
 8003d2a:	00cb      	lsls	r3, r1, #3
 8003d2c:	4651      	mov	r1, sl
 8003d2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d32:	4651      	mov	r1, sl
 8003d34:	00ca      	lsls	r2, r1, #3
 8003d36:	4610      	mov	r0, r2
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	4642      	mov	r2, r8
 8003d3e:	189b      	adds	r3, r3, r2
 8003d40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d44:	464b      	mov	r3, r9
 8003d46:	460a      	mov	r2, r1
 8003d48:	eb42 0303 	adc.w	r3, r2, r3
 8003d4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d5c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003d60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d64:	460b      	mov	r3, r1
 8003d66:	18db      	adds	r3, r3, r3
 8003d68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	eb42 0303 	adc.w	r3, r2, r3
 8003d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003d7a:	f7fc faa1 	bl	80002c0 <__aeabi_uldivmod>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	460b      	mov	r3, r1
 8003d82:	4b0d      	ldr	r3, [pc, #52]	@ (8003db8 <UART_SetConfig+0x2d4>)
 8003d84:	fba3 1302 	umull	r1, r3, r3, r2
 8003d88:	095b      	lsrs	r3, r3, #5
 8003d8a:	2164      	movs	r1, #100	@ 0x64
 8003d8c:	fb01 f303 	mul.w	r3, r1, r3
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	3332      	adds	r3, #50	@ 0x32
 8003d96:	4a08      	ldr	r2, [pc, #32]	@ (8003db8 <UART_SetConfig+0x2d4>)
 8003d98:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9c:	095b      	lsrs	r3, r3, #5
 8003d9e:	f003 0207 	and.w	r2, r3, #7
 8003da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4422      	add	r2, r4
 8003daa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003dac:	e106      	b.n	8003fbc <UART_SetConfig+0x4d8>
 8003dae:	bf00      	nop
 8003db0:	40011000 	.word	0x40011000
 8003db4:	40011400 	.word	0x40011400
 8003db8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003dc6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003dca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003dce:	4642      	mov	r2, r8
 8003dd0:	464b      	mov	r3, r9
 8003dd2:	1891      	adds	r1, r2, r2
 8003dd4:	6239      	str	r1, [r7, #32]
 8003dd6:	415b      	adcs	r3, r3
 8003dd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dde:	4641      	mov	r1, r8
 8003de0:	1854      	adds	r4, r2, r1
 8003de2:	4649      	mov	r1, r9
 8003de4:	eb43 0501 	adc.w	r5, r3, r1
 8003de8:	f04f 0200 	mov.w	r2, #0
 8003dec:	f04f 0300 	mov.w	r3, #0
 8003df0:	00eb      	lsls	r3, r5, #3
 8003df2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003df6:	00e2      	lsls	r2, r4, #3
 8003df8:	4614      	mov	r4, r2
 8003dfa:	461d      	mov	r5, r3
 8003dfc:	4643      	mov	r3, r8
 8003dfe:	18e3      	adds	r3, r4, r3
 8003e00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e04:	464b      	mov	r3, r9
 8003e06:	eb45 0303 	adc.w	r3, r5, r3
 8003e0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e1a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e1e:	f04f 0200 	mov.w	r2, #0
 8003e22:	f04f 0300 	mov.w	r3, #0
 8003e26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003e2a:	4629      	mov	r1, r5
 8003e2c:	008b      	lsls	r3, r1, #2
 8003e2e:	4621      	mov	r1, r4
 8003e30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e34:	4621      	mov	r1, r4
 8003e36:	008a      	lsls	r2, r1, #2
 8003e38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003e3c:	f7fc fa40 	bl	80002c0 <__aeabi_uldivmod>
 8003e40:	4602      	mov	r2, r0
 8003e42:	460b      	mov	r3, r1
 8003e44:	4b60      	ldr	r3, [pc, #384]	@ (8003fc8 <UART_SetConfig+0x4e4>)
 8003e46:	fba3 2302 	umull	r2, r3, r3, r2
 8003e4a:	095b      	lsrs	r3, r3, #5
 8003e4c:	011c      	lsls	r4, r3, #4
 8003e4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e52:	2200      	movs	r2, #0
 8003e54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e58:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003e60:	4642      	mov	r2, r8
 8003e62:	464b      	mov	r3, r9
 8003e64:	1891      	adds	r1, r2, r2
 8003e66:	61b9      	str	r1, [r7, #24]
 8003e68:	415b      	adcs	r3, r3
 8003e6a:	61fb      	str	r3, [r7, #28]
 8003e6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e70:	4641      	mov	r1, r8
 8003e72:	1851      	adds	r1, r2, r1
 8003e74:	6139      	str	r1, [r7, #16]
 8003e76:	4649      	mov	r1, r9
 8003e78:	414b      	adcs	r3, r1
 8003e7a:	617b      	str	r3, [r7, #20]
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	f04f 0300 	mov.w	r3, #0
 8003e84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e88:	4659      	mov	r1, fp
 8003e8a:	00cb      	lsls	r3, r1, #3
 8003e8c:	4651      	mov	r1, sl
 8003e8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e92:	4651      	mov	r1, sl
 8003e94:	00ca      	lsls	r2, r1, #3
 8003e96:	4610      	mov	r0, r2
 8003e98:	4619      	mov	r1, r3
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	4642      	mov	r2, r8
 8003e9e:	189b      	adds	r3, r3, r2
 8003ea0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ea4:	464b      	mov	r3, r9
 8003ea6:	460a      	mov	r2, r1
 8003ea8:	eb42 0303 	adc.w	r3, r2, r3
 8003eac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003eba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003ebc:	f04f 0200 	mov.w	r2, #0
 8003ec0:	f04f 0300 	mov.w	r3, #0
 8003ec4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003ec8:	4649      	mov	r1, r9
 8003eca:	008b      	lsls	r3, r1, #2
 8003ecc:	4641      	mov	r1, r8
 8003ece:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ed2:	4641      	mov	r1, r8
 8003ed4:	008a      	lsls	r2, r1, #2
 8003ed6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003eda:	f7fc f9f1 	bl	80002c0 <__aeabi_uldivmod>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	4611      	mov	r1, r2
 8003ee4:	4b38      	ldr	r3, [pc, #224]	@ (8003fc8 <UART_SetConfig+0x4e4>)
 8003ee6:	fba3 2301 	umull	r2, r3, r3, r1
 8003eea:	095b      	lsrs	r3, r3, #5
 8003eec:	2264      	movs	r2, #100	@ 0x64
 8003eee:	fb02 f303 	mul.w	r3, r2, r3
 8003ef2:	1acb      	subs	r3, r1, r3
 8003ef4:	011b      	lsls	r3, r3, #4
 8003ef6:	3332      	adds	r3, #50	@ 0x32
 8003ef8:	4a33      	ldr	r2, [pc, #204]	@ (8003fc8 <UART_SetConfig+0x4e4>)
 8003efa:	fba2 2303 	umull	r2, r3, r2, r3
 8003efe:	095b      	lsrs	r3, r3, #5
 8003f00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f04:	441c      	add	r4, r3
 8003f06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f0e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f10:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003f14:	4642      	mov	r2, r8
 8003f16:	464b      	mov	r3, r9
 8003f18:	1891      	adds	r1, r2, r2
 8003f1a:	60b9      	str	r1, [r7, #8]
 8003f1c:	415b      	adcs	r3, r3
 8003f1e:	60fb      	str	r3, [r7, #12]
 8003f20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f24:	4641      	mov	r1, r8
 8003f26:	1851      	adds	r1, r2, r1
 8003f28:	6039      	str	r1, [r7, #0]
 8003f2a:	4649      	mov	r1, r9
 8003f2c:	414b      	adcs	r3, r1
 8003f2e:	607b      	str	r3, [r7, #4]
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	f04f 0300 	mov.w	r3, #0
 8003f38:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f3c:	4659      	mov	r1, fp
 8003f3e:	00cb      	lsls	r3, r1, #3
 8003f40:	4651      	mov	r1, sl
 8003f42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f46:	4651      	mov	r1, sl
 8003f48:	00ca      	lsls	r2, r1, #3
 8003f4a:	4610      	mov	r0, r2
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	4603      	mov	r3, r0
 8003f50:	4642      	mov	r2, r8
 8003f52:	189b      	adds	r3, r3, r2
 8003f54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f56:	464b      	mov	r3, r9
 8003f58:	460a      	mov	r2, r1
 8003f5a:	eb42 0303 	adc.w	r3, r2, r3
 8003f5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f6a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003f6c:	f04f 0200 	mov.w	r2, #0
 8003f70:	f04f 0300 	mov.w	r3, #0
 8003f74:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003f78:	4649      	mov	r1, r9
 8003f7a:	008b      	lsls	r3, r1, #2
 8003f7c:	4641      	mov	r1, r8
 8003f7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f82:	4641      	mov	r1, r8
 8003f84:	008a      	lsls	r2, r1, #2
 8003f86:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003f8a:	f7fc f999 	bl	80002c0 <__aeabi_uldivmod>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	460b      	mov	r3, r1
 8003f92:	4b0d      	ldr	r3, [pc, #52]	@ (8003fc8 <UART_SetConfig+0x4e4>)
 8003f94:	fba3 1302 	umull	r1, r3, r3, r2
 8003f98:	095b      	lsrs	r3, r3, #5
 8003f9a:	2164      	movs	r1, #100	@ 0x64
 8003f9c:	fb01 f303 	mul.w	r3, r1, r3
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	3332      	adds	r3, #50	@ 0x32
 8003fa6:	4a08      	ldr	r2, [pc, #32]	@ (8003fc8 <UART_SetConfig+0x4e4>)
 8003fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fac:	095b      	lsrs	r3, r3, #5
 8003fae:	f003 020f 	and.w	r2, r3, #15
 8003fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4422      	add	r2, r4
 8003fba:	609a      	str	r2, [r3, #8]
}
 8003fbc:	bf00      	nop
 8003fbe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fc8:	51eb851f 	.word	0x51eb851f

08003fcc <siprintf>:
 8003fcc:	b40e      	push	{r1, r2, r3}
 8003fce:	b500      	push	{lr}
 8003fd0:	b09c      	sub	sp, #112	@ 0x70
 8003fd2:	ab1d      	add	r3, sp, #116	@ 0x74
 8003fd4:	9002      	str	r0, [sp, #8]
 8003fd6:	9006      	str	r0, [sp, #24]
 8003fd8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003fdc:	4809      	ldr	r0, [pc, #36]	@ (8004004 <siprintf+0x38>)
 8003fde:	9107      	str	r1, [sp, #28]
 8003fe0:	9104      	str	r1, [sp, #16]
 8003fe2:	4909      	ldr	r1, [pc, #36]	@ (8004008 <siprintf+0x3c>)
 8003fe4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fe8:	9105      	str	r1, [sp, #20]
 8003fea:	6800      	ldr	r0, [r0, #0]
 8003fec:	9301      	str	r3, [sp, #4]
 8003fee:	a902      	add	r1, sp, #8
 8003ff0:	f000 f994 	bl	800431c <_svfiprintf_r>
 8003ff4:	9b02      	ldr	r3, [sp, #8]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	701a      	strb	r2, [r3, #0]
 8003ffa:	b01c      	add	sp, #112	@ 0x70
 8003ffc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004000:	b003      	add	sp, #12
 8004002:	4770      	bx	lr
 8004004:	2000000c 	.word	0x2000000c
 8004008:	ffff0208 	.word	0xffff0208

0800400c <memset>:
 800400c:	4402      	add	r2, r0
 800400e:	4603      	mov	r3, r0
 8004010:	4293      	cmp	r3, r2
 8004012:	d100      	bne.n	8004016 <memset+0xa>
 8004014:	4770      	bx	lr
 8004016:	f803 1b01 	strb.w	r1, [r3], #1
 800401a:	e7f9      	b.n	8004010 <memset+0x4>

0800401c <__errno>:
 800401c:	4b01      	ldr	r3, [pc, #4]	@ (8004024 <__errno+0x8>)
 800401e:	6818      	ldr	r0, [r3, #0]
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	2000000c 	.word	0x2000000c

08004028 <__libc_init_array>:
 8004028:	b570      	push	{r4, r5, r6, lr}
 800402a:	4d0d      	ldr	r5, [pc, #52]	@ (8004060 <__libc_init_array+0x38>)
 800402c:	4c0d      	ldr	r4, [pc, #52]	@ (8004064 <__libc_init_array+0x3c>)
 800402e:	1b64      	subs	r4, r4, r5
 8004030:	10a4      	asrs	r4, r4, #2
 8004032:	2600      	movs	r6, #0
 8004034:	42a6      	cmp	r6, r4
 8004036:	d109      	bne.n	800404c <__libc_init_array+0x24>
 8004038:	4d0b      	ldr	r5, [pc, #44]	@ (8004068 <__libc_init_array+0x40>)
 800403a:	4c0c      	ldr	r4, [pc, #48]	@ (800406c <__libc_init_array+0x44>)
 800403c:	f000 fc66 	bl	800490c <_init>
 8004040:	1b64      	subs	r4, r4, r5
 8004042:	10a4      	asrs	r4, r4, #2
 8004044:	2600      	movs	r6, #0
 8004046:	42a6      	cmp	r6, r4
 8004048:	d105      	bne.n	8004056 <__libc_init_array+0x2e>
 800404a:	bd70      	pop	{r4, r5, r6, pc}
 800404c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004050:	4798      	blx	r3
 8004052:	3601      	adds	r6, #1
 8004054:	e7ee      	b.n	8004034 <__libc_init_array+0xc>
 8004056:	f855 3b04 	ldr.w	r3, [r5], #4
 800405a:	4798      	blx	r3
 800405c:	3601      	adds	r6, #1
 800405e:	e7f2      	b.n	8004046 <__libc_init_array+0x1e>
 8004060:	080049d0 	.word	0x080049d0
 8004064:	080049d0 	.word	0x080049d0
 8004068:	080049d0 	.word	0x080049d0
 800406c:	080049d4 	.word	0x080049d4

08004070 <__retarget_lock_acquire_recursive>:
 8004070:	4770      	bx	lr

08004072 <__retarget_lock_release_recursive>:
 8004072:	4770      	bx	lr

08004074 <_free_r>:
 8004074:	b538      	push	{r3, r4, r5, lr}
 8004076:	4605      	mov	r5, r0
 8004078:	2900      	cmp	r1, #0
 800407a:	d041      	beq.n	8004100 <_free_r+0x8c>
 800407c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004080:	1f0c      	subs	r4, r1, #4
 8004082:	2b00      	cmp	r3, #0
 8004084:	bfb8      	it	lt
 8004086:	18e4      	addlt	r4, r4, r3
 8004088:	f000 f8e0 	bl	800424c <__malloc_lock>
 800408c:	4a1d      	ldr	r2, [pc, #116]	@ (8004104 <_free_r+0x90>)
 800408e:	6813      	ldr	r3, [r2, #0]
 8004090:	b933      	cbnz	r3, 80040a0 <_free_r+0x2c>
 8004092:	6063      	str	r3, [r4, #4]
 8004094:	6014      	str	r4, [r2, #0]
 8004096:	4628      	mov	r0, r5
 8004098:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800409c:	f000 b8dc 	b.w	8004258 <__malloc_unlock>
 80040a0:	42a3      	cmp	r3, r4
 80040a2:	d908      	bls.n	80040b6 <_free_r+0x42>
 80040a4:	6820      	ldr	r0, [r4, #0]
 80040a6:	1821      	adds	r1, r4, r0
 80040a8:	428b      	cmp	r3, r1
 80040aa:	bf01      	itttt	eq
 80040ac:	6819      	ldreq	r1, [r3, #0]
 80040ae:	685b      	ldreq	r3, [r3, #4]
 80040b0:	1809      	addeq	r1, r1, r0
 80040b2:	6021      	streq	r1, [r4, #0]
 80040b4:	e7ed      	b.n	8004092 <_free_r+0x1e>
 80040b6:	461a      	mov	r2, r3
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	b10b      	cbz	r3, 80040c0 <_free_r+0x4c>
 80040bc:	42a3      	cmp	r3, r4
 80040be:	d9fa      	bls.n	80040b6 <_free_r+0x42>
 80040c0:	6811      	ldr	r1, [r2, #0]
 80040c2:	1850      	adds	r0, r2, r1
 80040c4:	42a0      	cmp	r0, r4
 80040c6:	d10b      	bne.n	80040e0 <_free_r+0x6c>
 80040c8:	6820      	ldr	r0, [r4, #0]
 80040ca:	4401      	add	r1, r0
 80040cc:	1850      	adds	r0, r2, r1
 80040ce:	4283      	cmp	r3, r0
 80040d0:	6011      	str	r1, [r2, #0]
 80040d2:	d1e0      	bne.n	8004096 <_free_r+0x22>
 80040d4:	6818      	ldr	r0, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	6053      	str	r3, [r2, #4]
 80040da:	4408      	add	r0, r1
 80040dc:	6010      	str	r0, [r2, #0]
 80040de:	e7da      	b.n	8004096 <_free_r+0x22>
 80040e0:	d902      	bls.n	80040e8 <_free_r+0x74>
 80040e2:	230c      	movs	r3, #12
 80040e4:	602b      	str	r3, [r5, #0]
 80040e6:	e7d6      	b.n	8004096 <_free_r+0x22>
 80040e8:	6820      	ldr	r0, [r4, #0]
 80040ea:	1821      	adds	r1, r4, r0
 80040ec:	428b      	cmp	r3, r1
 80040ee:	bf04      	itt	eq
 80040f0:	6819      	ldreq	r1, [r3, #0]
 80040f2:	685b      	ldreq	r3, [r3, #4]
 80040f4:	6063      	str	r3, [r4, #4]
 80040f6:	bf04      	itt	eq
 80040f8:	1809      	addeq	r1, r1, r0
 80040fa:	6021      	streq	r1, [r4, #0]
 80040fc:	6054      	str	r4, [r2, #4]
 80040fe:	e7ca      	b.n	8004096 <_free_r+0x22>
 8004100:	bd38      	pop	{r3, r4, r5, pc}
 8004102:	bf00      	nop
 8004104:	200029fc 	.word	0x200029fc

08004108 <sbrk_aligned>:
 8004108:	b570      	push	{r4, r5, r6, lr}
 800410a:	4e0f      	ldr	r6, [pc, #60]	@ (8004148 <sbrk_aligned+0x40>)
 800410c:	460c      	mov	r4, r1
 800410e:	6831      	ldr	r1, [r6, #0]
 8004110:	4605      	mov	r5, r0
 8004112:	b911      	cbnz	r1, 800411a <sbrk_aligned+0x12>
 8004114:	f000 fba6 	bl	8004864 <_sbrk_r>
 8004118:	6030      	str	r0, [r6, #0]
 800411a:	4621      	mov	r1, r4
 800411c:	4628      	mov	r0, r5
 800411e:	f000 fba1 	bl	8004864 <_sbrk_r>
 8004122:	1c43      	adds	r3, r0, #1
 8004124:	d103      	bne.n	800412e <sbrk_aligned+0x26>
 8004126:	f04f 34ff 	mov.w	r4, #4294967295
 800412a:	4620      	mov	r0, r4
 800412c:	bd70      	pop	{r4, r5, r6, pc}
 800412e:	1cc4      	adds	r4, r0, #3
 8004130:	f024 0403 	bic.w	r4, r4, #3
 8004134:	42a0      	cmp	r0, r4
 8004136:	d0f8      	beq.n	800412a <sbrk_aligned+0x22>
 8004138:	1a21      	subs	r1, r4, r0
 800413a:	4628      	mov	r0, r5
 800413c:	f000 fb92 	bl	8004864 <_sbrk_r>
 8004140:	3001      	adds	r0, #1
 8004142:	d1f2      	bne.n	800412a <sbrk_aligned+0x22>
 8004144:	e7ef      	b.n	8004126 <sbrk_aligned+0x1e>
 8004146:	bf00      	nop
 8004148:	200029f8 	.word	0x200029f8

0800414c <_malloc_r>:
 800414c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004150:	1ccd      	adds	r5, r1, #3
 8004152:	f025 0503 	bic.w	r5, r5, #3
 8004156:	3508      	adds	r5, #8
 8004158:	2d0c      	cmp	r5, #12
 800415a:	bf38      	it	cc
 800415c:	250c      	movcc	r5, #12
 800415e:	2d00      	cmp	r5, #0
 8004160:	4606      	mov	r6, r0
 8004162:	db01      	blt.n	8004168 <_malloc_r+0x1c>
 8004164:	42a9      	cmp	r1, r5
 8004166:	d904      	bls.n	8004172 <_malloc_r+0x26>
 8004168:	230c      	movs	r3, #12
 800416a:	6033      	str	r3, [r6, #0]
 800416c:	2000      	movs	r0, #0
 800416e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004172:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004248 <_malloc_r+0xfc>
 8004176:	f000 f869 	bl	800424c <__malloc_lock>
 800417a:	f8d8 3000 	ldr.w	r3, [r8]
 800417e:	461c      	mov	r4, r3
 8004180:	bb44      	cbnz	r4, 80041d4 <_malloc_r+0x88>
 8004182:	4629      	mov	r1, r5
 8004184:	4630      	mov	r0, r6
 8004186:	f7ff ffbf 	bl	8004108 <sbrk_aligned>
 800418a:	1c43      	adds	r3, r0, #1
 800418c:	4604      	mov	r4, r0
 800418e:	d158      	bne.n	8004242 <_malloc_r+0xf6>
 8004190:	f8d8 4000 	ldr.w	r4, [r8]
 8004194:	4627      	mov	r7, r4
 8004196:	2f00      	cmp	r7, #0
 8004198:	d143      	bne.n	8004222 <_malloc_r+0xd6>
 800419a:	2c00      	cmp	r4, #0
 800419c:	d04b      	beq.n	8004236 <_malloc_r+0xea>
 800419e:	6823      	ldr	r3, [r4, #0]
 80041a0:	4639      	mov	r1, r7
 80041a2:	4630      	mov	r0, r6
 80041a4:	eb04 0903 	add.w	r9, r4, r3
 80041a8:	f000 fb5c 	bl	8004864 <_sbrk_r>
 80041ac:	4581      	cmp	r9, r0
 80041ae:	d142      	bne.n	8004236 <_malloc_r+0xea>
 80041b0:	6821      	ldr	r1, [r4, #0]
 80041b2:	1a6d      	subs	r5, r5, r1
 80041b4:	4629      	mov	r1, r5
 80041b6:	4630      	mov	r0, r6
 80041b8:	f7ff ffa6 	bl	8004108 <sbrk_aligned>
 80041bc:	3001      	adds	r0, #1
 80041be:	d03a      	beq.n	8004236 <_malloc_r+0xea>
 80041c0:	6823      	ldr	r3, [r4, #0]
 80041c2:	442b      	add	r3, r5
 80041c4:	6023      	str	r3, [r4, #0]
 80041c6:	f8d8 3000 	ldr.w	r3, [r8]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	bb62      	cbnz	r2, 8004228 <_malloc_r+0xdc>
 80041ce:	f8c8 7000 	str.w	r7, [r8]
 80041d2:	e00f      	b.n	80041f4 <_malloc_r+0xa8>
 80041d4:	6822      	ldr	r2, [r4, #0]
 80041d6:	1b52      	subs	r2, r2, r5
 80041d8:	d420      	bmi.n	800421c <_malloc_r+0xd0>
 80041da:	2a0b      	cmp	r2, #11
 80041dc:	d917      	bls.n	800420e <_malloc_r+0xc2>
 80041de:	1961      	adds	r1, r4, r5
 80041e0:	42a3      	cmp	r3, r4
 80041e2:	6025      	str	r5, [r4, #0]
 80041e4:	bf18      	it	ne
 80041e6:	6059      	strne	r1, [r3, #4]
 80041e8:	6863      	ldr	r3, [r4, #4]
 80041ea:	bf08      	it	eq
 80041ec:	f8c8 1000 	streq.w	r1, [r8]
 80041f0:	5162      	str	r2, [r4, r5]
 80041f2:	604b      	str	r3, [r1, #4]
 80041f4:	4630      	mov	r0, r6
 80041f6:	f000 f82f 	bl	8004258 <__malloc_unlock>
 80041fa:	f104 000b 	add.w	r0, r4, #11
 80041fe:	1d23      	adds	r3, r4, #4
 8004200:	f020 0007 	bic.w	r0, r0, #7
 8004204:	1ac2      	subs	r2, r0, r3
 8004206:	bf1c      	itt	ne
 8004208:	1a1b      	subne	r3, r3, r0
 800420a:	50a3      	strne	r3, [r4, r2]
 800420c:	e7af      	b.n	800416e <_malloc_r+0x22>
 800420e:	6862      	ldr	r2, [r4, #4]
 8004210:	42a3      	cmp	r3, r4
 8004212:	bf0c      	ite	eq
 8004214:	f8c8 2000 	streq.w	r2, [r8]
 8004218:	605a      	strne	r2, [r3, #4]
 800421a:	e7eb      	b.n	80041f4 <_malloc_r+0xa8>
 800421c:	4623      	mov	r3, r4
 800421e:	6864      	ldr	r4, [r4, #4]
 8004220:	e7ae      	b.n	8004180 <_malloc_r+0x34>
 8004222:	463c      	mov	r4, r7
 8004224:	687f      	ldr	r7, [r7, #4]
 8004226:	e7b6      	b.n	8004196 <_malloc_r+0x4a>
 8004228:	461a      	mov	r2, r3
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	42a3      	cmp	r3, r4
 800422e:	d1fb      	bne.n	8004228 <_malloc_r+0xdc>
 8004230:	2300      	movs	r3, #0
 8004232:	6053      	str	r3, [r2, #4]
 8004234:	e7de      	b.n	80041f4 <_malloc_r+0xa8>
 8004236:	230c      	movs	r3, #12
 8004238:	6033      	str	r3, [r6, #0]
 800423a:	4630      	mov	r0, r6
 800423c:	f000 f80c 	bl	8004258 <__malloc_unlock>
 8004240:	e794      	b.n	800416c <_malloc_r+0x20>
 8004242:	6005      	str	r5, [r0, #0]
 8004244:	e7d6      	b.n	80041f4 <_malloc_r+0xa8>
 8004246:	bf00      	nop
 8004248:	200029fc 	.word	0x200029fc

0800424c <__malloc_lock>:
 800424c:	4801      	ldr	r0, [pc, #4]	@ (8004254 <__malloc_lock+0x8>)
 800424e:	f7ff bf0f 	b.w	8004070 <__retarget_lock_acquire_recursive>
 8004252:	bf00      	nop
 8004254:	200029f4 	.word	0x200029f4

08004258 <__malloc_unlock>:
 8004258:	4801      	ldr	r0, [pc, #4]	@ (8004260 <__malloc_unlock+0x8>)
 800425a:	f7ff bf0a 	b.w	8004072 <__retarget_lock_release_recursive>
 800425e:	bf00      	nop
 8004260:	200029f4 	.word	0x200029f4

08004264 <__ssputs_r>:
 8004264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004268:	688e      	ldr	r6, [r1, #8]
 800426a:	461f      	mov	r7, r3
 800426c:	42be      	cmp	r6, r7
 800426e:	680b      	ldr	r3, [r1, #0]
 8004270:	4682      	mov	sl, r0
 8004272:	460c      	mov	r4, r1
 8004274:	4690      	mov	r8, r2
 8004276:	d82d      	bhi.n	80042d4 <__ssputs_r+0x70>
 8004278:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800427c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004280:	d026      	beq.n	80042d0 <__ssputs_r+0x6c>
 8004282:	6965      	ldr	r5, [r4, #20]
 8004284:	6909      	ldr	r1, [r1, #16]
 8004286:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800428a:	eba3 0901 	sub.w	r9, r3, r1
 800428e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004292:	1c7b      	adds	r3, r7, #1
 8004294:	444b      	add	r3, r9
 8004296:	106d      	asrs	r5, r5, #1
 8004298:	429d      	cmp	r5, r3
 800429a:	bf38      	it	cc
 800429c:	461d      	movcc	r5, r3
 800429e:	0553      	lsls	r3, r2, #21
 80042a0:	d527      	bpl.n	80042f2 <__ssputs_r+0x8e>
 80042a2:	4629      	mov	r1, r5
 80042a4:	f7ff ff52 	bl	800414c <_malloc_r>
 80042a8:	4606      	mov	r6, r0
 80042aa:	b360      	cbz	r0, 8004306 <__ssputs_r+0xa2>
 80042ac:	6921      	ldr	r1, [r4, #16]
 80042ae:	464a      	mov	r2, r9
 80042b0:	f000 fae8 	bl	8004884 <memcpy>
 80042b4:	89a3      	ldrh	r3, [r4, #12]
 80042b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80042ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042be:	81a3      	strh	r3, [r4, #12]
 80042c0:	6126      	str	r6, [r4, #16]
 80042c2:	6165      	str	r5, [r4, #20]
 80042c4:	444e      	add	r6, r9
 80042c6:	eba5 0509 	sub.w	r5, r5, r9
 80042ca:	6026      	str	r6, [r4, #0]
 80042cc:	60a5      	str	r5, [r4, #8]
 80042ce:	463e      	mov	r6, r7
 80042d0:	42be      	cmp	r6, r7
 80042d2:	d900      	bls.n	80042d6 <__ssputs_r+0x72>
 80042d4:	463e      	mov	r6, r7
 80042d6:	6820      	ldr	r0, [r4, #0]
 80042d8:	4632      	mov	r2, r6
 80042da:	4641      	mov	r1, r8
 80042dc:	f000 faa8 	bl	8004830 <memmove>
 80042e0:	68a3      	ldr	r3, [r4, #8]
 80042e2:	1b9b      	subs	r3, r3, r6
 80042e4:	60a3      	str	r3, [r4, #8]
 80042e6:	6823      	ldr	r3, [r4, #0]
 80042e8:	4433      	add	r3, r6
 80042ea:	6023      	str	r3, [r4, #0]
 80042ec:	2000      	movs	r0, #0
 80042ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042f2:	462a      	mov	r2, r5
 80042f4:	f000 fad4 	bl	80048a0 <_realloc_r>
 80042f8:	4606      	mov	r6, r0
 80042fa:	2800      	cmp	r0, #0
 80042fc:	d1e0      	bne.n	80042c0 <__ssputs_r+0x5c>
 80042fe:	6921      	ldr	r1, [r4, #16]
 8004300:	4650      	mov	r0, sl
 8004302:	f7ff feb7 	bl	8004074 <_free_r>
 8004306:	230c      	movs	r3, #12
 8004308:	f8ca 3000 	str.w	r3, [sl]
 800430c:	89a3      	ldrh	r3, [r4, #12]
 800430e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004312:	81a3      	strh	r3, [r4, #12]
 8004314:	f04f 30ff 	mov.w	r0, #4294967295
 8004318:	e7e9      	b.n	80042ee <__ssputs_r+0x8a>
	...

0800431c <_svfiprintf_r>:
 800431c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004320:	4698      	mov	r8, r3
 8004322:	898b      	ldrh	r3, [r1, #12]
 8004324:	061b      	lsls	r3, r3, #24
 8004326:	b09d      	sub	sp, #116	@ 0x74
 8004328:	4607      	mov	r7, r0
 800432a:	460d      	mov	r5, r1
 800432c:	4614      	mov	r4, r2
 800432e:	d510      	bpl.n	8004352 <_svfiprintf_r+0x36>
 8004330:	690b      	ldr	r3, [r1, #16]
 8004332:	b973      	cbnz	r3, 8004352 <_svfiprintf_r+0x36>
 8004334:	2140      	movs	r1, #64	@ 0x40
 8004336:	f7ff ff09 	bl	800414c <_malloc_r>
 800433a:	6028      	str	r0, [r5, #0]
 800433c:	6128      	str	r0, [r5, #16]
 800433e:	b930      	cbnz	r0, 800434e <_svfiprintf_r+0x32>
 8004340:	230c      	movs	r3, #12
 8004342:	603b      	str	r3, [r7, #0]
 8004344:	f04f 30ff 	mov.w	r0, #4294967295
 8004348:	b01d      	add	sp, #116	@ 0x74
 800434a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800434e:	2340      	movs	r3, #64	@ 0x40
 8004350:	616b      	str	r3, [r5, #20]
 8004352:	2300      	movs	r3, #0
 8004354:	9309      	str	r3, [sp, #36]	@ 0x24
 8004356:	2320      	movs	r3, #32
 8004358:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800435c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004360:	2330      	movs	r3, #48	@ 0x30
 8004362:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004500 <_svfiprintf_r+0x1e4>
 8004366:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800436a:	f04f 0901 	mov.w	r9, #1
 800436e:	4623      	mov	r3, r4
 8004370:	469a      	mov	sl, r3
 8004372:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004376:	b10a      	cbz	r2, 800437c <_svfiprintf_r+0x60>
 8004378:	2a25      	cmp	r2, #37	@ 0x25
 800437a:	d1f9      	bne.n	8004370 <_svfiprintf_r+0x54>
 800437c:	ebba 0b04 	subs.w	fp, sl, r4
 8004380:	d00b      	beq.n	800439a <_svfiprintf_r+0x7e>
 8004382:	465b      	mov	r3, fp
 8004384:	4622      	mov	r2, r4
 8004386:	4629      	mov	r1, r5
 8004388:	4638      	mov	r0, r7
 800438a:	f7ff ff6b 	bl	8004264 <__ssputs_r>
 800438e:	3001      	adds	r0, #1
 8004390:	f000 80a7 	beq.w	80044e2 <_svfiprintf_r+0x1c6>
 8004394:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004396:	445a      	add	r2, fp
 8004398:	9209      	str	r2, [sp, #36]	@ 0x24
 800439a:	f89a 3000 	ldrb.w	r3, [sl]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 809f 	beq.w	80044e2 <_svfiprintf_r+0x1c6>
 80043a4:	2300      	movs	r3, #0
 80043a6:	f04f 32ff 	mov.w	r2, #4294967295
 80043aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043ae:	f10a 0a01 	add.w	sl, sl, #1
 80043b2:	9304      	str	r3, [sp, #16]
 80043b4:	9307      	str	r3, [sp, #28]
 80043b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80043ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80043bc:	4654      	mov	r4, sl
 80043be:	2205      	movs	r2, #5
 80043c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043c4:	484e      	ldr	r0, [pc, #312]	@ (8004500 <_svfiprintf_r+0x1e4>)
 80043c6:	f7fb ff2b 	bl	8000220 <memchr>
 80043ca:	9a04      	ldr	r2, [sp, #16]
 80043cc:	b9d8      	cbnz	r0, 8004406 <_svfiprintf_r+0xea>
 80043ce:	06d0      	lsls	r0, r2, #27
 80043d0:	bf44      	itt	mi
 80043d2:	2320      	movmi	r3, #32
 80043d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80043d8:	0711      	lsls	r1, r2, #28
 80043da:	bf44      	itt	mi
 80043dc:	232b      	movmi	r3, #43	@ 0x2b
 80043de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80043e2:	f89a 3000 	ldrb.w	r3, [sl]
 80043e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80043e8:	d015      	beq.n	8004416 <_svfiprintf_r+0xfa>
 80043ea:	9a07      	ldr	r2, [sp, #28]
 80043ec:	4654      	mov	r4, sl
 80043ee:	2000      	movs	r0, #0
 80043f0:	f04f 0c0a 	mov.w	ip, #10
 80043f4:	4621      	mov	r1, r4
 80043f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043fa:	3b30      	subs	r3, #48	@ 0x30
 80043fc:	2b09      	cmp	r3, #9
 80043fe:	d94b      	bls.n	8004498 <_svfiprintf_r+0x17c>
 8004400:	b1b0      	cbz	r0, 8004430 <_svfiprintf_r+0x114>
 8004402:	9207      	str	r2, [sp, #28]
 8004404:	e014      	b.n	8004430 <_svfiprintf_r+0x114>
 8004406:	eba0 0308 	sub.w	r3, r0, r8
 800440a:	fa09 f303 	lsl.w	r3, r9, r3
 800440e:	4313      	orrs	r3, r2
 8004410:	9304      	str	r3, [sp, #16]
 8004412:	46a2      	mov	sl, r4
 8004414:	e7d2      	b.n	80043bc <_svfiprintf_r+0xa0>
 8004416:	9b03      	ldr	r3, [sp, #12]
 8004418:	1d19      	adds	r1, r3, #4
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	9103      	str	r1, [sp, #12]
 800441e:	2b00      	cmp	r3, #0
 8004420:	bfbb      	ittet	lt
 8004422:	425b      	neglt	r3, r3
 8004424:	f042 0202 	orrlt.w	r2, r2, #2
 8004428:	9307      	strge	r3, [sp, #28]
 800442a:	9307      	strlt	r3, [sp, #28]
 800442c:	bfb8      	it	lt
 800442e:	9204      	strlt	r2, [sp, #16]
 8004430:	7823      	ldrb	r3, [r4, #0]
 8004432:	2b2e      	cmp	r3, #46	@ 0x2e
 8004434:	d10a      	bne.n	800444c <_svfiprintf_r+0x130>
 8004436:	7863      	ldrb	r3, [r4, #1]
 8004438:	2b2a      	cmp	r3, #42	@ 0x2a
 800443a:	d132      	bne.n	80044a2 <_svfiprintf_r+0x186>
 800443c:	9b03      	ldr	r3, [sp, #12]
 800443e:	1d1a      	adds	r2, r3, #4
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	9203      	str	r2, [sp, #12]
 8004444:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004448:	3402      	adds	r4, #2
 800444a:	9305      	str	r3, [sp, #20]
 800444c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004510 <_svfiprintf_r+0x1f4>
 8004450:	7821      	ldrb	r1, [r4, #0]
 8004452:	2203      	movs	r2, #3
 8004454:	4650      	mov	r0, sl
 8004456:	f7fb fee3 	bl	8000220 <memchr>
 800445a:	b138      	cbz	r0, 800446c <_svfiprintf_r+0x150>
 800445c:	9b04      	ldr	r3, [sp, #16]
 800445e:	eba0 000a 	sub.w	r0, r0, sl
 8004462:	2240      	movs	r2, #64	@ 0x40
 8004464:	4082      	lsls	r2, r0
 8004466:	4313      	orrs	r3, r2
 8004468:	3401      	adds	r4, #1
 800446a:	9304      	str	r3, [sp, #16]
 800446c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004470:	4824      	ldr	r0, [pc, #144]	@ (8004504 <_svfiprintf_r+0x1e8>)
 8004472:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004476:	2206      	movs	r2, #6
 8004478:	f7fb fed2 	bl	8000220 <memchr>
 800447c:	2800      	cmp	r0, #0
 800447e:	d036      	beq.n	80044ee <_svfiprintf_r+0x1d2>
 8004480:	4b21      	ldr	r3, [pc, #132]	@ (8004508 <_svfiprintf_r+0x1ec>)
 8004482:	bb1b      	cbnz	r3, 80044cc <_svfiprintf_r+0x1b0>
 8004484:	9b03      	ldr	r3, [sp, #12]
 8004486:	3307      	adds	r3, #7
 8004488:	f023 0307 	bic.w	r3, r3, #7
 800448c:	3308      	adds	r3, #8
 800448e:	9303      	str	r3, [sp, #12]
 8004490:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004492:	4433      	add	r3, r6
 8004494:	9309      	str	r3, [sp, #36]	@ 0x24
 8004496:	e76a      	b.n	800436e <_svfiprintf_r+0x52>
 8004498:	fb0c 3202 	mla	r2, ip, r2, r3
 800449c:	460c      	mov	r4, r1
 800449e:	2001      	movs	r0, #1
 80044a0:	e7a8      	b.n	80043f4 <_svfiprintf_r+0xd8>
 80044a2:	2300      	movs	r3, #0
 80044a4:	3401      	adds	r4, #1
 80044a6:	9305      	str	r3, [sp, #20]
 80044a8:	4619      	mov	r1, r3
 80044aa:	f04f 0c0a 	mov.w	ip, #10
 80044ae:	4620      	mov	r0, r4
 80044b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044b4:	3a30      	subs	r2, #48	@ 0x30
 80044b6:	2a09      	cmp	r2, #9
 80044b8:	d903      	bls.n	80044c2 <_svfiprintf_r+0x1a6>
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0c6      	beq.n	800444c <_svfiprintf_r+0x130>
 80044be:	9105      	str	r1, [sp, #20]
 80044c0:	e7c4      	b.n	800444c <_svfiprintf_r+0x130>
 80044c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80044c6:	4604      	mov	r4, r0
 80044c8:	2301      	movs	r3, #1
 80044ca:	e7f0      	b.n	80044ae <_svfiprintf_r+0x192>
 80044cc:	ab03      	add	r3, sp, #12
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	462a      	mov	r2, r5
 80044d2:	4b0e      	ldr	r3, [pc, #56]	@ (800450c <_svfiprintf_r+0x1f0>)
 80044d4:	a904      	add	r1, sp, #16
 80044d6:	4638      	mov	r0, r7
 80044d8:	f3af 8000 	nop.w
 80044dc:	1c42      	adds	r2, r0, #1
 80044de:	4606      	mov	r6, r0
 80044e0:	d1d6      	bne.n	8004490 <_svfiprintf_r+0x174>
 80044e2:	89ab      	ldrh	r3, [r5, #12]
 80044e4:	065b      	lsls	r3, r3, #25
 80044e6:	f53f af2d 	bmi.w	8004344 <_svfiprintf_r+0x28>
 80044ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80044ec:	e72c      	b.n	8004348 <_svfiprintf_r+0x2c>
 80044ee:	ab03      	add	r3, sp, #12
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	462a      	mov	r2, r5
 80044f4:	4b05      	ldr	r3, [pc, #20]	@ (800450c <_svfiprintf_r+0x1f0>)
 80044f6:	a904      	add	r1, sp, #16
 80044f8:	4638      	mov	r0, r7
 80044fa:	f000 f879 	bl	80045f0 <_printf_i>
 80044fe:	e7ed      	b.n	80044dc <_svfiprintf_r+0x1c0>
 8004500:	08004994 	.word	0x08004994
 8004504:	0800499e 	.word	0x0800499e
 8004508:	00000000 	.word	0x00000000
 800450c:	08004265 	.word	0x08004265
 8004510:	0800499a 	.word	0x0800499a

08004514 <_printf_common>:
 8004514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004518:	4616      	mov	r6, r2
 800451a:	4698      	mov	r8, r3
 800451c:	688a      	ldr	r2, [r1, #8]
 800451e:	690b      	ldr	r3, [r1, #16]
 8004520:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004524:	4293      	cmp	r3, r2
 8004526:	bfb8      	it	lt
 8004528:	4613      	movlt	r3, r2
 800452a:	6033      	str	r3, [r6, #0]
 800452c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004530:	4607      	mov	r7, r0
 8004532:	460c      	mov	r4, r1
 8004534:	b10a      	cbz	r2, 800453a <_printf_common+0x26>
 8004536:	3301      	adds	r3, #1
 8004538:	6033      	str	r3, [r6, #0]
 800453a:	6823      	ldr	r3, [r4, #0]
 800453c:	0699      	lsls	r1, r3, #26
 800453e:	bf42      	ittt	mi
 8004540:	6833      	ldrmi	r3, [r6, #0]
 8004542:	3302      	addmi	r3, #2
 8004544:	6033      	strmi	r3, [r6, #0]
 8004546:	6825      	ldr	r5, [r4, #0]
 8004548:	f015 0506 	ands.w	r5, r5, #6
 800454c:	d106      	bne.n	800455c <_printf_common+0x48>
 800454e:	f104 0a19 	add.w	sl, r4, #25
 8004552:	68e3      	ldr	r3, [r4, #12]
 8004554:	6832      	ldr	r2, [r6, #0]
 8004556:	1a9b      	subs	r3, r3, r2
 8004558:	42ab      	cmp	r3, r5
 800455a:	dc26      	bgt.n	80045aa <_printf_common+0x96>
 800455c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004560:	6822      	ldr	r2, [r4, #0]
 8004562:	3b00      	subs	r3, #0
 8004564:	bf18      	it	ne
 8004566:	2301      	movne	r3, #1
 8004568:	0692      	lsls	r2, r2, #26
 800456a:	d42b      	bmi.n	80045c4 <_printf_common+0xb0>
 800456c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004570:	4641      	mov	r1, r8
 8004572:	4638      	mov	r0, r7
 8004574:	47c8      	blx	r9
 8004576:	3001      	adds	r0, #1
 8004578:	d01e      	beq.n	80045b8 <_printf_common+0xa4>
 800457a:	6823      	ldr	r3, [r4, #0]
 800457c:	6922      	ldr	r2, [r4, #16]
 800457e:	f003 0306 	and.w	r3, r3, #6
 8004582:	2b04      	cmp	r3, #4
 8004584:	bf02      	ittt	eq
 8004586:	68e5      	ldreq	r5, [r4, #12]
 8004588:	6833      	ldreq	r3, [r6, #0]
 800458a:	1aed      	subeq	r5, r5, r3
 800458c:	68a3      	ldr	r3, [r4, #8]
 800458e:	bf0c      	ite	eq
 8004590:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004594:	2500      	movne	r5, #0
 8004596:	4293      	cmp	r3, r2
 8004598:	bfc4      	itt	gt
 800459a:	1a9b      	subgt	r3, r3, r2
 800459c:	18ed      	addgt	r5, r5, r3
 800459e:	2600      	movs	r6, #0
 80045a0:	341a      	adds	r4, #26
 80045a2:	42b5      	cmp	r5, r6
 80045a4:	d11a      	bne.n	80045dc <_printf_common+0xc8>
 80045a6:	2000      	movs	r0, #0
 80045a8:	e008      	b.n	80045bc <_printf_common+0xa8>
 80045aa:	2301      	movs	r3, #1
 80045ac:	4652      	mov	r2, sl
 80045ae:	4641      	mov	r1, r8
 80045b0:	4638      	mov	r0, r7
 80045b2:	47c8      	blx	r9
 80045b4:	3001      	adds	r0, #1
 80045b6:	d103      	bne.n	80045c0 <_printf_common+0xac>
 80045b8:	f04f 30ff 	mov.w	r0, #4294967295
 80045bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045c0:	3501      	adds	r5, #1
 80045c2:	e7c6      	b.n	8004552 <_printf_common+0x3e>
 80045c4:	18e1      	adds	r1, r4, r3
 80045c6:	1c5a      	adds	r2, r3, #1
 80045c8:	2030      	movs	r0, #48	@ 0x30
 80045ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80045ce:	4422      	add	r2, r4
 80045d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80045d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80045d8:	3302      	adds	r3, #2
 80045da:	e7c7      	b.n	800456c <_printf_common+0x58>
 80045dc:	2301      	movs	r3, #1
 80045de:	4622      	mov	r2, r4
 80045e0:	4641      	mov	r1, r8
 80045e2:	4638      	mov	r0, r7
 80045e4:	47c8      	blx	r9
 80045e6:	3001      	adds	r0, #1
 80045e8:	d0e6      	beq.n	80045b8 <_printf_common+0xa4>
 80045ea:	3601      	adds	r6, #1
 80045ec:	e7d9      	b.n	80045a2 <_printf_common+0x8e>
	...

080045f0 <_printf_i>:
 80045f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045f4:	7e0f      	ldrb	r7, [r1, #24]
 80045f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80045f8:	2f78      	cmp	r7, #120	@ 0x78
 80045fa:	4691      	mov	r9, r2
 80045fc:	4680      	mov	r8, r0
 80045fe:	460c      	mov	r4, r1
 8004600:	469a      	mov	sl, r3
 8004602:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004606:	d807      	bhi.n	8004618 <_printf_i+0x28>
 8004608:	2f62      	cmp	r7, #98	@ 0x62
 800460a:	d80a      	bhi.n	8004622 <_printf_i+0x32>
 800460c:	2f00      	cmp	r7, #0
 800460e:	f000 80d2 	beq.w	80047b6 <_printf_i+0x1c6>
 8004612:	2f58      	cmp	r7, #88	@ 0x58
 8004614:	f000 80b9 	beq.w	800478a <_printf_i+0x19a>
 8004618:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800461c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004620:	e03a      	b.n	8004698 <_printf_i+0xa8>
 8004622:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004626:	2b15      	cmp	r3, #21
 8004628:	d8f6      	bhi.n	8004618 <_printf_i+0x28>
 800462a:	a101      	add	r1, pc, #4	@ (adr r1, 8004630 <_printf_i+0x40>)
 800462c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004630:	08004689 	.word	0x08004689
 8004634:	0800469d 	.word	0x0800469d
 8004638:	08004619 	.word	0x08004619
 800463c:	08004619 	.word	0x08004619
 8004640:	08004619 	.word	0x08004619
 8004644:	08004619 	.word	0x08004619
 8004648:	0800469d 	.word	0x0800469d
 800464c:	08004619 	.word	0x08004619
 8004650:	08004619 	.word	0x08004619
 8004654:	08004619 	.word	0x08004619
 8004658:	08004619 	.word	0x08004619
 800465c:	0800479d 	.word	0x0800479d
 8004660:	080046c7 	.word	0x080046c7
 8004664:	08004757 	.word	0x08004757
 8004668:	08004619 	.word	0x08004619
 800466c:	08004619 	.word	0x08004619
 8004670:	080047bf 	.word	0x080047bf
 8004674:	08004619 	.word	0x08004619
 8004678:	080046c7 	.word	0x080046c7
 800467c:	08004619 	.word	0x08004619
 8004680:	08004619 	.word	0x08004619
 8004684:	0800475f 	.word	0x0800475f
 8004688:	6833      	ldr	r3, [r6, #0]
 800468a:	1d1a      	adds	r2, r3, #4
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6032      	str	r2, [r6, #0]
 8004690:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004694:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004698:	2301      	movs	r3, #1
 800469a:	e09d      	b.n	80047d8 <_printf_i+0x1e8>
 800469c:	6833      	ldr	r3, [r6, #0]
 800469e:	6820      	ldr	r0, [r4, #0]
 80046a0:	1d19      	adds	r1, r3, #4
 80046a2:	6031      	str	r1, [r6, #0]
 80046a4:	0606      	lsls	r6, r0, #24
 80046a6:	d501      	bpl.n	80046ac <_printf_i+0xbc>
 80046a8:	681d      	ldr	r5, [r3, #0]
 80046aa:	e003      	b.n	80046b4 <_printf_i+0xc4>
 80046ac:	0645      	lsls	r5, r0, #25
 80046ae:	d5fb      	bpl.n	80046a8 <_printf_i+0xb8>
 80046b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80046b4:	2d00      	cmp	r5, #0
 80046b6:	da03      	bge.n	80046c0 <_printf_i+0xd0>
 80046b8:	232d      	movs	r3, #45	@ 0x2d
 80046ba:	426d      	negs	r5, r5
 80046bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046c0:	4859      	ldr	r0, [pc, #356]	@ (8004828 <_printf_i+0x238>)
 80046c2:	230a      	movs	r3, #10
 80046c4:	e011      	b.n	80046ea <_printf_i+0xfa>
 80046c6:	6821      	ldr	r1, [r4, #0]
 80046c8:	6833      	ldr	r3, [r6, #0]
 80046ca:	0608      	lsls	r0, r1, #24
 80046cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80046d0:	d402      	bmi.n	80046d8 <_printf_i+0xe8>
 80046d2:	0649      	lsls	r1, r1, #25
 80046d4:	bf48      	it	mi
 80046d6:	b2ad      	uxthmi	r5, r5
 80046d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80046da:	4853      	ldr	r0, [pc, #332]	@ (8004828 <_printf_i+0x238>)
 80046dc:	6033      	str	r3, [r6, #0]
 80046de:	bf14      	ite	ne
 80046e0:	230a      	movne	r3, #10
 80046e2:	2308      	moveq	r3, #8
 80046e4:	2100      	movs	r1, #0
 80046e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80046ea:	6866      	ldr	r6, [r4, #4]
 80046ec:	60a6      	str	r6, [r4, #8]
 80046ee:	2e00      	cmp	r6, #0
 80046f0:	bfa2      	ittt	ge
 80046f2:	6821      	ldrge	r1, [r4, #0]
 80046f4:	f021 0104 	bicge.w	r1, r1, #4
 80046f8:	6021      	strge	r1, [r4, #0]
 80046fa:	b90d      	cbnz	r5, 8004700 <_printf_i+0x110>
 80046fc:	2e00      	cmp	r6, #0
 80046fe:	d04b      	beq.n	8004798 <_printf_i+0x1a8>
 8004700:	4616      	mov	r6, r2
 8004702:	fbb5 f1f3 	udiv	r1, r5, r3
 8004706:	fb03 5711 	mls	r7, r3, r1, r5
 800470a:	5dc7      	ldrb	r7, [r0, r7]
 800470c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004710:	462f      	mov	r7, r5
 8004712:	42bb      	cmp	r3, r7
 8004714:	460d      	mov	r5, r1
 8004716:	d9f4      	bls.n	8004702 <_printf_i+0x112>
 8004718:	2b08      	cmp	r3, #8
 800471a:	d10b      	bne.n	8004734 <_printf_i+0x144>
 800471c:	6823      	ldr	r3, [r4, #0]
 800471e:	07df      	lsls	r7, r3, #31
 8004720:	d508      	bpl.n	8004734 <_printf_i+0x144>
 8004722:	6923      	ldr	r3, [r4, #16]
 8004724:	6861      	ldr	r1, [r4, #4]
 8004726:	4299      	cmp	r1, r3
 8004728:	bfde      	ittt	le
 800472a:	2330      	movle	r3, #48	@ 0x30
 800472c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004730:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004734:	1b92      	subs	r2, r2, r6
 8004736:	6122      	str	r2, [r4, #16]
 8004738:	f8cd a000 	str.w	sl, [sp]
 800473c:	464b      	mov	r3, r9
 800473e:	aa03      	add	r2, sp, #12
 8004740:	4621      	mov	r1, r4
 8004742:	4640      	mov	r0, r8
 8004744:	f7ff fee6 	bl	8004514 <_printf_common>
 8004748:	3001      	adds	r0, #1
 800474a:	d14a      	bne.n	80047e2 <_printf_i+0x1f2>
 800474c:	f04f 30ff 	mov.w	r0, #4294967295
 8004750:	b004      	add	sp, #16
 8004752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004756:	6823      	ldr	r3, [r4, #0]
 8004758:	f043 0320 	orr.w	r3, r3, #32
 800475c:	6023      	str	r3, [r4, #0]
 800475e:	4833      	ldr	r0, [pc, #204]	@ (800482c <_printf_i+0x23c>)
 8004760:	2778      	movs	r7, #120	@ 0x78
 8004762:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004766:	6823      	ldr	r3, [r4, #0]
 8004768:	6831      	ldr	r1, [r6, #0]
 800476a:	061f      	lsls	r7, r3, #24
 800476c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004770:	d402      	bmi.n	8004778 <_printf_i+0x188>
 8004772:	065f      	lsls	r7, r3, #25
 8004774:	bf48      	it	mi
 8004776:	b2ad      	uxthmi	r5, r5
 8004778:	6031      	str	r1, [r6, #0]
 800477a:	07d9      	lsls	r1, r3, #31
 800477c:	bf44      	itt	mi
 800477e:	f043 0320 	orrmi.w	r3, r3, #32
 8004782:	6023      	strmi	r3, [r4, #0]
 8004784:	b11d      	cbz	r5, 800478e <_printf_i+0x19e>
 8004786:	2310      	movs	r3, #16
 8004788:	e7ac      	b.n	80046e4 <_printf_i+0xf4>
 800478a:	4827      	ldr	r0, [pc, #156]	@ (8004828 <_printf_i+0x238>)
 800478c:	e7e9      	b.n	8004762 <_printf_i+0x172>
 800478e:	6823      	ldr	r3, [r4, #0]
 8004790:	f023 0320 	bic.w	r3, r3, #32
 8004794:	6023      	str	r3, [r4, #0]
 8004796:	e7f6      	b.n	8004786 <_printf_i+0x196>
 8004798:	4616      	mov	r6, r2
 800479a:	e7bd      	b.n	8004718 <_printf_i+0x128>
 800479c:	6833      	ldr	r3, [r6, #0]
 800479e:	6825      	ldr	r5, [r4, #0]
 80047a0:	6961      	ldr	r1, [r4, #20]
 80047a2:	1d18      	adds	r0, r3, #4
 80047a4:	6030      	str	r0, [r6, #0]
 80047a6:	062e      	lsls	r6, r5, #24
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	d501      	bpl.n	80047b0 <_printf_i+0x1c0>
 80047ac:	6019      	str	r1, [r3, #0]
 80047ae:	e002      	b.n	80047b6 <_printf_i+0x1c6>
 80047b0:	0668      	lsls	r0, r5, #25
 80047b2:	d5fb      	bpl.n	80047ac <_printf_i+0x1bc>
 80047b4:	8019      	strh	r1, [r3, #0]
 80047b6:	2300      	movs	r3, #0
 80047b8:	6123      	str	r3, [r4, #16]
 80047ba:	4616      	mov	r6, r2
 80047bc:	e7bc      	b.n	8004738 <_printf_i+0x148>
 80047be:	6833      	ldr	r3, [r6, #0]
 80047c0:	1d1a      	adds	r2, r3, #4
 80047c2:	6032      	str	r2, [r6, #0]
 80047c4:	681e      	ldr	r6, [r3, #0]
 80047c6:	6862      	ldr	r2, [r4, #4]
 80047c8:	2100      	movs	r1, #0
 80047ca:	4630      	mov	r0, r6
 80047cc:	f7fb fd28 	bl	8000220 <memchr>
 80047d0:	b108      	cbz	r0, 80047d6 <_printf_i+0x1e6>
 80047d2:	1b80      	subs	r0, r0, r6
 80047d4:	6060      	str	r0, [r4, #4]
 80047d6:	6863      	ldr	r3, [r4, #4]
 80047d8:	6123      	str	r3, [r4, #16]
 80047da:	2300      	movs	r3, #0
 80047dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047e0:	e7aa      	b.n	8004738 <_printf_i+0x148>
 80047e2:	6923      	ldr	r3, [r4, #16]
 80047e4:	4632      	mov	r2, r6
 80047e6:	4649      	mov	r1, r9
 80047e8:	4640      	mov	r0, r8
 80047ea:	47d0      	blx	sl
 80047ec:	3001      	adds	r0, #1
 80047ee:	d0ad      	beq.n	800474c <_printf_i+0x15c>
 80047f0:	6823      	ldr	r3, [r4, #0]
 80047f2:	079b      	lsls	r3, r3, #30
 80047f4:	d413      	bmi.n	800481e <_printf_i+0x22e>
 80047f6:	68e0      	ldr	r0, [r4, #12]
 80047f8:	9b03      	ldr	r3, [sp, #12]
 80047fa:	4298      	cmp	r0, r3
 80047fc:	bfb8      	it	lt
 80047fe:	4618      	movlt	r0, r3
 8004800:	e7a6      	b.n	8004750 <_printf_i+0x160>
 8004802:	2301      	movs	r3, #1
 8004804:	4632      	mov	r2, r6
 8004806:	4649      	mov	r1, r9
 8004808:	4640      	mov	r0, r8
 800480a:	47d0      	blx	sl
 800480c:	3001      	adds	r0, #1
 800480e:	d09d      	beq.n	800474c <_printf_i+0x15c>
 8004810:	3501      	adds	r5, #1
 8004812:	68e3      	ldr	r3, [r4, #12]
 8004814:	9903      	ldr	r1, [sp, #12]
 8004816:	1a5b      	subs	r3, r3, r1
 8004818:	42ab      	cmp	r3, r5
 800481a:	dcf2      	bgt.n	8004802 <_printf_i+0x212>
 800481c:	e7eb      	b.n	80047f6 <_printf_i+0x206>
 800481e:	2500      	movs	r5, #0
 8004820:	f104 0619 	add.w	r6, r4, #25
 8004824:	e7f5      	b.n	8004812 <_printf_i+0x222>
 8004826:	bf00      	nop
 8004828:	080049a5 	.word	0x080049a5
 800482c:	080049b6 	.word	0x080049b6

08004830 <memmove>:
 8004830:	4288      	cmp	r0, r1
 8004832:	b510      	push	{r4, lr}
 8004834:	eb01 0402 	add.w	r4, r1, r2
 8004838:	d902      	bls.n	8004840 <memmove+0x10>
 800483a:	4284      	cmp	r4, r0
 800483c:	4623      	mov	r3, r4
 800483e:	d807      	bhi.n	8004850 <memmove+0x20>
 8004840:	1e43      	subs	r3, r0, #1
 8004842:	42a1      	cmp	r1, r4
 8004844:	d008      	beq.n	8004858 <memmove+0x28>
 8004846:	f811 2b01 	ldrb.w	r2, [r1], #1
 800484a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800484e:	e7f8      	b.n	8004842 <memmove+0x12>
 8004850:	4402      	add	r2, r0
 8004852:	4601      	mov	r1, r0
 8004854:	428a      	cmp	r2, r1
 8004856:	d100      	bne.n	800485a <memmove+0x2a>
 8004858:	bd10      	pop	{r4, pc}
 800485a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800485e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004862:	e7f7      	b.n	8004854 <memmove+0x24>

08004864 <_sbrk_r>:
 8004864:	b538      	push	{r3, r4, r5, lr}
 8004866:	4d06      	ldr	r5, [pc, #24]	@ (8004880 <_sbrk_r+0x1c>)
 8004868:	2300      	movs	r3, #0
 800486a:	4604      	mov	r4, r0
 800486c:	4608      	mov	r0, r1
 800486e:	602b      	str	r3, [r5, #0]
 8004870:	f7fc fa7a 	bl	8000d68 <_sbrk>
 8004874:	1c43      	adds	r3, r0, #1
 8004876:	d102      	bne.n	800487e <_sbrk_r+0x1a>
 8004878:	682b      	ldr	r3, [r5, #0]
 800487a:	b103      	cbz	r3, 800487e <_sbrk_r+0x1a>
 800487c:	6023      	str	r3, [r4, #0]
 800487e:	bd38      	pop	{r3, r4, r5, pc}
 8004880:	200029f0 	.word	0x200029f0

08004884 <memcpy>:
 8004884:	440a      	add	r2, r1
 8004886:	4291      	cmp	r1, r2
 8004888:	f100 33ff 	add.w	r3, r0, #4294967295
 800488c:	d100      	bne.n	8004890 <memcpy+0xc>
 800488e:	4770      	bx	lr
 8004890:	b510      	push	{r4, lr}
 8004892:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004896:	f803 4f01 	strb.w	r4, [r3, #1]!
 800489a:	4291      	cmp	r1, r2
 800489c:	d1f9      	bne.n	8004892 <memcpy+0xe>
 800489e:	bd10      	pop	{r4, pc}

080048a0 <_realloc_r>:
 80048a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048a4:	4680      	mov	r8, r0
 80048a6:	4615      	mov	r5, r2
 80048a8:	460c      	mov	r4, r1
 80048aa:	b921      	cbnz	r1, 80048b6 <_realloc_r+0x16>
 80048ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048b0:	4611      	mov	r1, r2
 80048b2:	f7ff bc4b 	b.w	800414c <_malloc_r>
 80048b6:	b92a      	cbnz	r2, 80048c4 <_realloc_r+0x24>
 80048b8:	f7ff fbdc 	bl	8004074 <_free_r>
 80048bc:	2400      	movs	r4, #0
 80048be:	4620      	mov	r0, r4
 80048c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048c4:	f000 f81a 	bl	80048fc <_malloc_usable_size_r>
 80048c8:	4285      	cmp	r5, r0
 80048ca:	4606      	mov	r6, r0
 80048cc:	d802      	bhi.n	80048d4 <_realloc_r+0x34>
 80048ce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80048d2:	d8f4      	bhi.n	80048be <_realloc_r+0x1e>
 80048d4:	4629      	mov	r1, r5
 80048d6:	4640      	mov	r0, r8
 80048d8:	f7ff fc38 	bl	800414c <_malloc_r>
 80048dc:	4607      	mov	r7, r0
 80048de:	2800      	cmp	r0, #0
 80048e0:	d0ec      	beq.n	80048bc <_realloc_r+0x1c>
 80048e2:	42b5      	cmp	r5, r6
 80048e4:	462a      	mov	r2, r5
 80048e6:	4621      	mov	r1, r4
 80048e8:	bf28      	it	cs
 80048ea:	4632      	movcs	r2, r6
 80048ec:	f7ff ffca 	bl	8004884 <memcpy>
 80048f0:	4621      	mov	r1, r4
 80048f2:	4640      	mov	r0, r8
 80048f4:	f7ff fbbe 	bl	8004074 <_free_r>
 80048f8:	463c      	mov	r4, r7
 80048fa:	e7e0      	b.n	80048be <_realloc_r+0x1e>

080048fc <_malloc_usable_size_r>:
 80048fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004900:	1f18      	subs	r0, r3, #4
 8004902:	2b00      	cmp	r3, #0
 8004904:	bfbc      	itt	lt
 8004906:	580b      	ldrlt	r3, [r1, r0]
 8004908:	18c0      	addlt	r0, r0, r3
 800490a:	4770      	bx	lr

0800490c <_init>:
 800490c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800490e:	bf00      	nop
 8004910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004912:	bc08      	pop	{r3}
 8004914:	469e      	mov	lr, r3
 8004916:	4770      	bx	lr

08004918 <_fini>:
 8004918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800491a:	bf00      	nop
 800491c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800491e:	bc08      	pop	{r3}
 8004920:	469e      	mov	lr, r3
 8004922:	4770      	bx	lr
